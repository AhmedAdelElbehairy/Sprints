
DesignImplementUartDriverEchoApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000173c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  0000173c  000017d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800160  00800160  000018d0  2**0
                  ALLOC
  3 .stab         00001c74  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a57  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_13>
      38:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_14>
      3c:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 36       	cpi	r26, 0x66	; 102
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 0b 	call	0x1664	; 0x1664 <main>
      8a:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
void static (*UART_TX_Complete_callback)(void)=NULL;
void __vector_13(void)__attribute__((signal,used));//RX_complete
void __vector_14(void)__attribute__((signal,used));//UDRE Empty
void __vector_15(void)__attribute__((signal,used));//TX_complete

uint8_t UART_Init(uint8_t UartNumber) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_Init+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
      9e:	8f ef       	ldi	r24, 0xFF	; 255
      a0:	89 83       	std	Y+1, r24	; 0x01
	if (UartNumber > NumOfUARTChannels) {
      a2:	8a 81       	ldd	r24, Y+2	; 0x02
      a4:	82 30       	cpi	r24, 0x02	; 2
      a6:	18 f0       	brcs	.+6      	; 0xae <UART_Init+0x1c>
		//error uart channel out of range
		ErrRetVal = Unavailable_UART_Channel;
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	89 83       	std	Y+1, r24	; 0x01
      ac:	6e c0       	rjmp	.+220    	; 0x18a <UART_Init+0xf8>
	} else {
		/* configure control and status register A
		 * (double transmission speed & Multi-processor communication mode) */
		MODIFY_REG(UART_ControlStatusRegA, UART_DoubleTransmissionSpeed_MSK,
      ae:	ab e2       	ldi	r26, 0x2B	; 43
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	eb e2       	ldi	r30, 0x2B	; 43
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	82 60       	ori	r24, 0x02	; 2
      ba:	8c 93       	st	X, r24
				DoubleSpeedTransmission<<UART_DoubleTransmissionSpeed_BIT);
		MODIFY_REG(UART_ControlStatusRegA,
      bc:	ab e2       	ldi	r26, 0x2B	; 43
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	eb e2       	ldi	r30, 0x2B	; 43
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	8e 7f       	andi	r24, 0xFE	; 254
      c8:	8c 93       	st	X, r24
				UART_MultiProcessorCommunicationMode_MSK,
				MultiProcessCommunicationMode<<UART_MultiProcessorCommunicationMode_BIT);

		/* Setting Uart Data Size */
		MODIFY_REG(UART_ControlStatusRegB, UART_CharacterSizeBit_2_MSK,
      ca:	aa e2       	ldi	r26, 0x2A	; 42
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	ea e2       	ldi	r30, 0x2A	; 42
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8b 7f       	andi	r24, 0xFB	; 251
      d6:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,2)<<UART_CharacterSizeBit_2_BIT);
		SET_BIT(UART_ControlStatusRegC, UART_RegisterSelect_BIT);
      d8:	a0 e4       	ldi	r26, 0x40	; 64
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e0 e4       	ldi	r30, 0x40	; 64
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	8c 93       	st	X, r24
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_1_MSK,
      e6:	a0 e4       	ldi	r26, 0x40	; 64
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e0 e4       	ldi	r30, 0x40	; 64
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,1)<<UART_CharacterSizeBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_0_MSK,
      f4:	a0 e4       	ldi	r26, 0x40	; 64
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e0 e4       	ldi	r30, 0x40	; 64
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	82 60       	ori	r24, 0x02	; 2
     100:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,0)<<UART_CharacterSizeBit_0_BIT);

		/* setting Stop Bit */
		MODIFY_REG(UART_ControlStatusRegC, UART_StopBitSelect_MSK,
     102:	a0 e4       	ldi	r26, 0x40	; 64
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	e0 e4       	ldi	r30, 0x40	; 64
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	87 7f       	andi	r24, 0xF7	; 247
     10e:	8c 93       	st	X, r24
				StopBitMode<<UART_StopBitSelect_BIT);

		/* Setting Parity mode */
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_1_MSK,
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e0 e4       	ldi	r30, 0x40	; 64
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8f 7d       	andi	r24, 0xDF	; 223
     11c:	8c 93       	st	X, r24
				READ_BIT(ParityMode,1)<<UART_ParityModeSelectBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_0_MSK,
     11e:	a0 e4       	ldi	r26, 0x40	; 64
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e0 e4       	ldi	r30, 0x40	; 64
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8f 7e       	andi	r24, 0xEF	; 239
     12a:	8c 93       	st	X, r24
				READ_BIT(ParityMode,0)<<UART_ParityModeSelectBit_0_BIT);
		DIO_SetPortVal(PORTA, UART_ControlStatusRegC);
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	90 81       	ld	r25, Z
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	69 2f       	mov	r22, r25
     136:	0e 94 89 03 	call	0x712	; 0x712 <DIO_SetPortVal>
		/* Setting communication mode (synch. or Asynch.)*/
		MODIFY_REG(UART_ControlStatusRegC, UART_SynchAsynchModeSelect_MSK,
     13a:	a0 e4       	ldi	r26, 0x40	; 64
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	e0 e4       	ldi	r30, 0x40	; 64
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	8f 7b       	andi	r24, 0xBF	; 191
     146:	8c 93       	st	X, r24
				CommunicationMode<<UART_SynchAsynchModeSelect_BIT);

		/*Set Clock Poalrity*/
		// ignored as all our work is asynchronus communication mode.
		/*Set the value of baud rate register*/
		CLEAR_BIT(UART_BaudRateRegH,UART_RegisterSelect_BIT);
     148:	a0 e4       	ldi	r26, 0x40	; 64
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e0 e4       	ldi	r30, 0x40	; 64
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	8f 77       	andi	r24, 0x7F	; 127
     154:	8c 93       	st	X, r24
		MODIFY_REG(UART_BaudRateRegH, UART_BaudRateRegH_MSK, (BaudCalc(BaudRate)>>8)&0x0F);
     156:	a0 e4       	ldi	r26, 0x40	; 64
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	e0 e4       	ldi	r30, 0x40	; 64
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 7f       	andi	r24, 0xF0	; 240
     162:	8c 93       	st	X, r24
		WRITE_REG(UART_BaudRateRegL,BaudCalc(BaudRate)&0xFF);
     164:	e9 e2       	ldi	r30, 0x29	; 41
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	87 e6       	ldi	r24, 0x67	; 103
     16a:	80 83       	st	Z, r24

		/* Enabling receiving and transmitting*/
		MODIFY_REG(UART_ControlStatusRegB, UART_ReceiveEnable_MSK,
     16c:	aa e2       	ldi	r26, 0x2A	; 42
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ea e2       	ldi	r30, 0x2A	; 42
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	80 61       	ori	r24, 0x10	; 16
     178:	8c 93       	st	X, r24
				UART_ReceiveEnable_MSK);
		MODIFY_REG(UART_ControlStatusRegB, UART_TransmissionEnable_MSK,
     17a:	aa e2       	ldi	r26, 0x2A	; 42
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	ea e2       	ldi	r30, 0x2A	; 42
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	88 60       	ori	r24, 0x08	; 8
     186:	8c 93       	st	X, r24
				UART_TransmissionEnable_MSK);
		ErrRetVal = OperationSuccess;
     188:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrRetVal;
     18a:	89 81       	ldd	r24, Y+1	; 0x01
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	cf 91       	pop	r28
     192:	df 91       	pop	r29
     194:	08 95       	ret

00000196 <UART_FlushReceiveBuffer>:
uint8_t UART_FlushReceiveBuffer(void) {
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	00 d0       	rcall	.+0      	; 0x19c <UART_FlushReceiveBuffer+0x6>
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flushedCharacter;
	flushedCharacter = UART_DataReg;
     1a4:	ec e2       	ldi	r30, 0x2C	; 44
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = OperationSuccess;
     1ac:	1a 82       	std	Y+2, r1	; 0x02
	return ErrRetVal;
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	cf 91       	pop	r28
     1b6:	df 91       	pop	r29
     1b8:	08 95       	ret

000001ba <UART_TransmitChar>:

uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
     1ba:	df 93       	push	r29
     1bc:	cf 93       	push	r28
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <UART_TransmitChar+0x6>
     1c0:	0f 92       	push	r0
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	8a 83       	std	Y+2, r24	; 0x02
     1c8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     1ca:	8f ef       	ldi	r24, 0xFF	; 255
     1cc:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA, 5)) {
     1ce:	eb e2       	ldi	r30, 0x2B	; 43
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	88 2f       	mov	r24, r24
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	80 72       	andi	r24, 0x20	; 32
     1da:	90 70       	andi	r25, 0x00	; 0
     1dc:	95 95       	asr	r25
     1de:	87 95       	ror	r24
     1e0:	95 95       	asr	r25
     1e2:	87 95       	ror	r24
     1e4:	95 95       	asr	r25
     1e6:	87 95       	ror	r24
     1e8:	95 95       	asr	r25
     1ea:	87 95       	ror	r24
     1ec:	95 95       	asr	r25
     1ee:	87 95       	ror	r24
     1f0:	00 97       	sbiw	r24, 0x00	; 0
     1f2:	31 f0       	breq	.+12     	; 0x200 <UART_TransmitChar+0x46>
		UART_DataReg= TxChar;
     1f4:	ec e2       	ldi	r30, 0x2C	; 44
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	8b 81       	ldd	r24, Y+3	; 0x03
     1fa:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     1fc:	19 82       	std	Y+1, r1	; 0x01
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <UART_TransmitChar+0x4a>
	}
	else
	{
		ErrRetVal = Transmission_Fail;
     200:	83 e0       	ldi	r24, 0x03	; 3
     202:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     204:	89 81       	ldd	r24, Y+1	; 0x01
}
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
     20c:	cf 91       	pop	r28
     20e:	df 91       	pop	r29
     210:	08 95       	ret

00000212 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     212:	df 93       	push	r29
     214:	cf 93       	push	r28
     216:	00 d0       	rcall	.+0      	; 0x218 <UART_ReceiveChar+0x6>
     218:	00 d0       	rcall	.+0      	; 0x21a <UART_ReceiveChar+0x8>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	8a 83       	std	Y+2, r24	; 0x02
     220:	7c 83       	std	Y+4, r23	; 0x04
     222:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     224:	8f ef       	ldi	r24, 0xFF	; 255
     226:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA,7) == 1) {
     228:	eb e2       	ldi	r30, 0x2B	; 43
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	88 1f       	adc	r24, r24
     230:	88 27       	eor	r24, r24
     232:	88 1f       	adc	r24, r24
     234:	88 2f       	mov	r24, r24
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	90 70       	andi	r25, 0x00	; 0
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	91 05       	cpc	r25, r1
     23e:	79 f4       	brne	.+30     	; 0x25e <UART_ReceiveChar+0x4c>
		*RxChar = UART_DataReg;
     240:	ec e2       	ldi	r30, 0x2C	; 44
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	eb 81       	ldd	r30, Y+3	; 0x03
     248:	fc 81       	ldd	r31, Y+4	; 0x04
     24a:	80 83       	st	Z, r24
		DIO_SetPortVal(PORTA, *RxChar);
     24c:	eb 81       	ldd	r30, Y+3	; 0x03
     24e:	fc 81       	ldd	r31, Y+4	; 0x04
     250:	90 81       	ld	r25, Z
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	69 2f       	mov	r22, r25
     256:	0e 94 89 03 	call	0x712	; 0x712 <DIO_SetPortVal>
		ErrRetVal = OperationSuccess;
     25a:	19 82       	std	Y+1, r1	; 0x01
     25c:	02 c0       	rjmp	.+4      	; 0x262 <UART_ReceiveChar+0x50>
	}
	else
	{
		ErrRetVal = Receiving_Fail;
     25e:	84 e0       	ldi	r24, 0x04	; 4
     260:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     262:	89 81       	ldd	r24, Y+1	; 0x01
}
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	cf 91       	pop	r28
     26e:	df 91       	pop	r29
     270:	08 95       	ret

00000272 <UART_TransmitString>:

uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString)
{
     272:	df 93       	push	r29
     274:	cf 93       	push	r28
     276:	00 d0       	rcall	.+0      	; 0x278 <UART_TransmitString+0x6>
     278:	00 d0       	rcall	.+0      	; 0x27a <UART_TransmitString+0x8>
     27a:	0f 92       	push	r0
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	8b 83       	std	Y+3, r24	; 0x03
     282:	7d 83       	std	Y+5, r23	; 0x05
     284:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     28a:	19 82       	std	Y+1, r1	; 0x01
	while(iterator <= 255)
	{
		if(*TxString=='\0')
     28c:	ec 81       	ldd	r30, Y+4	; 0x04
     28e:	fd 81       	ldd	r31, Y+5	; 0x05
     290:	80 81       	ld	r24, Z
     292:	88 23       	and	r24, r24
     294:	81 f4       	brne	.+32     	; 0x2b6 <UART_TransmitString+0x44>
		{
			ErrRetVal=OperationSuccess;
     296:	1a 82       	std	Y+2, r1	; 0x02
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
     298:	8b 81       	ldd	r24, Y+3	; 0x03
     29a:	6d e0       	ldi	r22, 0x0D	; 13
     29c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <UART_TransmitChar>
     2a0:	88 23       	and	r24, r24
     2a2:	d1 f7       	brne	.-12     	; 0x298 <UART_TransmitString+0x26>
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
			iterator++;
			TxString++;
		}
	}
	return ErrRetVal;
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
			break;
		}
		else
		{
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
     2b6:	ec 81       	ldd	r30, Y+4	; 0x04
     2b8:	fd 81       	ldd	r31, Y+5	; 0x05
     2ba:	90 81       	ld	r25, Z
     2bc:	8b 81       	ldd	r24, Y+3	; 0x03
     2be:	69 2f       	mov	r22, r25
     2c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <UART_TransmitChar>
     2c4:	88 23       	and	r24, r24
     2c6:	b9 f7       	brne	.-18     	; 0x2b6 <UART_TransmitString+0x44>
			iterator++;
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
     2ce:	8c 81       	ldd	r24, Y+4	; 0x04
     2d0:	9d 81       	ldd	r25, Y+5	; 0x05
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	9d 83       	std	Y+5, r25	; 0x05
     2d6:	8c 83       	std	Y+4, r24	; 0x04
     2d8:	d9 cf       	rjmp	.-78     	; 0x28c <UART_TransmitString+0x1a>

000002da <UART_ReceiveString>:
		}
	}
	return ErrRetVal;
}
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     2da:	df 93       	push	r29
     2dc:	cf 93       	push	r28
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <UART_ReceiveString+0x6>
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <UART_ReceiveString+0x8>
     2e2:	0f 92       	push	r0
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	8b 83       	std	Y+3, r24	; 0x03
     2ea:	7d 83       	std	Y+5, r23	; 0x05
     2ec:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     2f2:	19 82       	std	Y+1, r1	; 0x01
	while(iterator<=255)
	{
		if(UART_ReceiveChar(UartNumber,RxString)==OperationSuccess)
     2f4:	2c 81       	ldd	r18, Y+4	; 0x04
     2f6:	3d 81       	ldd	r19, Y+5	; 0x05
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	b9 01       	movw	r22, r18
     2fc:	0e 94 09 01 	call	0x212	; 0x212 <UART_ReceiveChar>
     300:	88 23       	and	r24, r24
     302:	c1 f7       	brne	.-16     	; 0x2f4 <UART_ReceiveString+0x1a>
		{
			if(*RxString == '\r' || *RxString == '\n')
     304:	ec 81       	ldd	r30, Y+4	; 0x04
     306:	fd 81       	ldd	r31, Y+5	; 0x05
     308:	80 81       	ld	r24, Z
     30a:	8d 30       	cpi	r24, 0x0D	; 13
     30c:	29 f0       	breq	.+10     	; 0x318 <UART_ReceiveString+0x3e>
     30e:	ec 81       	ldd	r30, Y+4	; 0x04
     310:	fd 81       	ldd	r31, Y+5	; 0x05
     312:	80 81       	ld	r24, Z
     314:	8a 30       	cpi	r24, 0x0A	; 10
     316:	69 f4       	brne	.+26     	; 0x332 <UART_ReceiveString+0x58>
			{
				*RxString='\0';
     318:	ec 81       	ldd	r30, Y+4	; 0x04
     31a:	fd 81       	ldd	r31, Y+5	; 0x05
     31c:	10 82       	st	Z, r1
				ErrRetVal = OperationSuccess;
     31e:	1a 82       	std	Y+2, r1	; 0x02
		else
		{
			continue;
		}
	}
	return ErrRetVal;
     320:	8a 81       	ldd	r24, Y+2	; 0x02
}
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	cf 91       	pop	r28
     32e:	df 91       	pop	r29
     330:	08 95       	ret
				ErrRetVal = OperationSuccess;
				break;
			}
			else
			{
			RxString++;
     332:	8c 81       	ldd	r24, Y+4	; 0x04
     334:	9d 81       	ldd	r25, Y+5	; 0x05
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	9d 83       	std	Y+5, r25	; 0x05
     33a:	8c 83       	std	Y+4, r24	; 0x04
			iterator++;
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	8f 5f       	subi	r24, 0xFF	; 255
     340:	89 83       	std	Y+1, r24	; 0x01
     342:	d8 cf       	rjmp	.-80     	; 0x2f4 <UART_ReceiveString+0x1a>

00000344 <UART_EnableInterrupt>:
		}
	}
	return ErrRetVal;
}

uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	00 d0       	rcall	.+0      	; 0x34a <UART_EnableInterrupt+0x6>
     34a:	00 d0       	rcall	.+0      	; 0x34c <UART_EnableInterrupt+0x8>
     34c:	0f 92       	push	r0
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	8a 83       	std	Y+2, r24	; 0x02
     354:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
     35a:	af e5       	ldi	r26, 0x5F	; 95
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	ef e5       	ldi	r30, 0x5F	; 95
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	80 68       	ori	r24, 0x80	; 128
     366:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     368:	8b 81       	ldd	r24, Y+3	; 0x03
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	88 f5       	brcc	.+98     	; 0x3d0 <UART_EnableInterrupt+0x8c>
	{
		switch (UartInterruptType)
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	28 2f       	mov	r18, r24
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	3d 83       	std	Y+5, r19	; 0x05
     376:	2c 83       	std	Y+4, r18	; 0x04
     378:	8c 81       	ldd	r24, Y+4	; 0x04
     37a:	9d 81       	ldd	r25, Y+5	; 0x05
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	91 05       	cpc	r25, r1
     380:	91 f0       	breq	.+36     	; 0x3a6 <UART_EnableInterrupt+0x62>
     382:	2c 81       	ldd	r18, Y+4	; 0x04
     384:	3d 81       	ldd	r19, Y+5	; 0x05
     386:	22 30       	cpi	r18, 0x02	; 2
     388:	31 05       	cpc	r19, r1
     38a:	b1 f0       	breq	.+44     	; 0x3b8 <UART_EnableInterrupt+0x74>
     38c:	8c 81       	ldd	r24, Y+4	; 0x04
     38e:	9d 81       	ldd	r25, Y+5	; 0x05
     390:	00 97       	sbiw	r24, 0x00	; 0
     392:	d9 f4       	brne	.+54     	; 0x3ca <UART_EnableInterrupt+0x86>
		{
		case RxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     394:	aa e2       	ldi	r26, 0x2A	; 42
     396:	b0 e0       	ldi	r27, 0x00	; 0
     398:	ea e2       	ldi	r30, 0x2A	; 42
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	80 68       	ori	r24, 0x80	; 128
     3a0:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_MSK,
					UART_ReceiveCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     3a2:	19 82       	std	Y+1, r1	; 0x01
     3a4:	17 c0       	rjmp	.+46     	; 0x3d4 <UART_EnableInterrupt+0x90>
			break;
		case DataBufferEmptyInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     3a6:	aa e2       	ldi	r26, 0x2A	; 42
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	ea e2       	ldi	r30, 0x2A	; 42
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	80 62       	ori	r24, 0x20	; 32
     3b2:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_MSK,
					UART_DataRegisterEmptyInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     3b4:	19 82       	std	Y+1, r1	; 0x01
     3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <UART_EnableInterrupt+0x90>
			break;
		case TxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     3b8:	aa e2       	ldi	r26, 0x2A	; 42
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	ea e2       	ldi	r30, 0x2A	; 42
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	80 64       	ori	r24, 0x40	; 64
     3c4:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_MSK,
					UART_TransmissionCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     3c6:	19 82       	std	Y+1, r1	; 0x01
     3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <UART_EnableInterrupt+0x90>
			break;
		default:
			ErrRetVal = Interrupt_Enabling_Fail;
     3ca:	89 e0       	ldi	r24, 0x09	; 9
     3cc:	89 83       	std	Y+1, r24	; 0x01
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <UART_EnableInterrupt+0x90>
		}
	}
	else
	{
		ErrRetVal = Interrupt_Enabling_Fail;
     3d0:	89 e0       	ldi	r24, 0x09	; 9
     3d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	08 95       	ret

000003e6 <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     3e6:	df 93       	push	r29
     3e8:	cf 93       	push	r28
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <UART_DisableInterrupt+0x6>
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <UART_DisableInterrupt+0x8>
     3ee:	0f 92       	push	r0
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	8a 83       	std	Y+2, r24	; 0x02
     3f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     3f8:	8f ef       	ldi	r24, 0xFF	; 255
     3fa:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	83 30       	cpi	r24, 0x03	; 3
     400:	88 f5       	brcc	.+98     	; 0x464 <UART_DisableInterrupt+0x7e>
		{
			switch (UartInterruptType)
     402:	8b 81       	ldd	r24, Y+3	; 0x03
     404:	28 2f       	mov	r18, r24
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	3d 83       	std	Y+5, r19	; 0x05
     40a:	2c 83       	std	Y+4, r18	; 0x04
     40c:	8c 81       	ldd	r24, Y+4	; 0x04
     40e:	9d 81       	ldd	r25, Y+5	; 0x05
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	91 05       	cpc	r25, r1
     414:	91 f0       	breq	.+36     	; 0x43a <UART_DisableInterrupt+0x54>
     416:	2c 81       	ldd	r18, Y+4	; 0x04
     418:	3d 81       	ldd	r19, Y+5	; 0x05
     41a:	22 30       	cpi	r18, 0x02	; 2
     41c:	31 05       	cpc	r19, r1
     41e:	b1 f0       	breq	.+44     	; 0x44c <UART_DisableInterrupt+0x66>
     420:	8c 81       	ldd	r24, Y+4	; 0x04
     422:	9d 81       	ldd	r25, Y+5	; 0x05
     424:	00 97       	sbiw	r24, 0x00	; 0
     426:	d9 f4       	brne	.+54     	; 0x45e <UART_DisableInterrupt+0x78>
			{
			case RxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     428:	aa e2       	ldi	r26, 0x2A	; 42
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	ea e2       	ldi	r30, 0x2A	; 42
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	8f 77       	andi	r24, 0x7F	; 127
     434:	8c 93       	st	X, r24
						UART_ReceiveCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     436:	19 82       	std	Y+1, r1	; 0x01
     438:	17 c0       	rjmp	.+46     	; 0x468 <UART_DisableInterrupt+0x82>
				break;
			case DataBufferEmptyInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     43a:	aa e2       	ldi	r26, 0x2A	; 42
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	ea e2       	ldi	r30, 0x2A	; 42
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	8f 7d       	andi	r24, 0xDF	; 223
     446:	8c 93       	st	X, r24
						UART_DataRegisterEmptyInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     448:	19 82       	std	Y+1, r1	; 0x01
     44a:	0e c0       	rjmp	.+28     	; 0x468 <UART_DisableInterrupt+0x82>
				break;
			case TxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     44c:	aa e2       	ldi	r26, 0x2A	; 42
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	ea e2       	ldi	r30, 0x2A	; 42
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	8f 7b       	andi	r24, 0xBF	; 191
     458:	8c 93       	st	X, r24
						UART_TransmissionCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     45a:	19 82       	std	Y+1, r1	; 0x01
     45c:	05 c0       	rjmp	.+10     	; 0x468 <UART_DisableInterrupt+0x82>
				break;
			default:
				ErrRetVal = Interrupt_Disabling_Fail;
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	89 83       	std	Y+1, r24	; 0x01
     462:	02 c0       	rjmp	.+4      	; 0x468 <UART_DisableInterrupt+0x82>
			}
		}
		else
		{
			ErrRetVal = Interrupt_Disabling_Fail;
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	89 83       	std	Y+1, r24	; 0x01
		}
	return ErrRetVal;
     468:	89 81       	ldd	r24, Y+1	; 0x01
}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	cf 91       	pop	r28
     476:	df 91       	pop	r29
     478:	08 95       	ret

0000047a <UART_Set_RX_CompleteCallback>:
uint8_t UART_Set_RX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	00 d0       	rcall	.+0      	; 0x480 <UART_Set_RX_CompleteCallback+0x6>
     480:	00 d0       	rcall	.+0      	; 0x482 <UART_Set_RX_CompleteCallback+0x8>
     482:	0f 92       	push	r0
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	8a 83       	std	Y+2, r24	; 0x02
     48a:	6b 83       	std	Y+3, r22	; 0x03
     48c:	5d 83       	std	Y+5, r21	; 0x05
     48e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     490:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     492:	8c 81       	ldd	r24, Y+4	; 0x04
     494:	9d 81       	ldd	r25, Y+5	; 0x05
     496:	00 97       	sbiw	r24, 0x00	; 0
     498:	31 f0       	breq	.+12     	; 0x4a6 <UART_Set_RX_CompleteCallback+0x2c>
		UART_RX_Complete_callback = callBack;
     49a:	8c 81       	ldd	r24, Y+4	; 0x04
     49c:	9d 81       	ldd	r25, Y+5	; 0x05
     49e:	90 93 61 01 	sts	0x0161, r25
     4a2:	80 93 60 01 	sts	0x0160, r24
	return ErrRetVal;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
}
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	cf 91       	pop	r28
     4b4:	df 91       	pop	r29
     4b6:	08 95       	ret

000004b8 <UART_UDRE_Empty_CompleteCallback>:
uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	00 d0       	rcall	.+0      	; 0x4be <UART_UDRE_Empty_CompleteCallback+0x6>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <UART_UDRE_Empty_CompleteCallback+0x8>
     4c0:	0f 92       	push	r0
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	8a 83       	std	Y+2, r24	; 0x02
     4c8:	6b 83       	std	Y+3, r22	; 0x03
     4ca:	5d 83       	std	Y+5, r21	; 0x05
     4cc:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4ce:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4d0:	8c 81       	ldd	r24, Y+4	; 0x04
     4d2:	9d 81       	ldd	r25, Y+5	; 0x05
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	31 f0       	breq	.+12     	; 0x4e4 <UART_UDRE_Empty_CompleteCallback+0x2c>
		UART_UDRE_Empty_callback = callBack;
     4d8:	8c 81       	ldd	r24, Y+4	; 0x04
     4da:	9d 81       	ldd	r25, Y+5	; 0x05
     4dc:	90 93 63 01 	sts	0x0163, r25
     4e0:	80 93 62 01 	sts	0x0162, r24
	return ErrRetVal;
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
}
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <UART_Set_TX_CompleteCallback>:
uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <UART_Set_TX_CompleteCallback+0x6>
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <UART_Set_TX_CompleteCallback+0x8>
     4fe:	0f 92       	push	r0
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	8a 83       	std	Y+2, r24	; 0x02
     506:	6b 83       	std	Y+3, r22	; 0x03
     508:	5d 83       	std	Y+5, r21	; 0x05
     50a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     50c:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     50e:	8c 81       	ldd	r24, Y+4	; 0x04
     510:	9d 81       	ldd	r25, Y+5	; 0x05
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	31 f0       	breq	.+12     	; 0x522 <UART_Set_TX_CompleteCallback+0x2c>
		UART_TX_Complete_callback = callBack;
     516:	8c 81       	ldd	r24, Y+4	; 0x04
     518:	9d 81       	ldd	r25, Y+5	; 0x05
     51a:	90 93 65 01 	sts	0x0165, r25
     51e:	80 93 64 01 	sts	0x0164, r24
	return ErrRetVal;
     522:	89 81       	ldd	r24, Y+1	; 0x01
}
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	cf 91       	pop	r28
     530:	df 91       	pop	r29
     532:	08 95       	ret

00000534 <__vector_13>:
void __vector_13(void)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	2f 93       	push	r18
     540:	3f 93       	push	r19
     542:	4f 93       	push	r20
     544:	5f 93       	push	r21
     546:	6f 93       	push	r22
     548:	7f 93       	push	r23
     54a:	8f 93       	push	r24
     54c:	9f 93       	push	r25
     54e:	af 93       	push	r26
     550:	bf 93       	push	r27
     552:	ef 93       	push	r30
     554:	ff 93       	push	r31
     556:	df 93       	push	r29
     558:	cf 93       	push	r28
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Complete_callback != NULL)
     55e:	80 91 60 01 	lds	r24, 0x0160
     562:	90 91 61 01 	lds	r25, 0x0161
     566:	00 97       	sbiw	r24, 0x00	; 0
     568:	29 f0       	breq	.+10     	; 0x574 <__vector_13+0x40>
		UART_RX_Complete_callback();
     56a:	e0 91 60 01 	lds	r30, 0x0160
     56e:	f0 91 61 01 	lds	r31, 0x0161
     572:	09 95       	icall
}
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	bf 91       	pop	r27
     57e:	af 91       	pop	r26
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	7f 91       	pop	r23
     586:	6f 91       	pop	r22
     588:	5f 91       	pop	r21
     58a:	4f 91       	pop	r20
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <__vector_14>:
void __vector_14(void)
{
     59a:	1f 92       	push	r1
     59c:	0f 92       	push	r0
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	0f 92       	push	r0
     5a2:	11 24       	eor	r1, r1
     5a4:	2f 93       	push	r18
     5a6:	3f 93       	push	r19
     5a8:	4f 93       	push	r20
     5aa:	5f 93       	push	r21
     5ac:	6f 93       	push	r22
     5ae:	7f 93       	push	r23
     5b0:	8f 93       	push	r24
     5b2:	9f 93       	push	r25
     5b4:	af 93       	push	r26
     5b6:	bf 93       	push	r27
     5b8:	ef 93       	push	r30
     5ba:	ff 93       	push	r31
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
	if (UART_UDRE_Empty_callback != NULL)
     5c4:	80 91 62 01 	lds	r24, 0x0162
     5c8:	90 91 63 01 	lds	r25, 0x0163
     5cc:	00 97       	sbiw	r24, 0x00	; 0
     5ce:	29 f0       	breq	.+10     	; 0x5da <__vector_14+0x40>
		UART_UDRE_Empty_callback();
     5d0:	e0 91 62 01 	lds	r30, 0x0162
     5d4:	f0 91 63 01 	lds	r31, 0x0163
     5d8:	09 95       	icall
}
     5da:	cf 91       	pop	r28
     5dc:	df 91       	pop	r29
     5de:	ff 91       	pop	r31
     5e0:	ef 91       	pop	r30
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	7f 91       	pop	r23
     5ec:	6f 91       	pop	r22
     5ee:	5f 91       	pop	r21
     5f0:	4f 91       	pop	r20
     5f2:	3f 91       	pop	r19
     5f4:	2f 91       	pop	r18
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_15>:
void __vector_15(void)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	4f 93       	push	r20
     610:	5f 93       	push	r21
     612:	6f 93       	push	r22
     614:	7f 93       	push	r23
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
     61e:	ef 93       	push	r30
     620:	ff 93       	push	r31
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Complete_callback != NULL)
     62a:	80 91 64 01 	lds	r24, 0x0164
     62e:	90 91 65 01 	lds	r25, 0x0165
     632:	00 97       	sbiw	r24, 0x00	; 0
     634:	29 f0       	breq	.+10     	; 0x640 <__vector_15+0x40>
		UART_TX_Complete_callback();
     636:	e0 91 64 01 	lds	r30, 0x0164
     63a:	f0 91 65 01 	lds	r31, 0x0165
     63e:	09 95       	icall
}
     640:	cf 91       	pop	r28
     642:	df 91       	pop	r29
     644:	ff 91       	pop	r31
     646:	ef 91       	pop	r30
     648:	bf 91       	pop	r27
     64a:	af 91       	pop	r26
     64c:	9f 91       	pop	r25
     64e:	8f 91       	pop	r24
     650:	7f 91       	pop	r23
     652:	6f 91       	pop	r22
     654:	5f 91       	pop	r21
     656:	4f 91       	pop	r20
     658:	3f 91       	pop	r19
     65a:	2f 91       	pop	r18
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	1f 90       	pop	r1
     664:	18 95       	reti

00000666 <DIO_PortInit>:
#include "../DIO/DIO_DRIVER_TypeDef.h"
#include "../DIO/DIO_DRIVER.h"
#include "../DIO/DIO_DRIVER_Priv.h"

DIO_ERROR_RETVAL_t DIO_PortInit(DIO_PORT_ID_t DIO_port,
		DIO_DIRECTION_t DIO_direction) {
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	00 d0       	rcall	.+0      	; 0x66c <DIO_PortInit+0x6>
     66c:	00 d0       	rcall	.+0      	; 0x66e <DIO_PortInit+0x8>
     66e:	0f 92       	push	r0
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	8a 83       	std	Y+2, r24	; 0x02
     676:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     678:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD)
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	85 30       	cpi	r24, 0x05	; 5
     67e:	08 f0       	brcs	.+2      	; 0x682 <DIO_PortInit+0x1c>
     680:	3d c0       	rjmp	.+122    	; 0x6fc <DIO_PortInit+0x96>
     682:	8b 81       	ldd	r24, Y+3	; 0x03
     684:	88 23       	and	r24, r24
     686:	19 f0       	breq	.+6      	; 0x68e <DIO_PortInit+0x28>
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	8f 3f       	cpi	r24, 0xFF	; 255
     68c:	b9 f5       	brne	.+110    	; 0x6fc <DIO_PortInit+0x96>
			&& (DIO_direction == PORT_INPUT || DIO_direction == PORT_OUTPUT)) {
		switch (DIO_port) {
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	28 2f       	mov	r18, r24
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	3d 83       	std	Y+5, r19	; 0x05
     696:	2c 83       	std	Y+4, r18	; 0x04
     698:	8c 81       	ldd	r24, Y+4	; 0x04
     69a:	9d 81       	ldd	r25, Y+5	; 0x05
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	91 05       	cpc	r25, r1
     6a0:	d9 f0       	breq	.+54     	; 0x6d8 <DIO_PortInit+0x72>
     6a2:	2c 81       	ldd	r18, Y+4	; 0x04
     6a4:	3d 81       	ldd	r19, Y+5	; 0x05
     6a6:	23 30       	cpi	r18, 0x03	; 3
     6a8:	31 05       	cpc	r19, r1
     6aa:	34 f4       	brge	.+12     	; 0x6b8 <DIO_PortInit+0x52>
     6ac:	8c 81       	ldd	r24, Y+4	; 0x04
     6ae:	9d 81       	ldd	r25, Y+5	; 0x05
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	91 05       	cpc	r25, r1
     6b4:	61 f0       	breq	.+24     	; 0x6ce <DIO_PortInit+0x68>
     6b6:	1f c0       	rjmp	.+62     	; 0x6f6 <DIO_PortInit+0x90>
     6b8:	2c 81       	ldd	r18, Y+4	; 0x04
     6ba:	3d 81       	ldd	r19, Y+5	; 0x05
     6bc:	23 30       	cpi	r18, 0x03	; 3
     6be:	31 05       	cpc	r19, r1
     6c0:	81 f0       	breq	.+32     	; 0x6e2 <DIO_PortInit+0x7c>
     6c2:	8c 81       	ldd	r24, Y+4	; 0x04
     6c4:	9d 81       	ldd	r25, Y+5	; 0x05
     6c6:	84 30       	cpi	r24, 0x04	; 4
     6c8:	91 05       	cpc	r25, r1
     6ca:	81 f0       	breq	.+32     	; 0x6ec <DIO_PortInit+0x86>
     6cc:	14 c0       	rjmp	.+40     	; 0x6f6 <DIO_PortInit+0x90>
		case PORTA:
			WRITE_REG(DDRA_Register, DIO_direction);
     6ce:	ea e3       	ldi	r30, 0x3A	; 58
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	80 83       	st	Z, r24
     6d6:	14 c0       	rjmp	.+40     	; 0x700 <DIO_PortInit+0x9a>
			break;
		case PORTB:
			WRITE_REG(DDRB_Register, DIO_direction);
     6d8:	e7 e3       	ldi	r30, 0x37	; 55
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	80 83       	st	Z, r24
     6e0:	0f c0       	rjmp	.+30     	; 0x700 <DIO_PortInit+0x9a>
			break;
		case PORTC:
			WRITE_REG(DDRC_Register, DIO_direction);
     6e2:	e4 e3       	ldi	r30, 0x34	; 52
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	8b 81       	ldd	r24, Y+3	; 0x03
     6e8:	80 83       	st	Z, r24
     6ea:	0a c0       	rjmp	.+20     	; 0x700 <DIO_PortInit+0x9a>
			break;
		case PORTD:
			WRITE_REG(DDRD_Register, DIO_direction);
     6ec:	e1 e3       	ldi	r30, 0x31	; 49
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	80 83       	st	Z, r24
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <DIO_PortInit+0x9a>
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_PortInit+0x9a>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     700:	89 81       	ldd	r24, Y+1	; 0x01
}
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	08 95       	ret

00000712 <DIO_SetPortVal>:
DIO_ERROR_RETVAL_t DIO_SetPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	00 d0       	rcall	.+0      	; 0x718 <DIO_SetPortVal+0x6>
     718:	00 d0       	rcall	.+0      	; 0x71a <DIO_SetPortVal+0x8>
     71a:	0f 92       	push	r0
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	8a 83       	std	Y+2, r24	; 0x02
     722:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     724:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	85 30       	cpi	r24, 0x05	; 5
     72a:	08 f0       	brcs	.+2      	; 0x72e <DIO_SetPortVal+0x1c>
     72c:	57 c0       	rjmp	.+174    	; 0x7dc <DIO_SetPortVal+0xca>
		switch (DIO_port) {
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	28 2f       	mov	r18, r24
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	3d 83       	std	Y+5, r19	; 0x05
     736:	2c 83       	std	Y+4, r18	; 0x04
     738:	8c 81       	ldd	r24, Y+4	; 0x04
     73a:	9d 81       	ldd	r25, Y+5	; 0x05
     73c:	82 30       	cpi	r24, 0x02	; 2
     73e:	91 05       	cpc	r25, r1
     740:	19 f1       	breq	.+70     	; 0x788 <DIO_SetPortVal+0x76>
     742:	2c 81       	ldd	r18, Y+4	; 0x04
     744:	3d 81       	ldd	r19, Y+5	; 0x05
     746:	23 30       	cpi	r18, 0x03	; 3
     748:	31 05       	cpc	r19, r1
     74a:	34 f4       	brge	.+12     	; 0x758 <DIO_SetPortVal+0x46>
     74c:	8c 81       	ldd	r24, Y+4	; 0x04
     74e:	9d 81       	ldd	r25, Y+5	; 0x05
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	91 05       	cpc	r25, r1
     754:	61 f0       	breq	.+24     	; 0x76e <DIO_SetPortVal+0x5c>
     756:	3f c0       	rjmp	.+126    	; 0x7d6 <DIO_SetPortVal+0xc4>
     758:	2c 81       	ldd	r18, Y+4	; 0x04
     75a:	3d 81       	ldd	r19, Y+5	; 0x05
     75c:	23 30       	cpi	r18, 0x03	; 3
     75e:	31 05       	cpc	r19, r1
     760:	01 f1       	breq	.+64     	; 0x7a2 <DIO_SetPortVal+0x90>
     762:	8c 81       	ldd	r24, Y+4	; 0x04
     764:	9d 81       	ldd	r25, Y+5	; 0x05
     766:	84 30       	cpi	r24, 0x04	; 4
     768:	91 05       	cpc	r25, r1
     76a:	41 f1       	breq	.+80     	; 0x7bc <DIO_SetPortVal+0xaa>
     76c:	34 c0       	rjmp	.+104    	; 0x7d6 <DIO_SetPortVal+0xc4>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, value);
     76e:	ab e3       	ldi	r26, 0x3B	; 59
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	eb e3       	ldi	r30, 0x3B	; 59
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	98 2f       	mov	r25, r24
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	80 95       	com	r24
     77e:	98 23       	and	r25, r24
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	89 2b       	or	r24, r25
     784:	8c 93       	st	X, r24
     786:	2c c0       	rjmp	.+88     	; 0x7e0 <DIO_SetPortVal+0xce>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, value);
     788:	a8 e3       	ldi	r26, 0x38	; 56
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	e8 e3       	ldi	r30, 0x38	; 56
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	98 2f       	mov	r25, r24
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	80 95       	com	r24
     798:	98 23       	and	r25, r24
     79a:	8b 81       	ldd	r24, Y+3	; 0x03
     79c:	89 2b       	or	r24, r25
     79e:	8c 93       	st	X, r24
     7a0:	1f c0       	rjmp	.+62     	; 0x7e0 <DIO_SetPortVal+0xce>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, value);
     7a2:	a5 e3       	ldi	r26, 0x35	; 53
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e5 e3       	ldi	r30, 0x35	; 53
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	98 2f       	mov	r25, r24
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	80 95       	com	r24
     7b2:	98 23       	and	r25, r24
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	89 2b       	or	r24, r25
     7b8:	8c 93       	st	X, r24
     7ba:	12 c0       	rjmp	.+36     	; 0x7e0 <DIO_SetPortVal+0xce>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, value);
     7bc:	a2 e3       	ldi	r26, 0x32	; 50
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	e2 e3       	ldi	r30, 0x32	; 50
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	98 2f       	mov	r25, r24
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	80 95       	com	r24
     7cc:	98 23       	and	r25, r24
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	89 2b       	or	r24, r25
     7d2:	8c 93       	st	X, r24
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <DIO_SetPortVal+0xce>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_SetPortVal+0xce>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <DIO_ClrPortVal>:
DIO_ERROR_RETVAL_t DIO_ClrPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	29 97       	sbiw	r28, 0x09	; 9
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	8a 83       	std	Y+2, r24	; 0x02
     808:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     80a:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	85 30       	cpi	r24, 0x05	; 5
     810:	08 f0       	brcs	.+2      	; 0x814 <DIO_ClrPortVal+0x22>
     812:	53 c0       	rjmp	.+166    	; 0x8ba <__stack+0x5b>
		switch (DIO_port) {
     814:	8a 81       	ldd	r24, Y+2	; 0x02
     816:	28 2f       	mov	r18, r24
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	39 87       	std	Y+9, r19	; 0x09
     81c:	28 87       	std	Y+8, r18	; 0x08
     81e:	88 85       	ldd	r24, Y+8	; 0x08
     820:	99 85       	ldd	r25, Y+9	; 0x09
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	91 05       	cpc	r25, r1
     826:	11 f1       	breq	.+68     	; 0x86c <__stack+0xd>
     828:	28 85       	ldd	r18, Y+8	; 0x08
     82a:	39 85       	ldd	r19, Y+9	; 0x09
     82c:	23 30       	cpi	r18, 0x03	; 3
     82e:	31 05       	cpc	r19, r1
     830:	34 f4       	brge	.+12     	; 0x83e <DIO_ClrPortVal+0x4c>
     832:	88 85       	ldd	r24, Y+8	; 0x08
     834:	99 85       	ldd	r25, Y+9	; 0x09
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	91 05       	cpc	r25, r1
     83a:	61 f0       	breq	.+24     	; 0x854 <DIO_ClrPortVal+0x62>
     83c:	3b c0       	rjmp	.+118    	; 0x8b4 <__stack+0x55>
     83e:	28 85       	ldd	r18, Y+8	; 0x08
     840:	39 85       	ldd	r19, Y+9	; 0x09
     842:	23 30       	cpi	r18, 0x03	; 3
     844:	31 05       	cpc	r19, r1
     846:	f1 f0       	breq	.+60     	; 0x884 <__stack+0x25>
     848:	88 85       	ldd	r24, Y+8	; 0x08
     84a:	99 85       	ldd	r25, Y+9	; 0x09
     84c:	84 30       	cpi	r24, 0x04	; 4
     84e:	91 05       	cpc	r25, r1
     850:	29 f1       	breq	.+74     	; 0x89c <__stack+0x3d>
     852:	30 c0       	rjmp	.+96     	; 0x8b4 <__stack+0x55>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, ~value);
     854:	eb e3       	ldi	r30, 0x3B	; 59
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	90 81       	ld	r25, Z
     85a:	eb e3       	ldi	r30, 0x3B	; 59
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	80 95       	com	r24
     866:	90 95       	com	r25
     868:	80 83       	st	Z, r24
     86a:	29 c0       	rjmp	.+82     	; 0x8be <__stack+0x5f>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, ~value);
     86c:	e8 e3       	ldi	r30, 0x38	; 56
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	20 81       	ld	r18, Z
     872:	e8 e3       	ldi	r30, 0x38	; 56
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	88 2f       	mov	r24, r24
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	80 95       	com	r24
     87e:	90 95       	com	r25
     880:	80 83       	st	Z, r24
     882:	1d c0       	rjmp	.+58     	; 0x8be <__stack+0x5f>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, ~value);
     884:	e5 e3       	ldi	r30, 0x35	; 53
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	30 81       	ld	r19, Z
     88a:	e5 e3       	ldi	r30, 0x35	; 53
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	80 95       	com	r24
     896:	90 95       	com	r25
     898:	80 83       	st	Z, r24
     89a:	11 c0       	rjmp	.+34     	; 0x8be <__stack+0x5f>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, ~value);
     89c:	e2 e3       	ldi	r30, 0x32	; 50
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	e2 e3       	ldi	r30, 0x32	; 50
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	80 95       	com	r24
     8ae:	90 95       	com	r25
     8b0:	80 83       	st	Z, r24
     8b2:	05 c0       	rjmp	.+10     	; 0x8be <__stack+0x5f>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <__stack+0x5f>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     8be:	89 81       	ldd	r24, Y+1	; 0x01
}
     8c0:	29 96       	adiw	r28, 0x09	; 9
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	cf 91       	pop	r28
     8ce:	df 91       	pop	r29
     8d0:	08 95       	ret

000008d2 <DIO_GetPortVal>:
Byte DIO_GetPortVal(DIO_PORT_ID_t DIO_port) {
     8d2:	df 93       	push	r29
     8d4:	cf 93       	push	r28
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <DIO_GetPortVal+0x6>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <DIO_GetPortVal+0x8>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	8a 83       	std	Y+2, r24	; 0x02
	Byte RETVAL = EXIT_FAILURE;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD)) {
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	85 30       	cpi	r24, 0x05	; 5
     8e8:	b8 f5       	brcc	.+110    	; 0x958 <DIO_GetPortVal+0x86>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	3c 83       	std	Y+4, r19	; 0x04
     8f2:	2b 83       	std	Y+3, r18	; 0x03
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	82 30       	cpi	r24, 0x02	; 2
     8fa:	91 05       	cpc	r25, r1
     8fc:	d9 f0       	breq	.+54     	; 0x934 <DIO_GetPortVal+0x62>
     8fe:	2b 81       	ldd	r18, Y+3	; 0x03
     900:	3c 81       	ldd	r19, Y+4	; 0x04
     902:	23 30       	cpi	r18, 0x03	; 3
     904:	31 05       	cpc	r19, r1
     906:	34 f4       	brge	.+12     	; 0x914 <DIO_GetPortVal+0x42>
     908:	8b 81       	ldd	r24, Y+3	; 0x03
     90a:	9c 81       	ldd	r25, Y+4	; 0x04
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	91 05       	cpc	r25, r1
     910:	61 f0       	breq	.+24     	; 0x92a <DIO_GetPortVal+0x58>
     912:	1f c0       	rjmp	.+62     	; 0x952 <DIO_GetPortVal+0x80>
     914:	2b 81       	ldd	r18, Y+3	; 0x03
     916:	3c 81       	ldd	r19, Y+4	; 0x04
     918:	23 30       	cpi	r18, 0x03	; 3
     91a:	31 05       	cpc	r19, r1
     91c:	81 f0       	breq	.+32     	; 0x93e <DIO_GetPortVal+0x6c>
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	9c 81       	ldd	r25, Y+4	; 0x04
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	91 05       	cpc	r25, r1
     926:	81 f0       	breq	.+32     	; 0x948 <DIO_GetPortVal+0x76>
     928:	14 c0       	rjmp	.+40     	; 0x952 <DIO_GetPortVal+0x80>
		case PORTA:
			RETVAL = READ_REG(PINA_Register);
     92a:	e9 e3       	ldi	r30, 0x39	; 57
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	14 c0       	rjmp	.+40     	; 0x95c <DIO_GetPortVal+0x8a>
			break;
		case PORTB:
			RETVAL = READ_REG(PINB_Register);
     934:	e6 e3       	ldi	r30, 0x36	; 54
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	0f c0       	rjmp	.+30     	; 0x95c <DIO_GetPortVal+0x8a>
			break;
		case PORTC:
			RETVAL = READ_REG(PINC_Register);
     93e:	e3 e3       	ldi	r30, 0x33	; 51
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	89 83       	std	Y+1, r24	; 0x01
     946:	0a c0       	rjmp	.+20     	; 0x95c <DIO_GetPortVal+0x8a>
			break;
		case PORTD:
			RETVAL = READ_REG(PIND_Register);
     948:	e0 e3       	ldi	r30, 0x30	; 48
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	05 c0       	rjmp	.+10     	; 0x95c <DIO_GetPortVal+0x8a>
			break;
		default:
			RETVAL = EXIT_FAILURE;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	89 83       	std	Y+1, r24	; 0x01
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_GetPortVal+0x8a>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	89 83       	std	Y+1, r24	; 0x01
	}
	return RETVAL;
     95c:	89 81       	ldd	r24, Y+1	; 0x01
}
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	cf 91       	pop	r28
     968:	df 91       	pop	r29
     96a:	08 95       	ret

0000096c <DIO_TogPortVal>:
DIO_ERROR_RETVAL_t DIO_TogPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     96c:	df 93       	push	r29
     96e:	cf 93       	push	r28
     970:	00 d0       	rcall	.+0      	; 0x972 <DIO_TogPortVal+0x6>
     972:	00 d0       	rcall	.+0      	; 0x974 <DIO_TogPortVal+0x8>
     974:	0f 92       	push	r0
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	8a 83       	std	Y+2, r24	; 0x02
     97c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     97e:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     980:	8a 81       	ldd	r24, Y+2	; 0x02
     982:	85 30       	cpi	r24, 0x05	; 5
     984:	08 f0       	brcs	.+2      	; 0x988 <DIO_TogPortVal+0x1c>
     986:	67 c0       	rjmp	.+206    	; 0xa56 <DIO_TogPortVal+0xea>
		switch (DIO_port) {
     988:	8a 81       	ldd	r24, Y+2	; 0x02
     98a:	28 2f       	mov	r18, r24
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	3d 83       	std	Y+5, r19	; 0x05
     990:	2c 83       	std	Y+4, r18	; 0x04
     992:	8c 81       	ldd	r24, Y+4	; 0x04
     994:	9d 81       	ldd	r25, Y+5	; 0x05
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	91 05       	cpc	r25, r1
     99a:	39 f1       	breq	.+78     	; 0x9ea <DIO_TogPortVal+0x7e>
     99c:	2c 81       	ldd	r18, Y+4	; 0x04
     99e:	3d 81       	ldd	r19, Y+5	; 0x05
     9a0:	23 30       	cpi	r18, 0x03	; 3
     9a2:	31 05       	cpc	r19, r1
     9a4:	34 f4       	brge	.+12     	; 0x9b2 <DIO_TogPortVal+0x46>
     9a6:	8c 81       	ldd	r24, Y+4	; 0x04
     9a8:	9d 81       	ldd	r25, Y+5	; 0x05
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	91 05       	cpc	r25, r1
     9ae:	61 f0       	breq	.+24     	; 0x9c8 <DIO_TogPortVal+0x5c>
     9b0:	4f c0       	rjmp	.+158    	; 0xa50 <DIO_TogPortVal+0xe4>
     9b2:	2c 81       	ldd	r18, Y+4	; 0x04
     9b4:	3d 81       	ldd	r19, Y+5	; 0x05
     9b6:	23 30       	cpi	r18, 0x03	; 3
     9b8:	31 05       	cpc	r19, r1
     9ba:	41 f1       	breq	.+80     	; 0xa0c <DIO_TogPortVal+0xa0>
     9bc:	8c 81       	ldd	r24, Y+4	; 0x04
     9be:	9d 81       	ldd	r25, Y+5	; 0x05
     9c0:	84 30       	cpi	r24, 0x04	; 4
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 f1       	breq	.+104    	; 0xa2e <DIO_TogPortVal+0xc2>
     9c6:	44 c0       	rjmp	.+136    	; 0xa50 <DIO_TogPortVal+0xe4>
		case PORTA:
			if (READ_REG(DDRA_Register) == PORT_OUTPUT) {
     9c8:	ea e3       	ldi	r30, 0x3A	; 58
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	8f 3f       	cpi	r24, 0xFF	; 255
     9d0:	49 f4       	brne	.+18     	; 0x9e4 <DIO_TogPortVal+0x78>
				TOG_REG(PORTA_Register, value);
     9d2:	ab e3       	ldi	r26, 0x3B	; 59
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	eb e3       	ldi	r30, 0x3B	; 59
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	90 81       	ld	r25, Z
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	89 27       	eor	r24, r25
     9e0:	8c 93       	st	X, r24
     9e2:	3b c0       	rjmp	.+118    	; 0xa5a <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	38 c0       	rjmp	.+112    	; 0xa5a <DIO_TogPortVal+0xee>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PORT_OUTPUT) {
     9ea:	e7 e3       	ldi	r30, 0x37	; 55
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	8f 3f       	cpi	r24, 0xFF	; 255
     9f2:	49 f4       	brne	.+18     	; 0xa06 <DIO_TogPortVal+0x9a>
				TOG_REG(PORTB_Register, value);
     9f4:	a8 e3       	ldi	r26, 0x38	; 56
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e8 e3       	ldi	r30, 0x38	; 56
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	90 81       	ld	r25, Z
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	89 27       	eor	r24, r25
     a02:	8c 93       	st	X, r24
     a04:	2a c0       	rjmp	.+84     	; 0xa5a <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	27 c0       	rjmp	.+78     	; 0xa5a <DIO_TogPortVal+0xee>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PORT_OUTPUT) {
     a0c:	e4 e3       	ldi	r30, 0x34	; 52
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	49 f4       	brne	.+18     	; 0xa28 <DIO_TogPortVal+0xbc>
				TOG_REG(PORTC_Register, value);
     a16:	a5 e3       	ldi	r26, 0x35	; 53
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e5 e3       	ldi	r30, 0x35	; 53
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	90 81       	ld	r25, Z
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	89 27       	eor	r24, r25
     a24:	8c 93       	st	X, r24
     a26:	19 c0       	rjmp	.+50     	; 0xa5a <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	16 c0       	rjmp	.+44     	; 0xa5a <DIO_TogPortVal+0xee>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PORT_OUTPUT) {
     a2e:	e1 e3       	ldi	r30, 0x31	; 49
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	8f 3f       	cpi	r24, 0xFF	; 255
     a36:	49 f4       	brne	.+18     	; 0xa4a <DIO_TogPortVal+0xde>
				TOG_REG(PORTD_Register, value);
     a38:	a2 e3       	ldi	r26, 0x32	; 50
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	e2 e3       	ldi	r30, 0x32	; 50
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	90 81       	ld	r25, Z
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	89 27       	eor	r24, r25
     a46:	8c 93       	st	X, r24
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <DIO_TogPortVal+0xee>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	89 83       	std	Y+1, r24	; 0x01
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <DIO_TogPortVal+0xee>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	cf 91       	pop	r28
     a68:	df 91       	pop	r29
     a6a:	08 95       	ret

00000a6c <DIO_SetPinDirection>:
/*main APIs*/
uint8_t DIO_SetPinDirection(uint8_t PortName, uint8_t PinNo,
		uint8_t PinDirection) {
     a6c:	df 93       	push	r29
     a6e:	cf 93       	push	r28
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	28 97       	sbiw	r28, 0x08	; 8
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	8a 83       	std	Y+2, r24	; 0x02
     a82:	6b 83       	std	Y+3, r22	; 0x03
     a84:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     a86:	19 82       	std	Y+1, r1	; 0x01

	if ((PortName <= PORTD) && (PinNo <= PIN7)) {
     a88:	8a 81       	ldd	r24, Y+2	; 0x02
     a8a:	85 30       	cpi	r24, 0x05	; 5
     a8c:	08 f0       	brcs	.+2      	; 0xa90 <DIO_SetPinDirection+0x24>
     a8e:	fa c0       	rjmp	.+500    	; 0xc84 <DIO_SetPinDirection+0x218>
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	88 30       	cpi	r24, 0x08	; 8
     a94:	08 f0       	brcs	.+2      	; 0xa98 <DIO_SetPinDirection+0x2c>
     a96:	f6 c0       	rjmp	.+492    	; 0xc84 <DIO_SetPinDirection+0x218>
		if (PinDirection == PIN_OUTPUT) {
     a98:	8c 81       	ldd	r24, Y+4	; 0x04
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <DIO_SetPinDirection+0x34>
     a9e:	73 c0       	rjmp	.+230    	; 0xb86 <DIO_SetPinDirection+0x11a>

			switch (PortName) {
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	28 2f       	mov	r18, r24
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	38 87       	std	Y+8, r19	; 0x08
     aa8:	2f 83       	std	Y+7, r18	; 0x07
     aaa:	8f 81       	ldd	r24, Y+7	; 0x07
     aac:	98 85       	ldd	r25, Y+8	; 0x08
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	91 05       	cpc	r25, r1
     ab2:	51 f1       	breq	.+84     	; 0xb08 <DIO_SetPinDirection+0x9c>
     ab4:	2f 81       	ldd	r18, Y+7	; 0x07
     ab6:	38 85       	ldd	r19, Y+8	; 0x08
     ab8:	23 30       	cpi	r18, 0x03	; 3
     aba:	31 05       	cpc	r19, r1
     abc:	34 f4       	brge	.+12     	; 0xaca <DIO_SetPinDirection+0x5e>
     abe:	8f 81       	ldd	r24, Y+7	; 0x07
     ac0:	98 85       	ldd	r25, Y+8	; 0x08
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	91 05       	cpc	r25, r1
     ac6:	61 f0       	breq	.+24     	; 0xae0 <DIO_SetPinDirection+0x74>
     ac8:	5b c0       	rjmp	.+182    	; 0xb80 <DIO_SetPinDirection+0x114>
     aca:	2f 81       	ldd	r18, Y+7	; 0x07
     acc:	38 85       	ldd	r19, Y+8	; 0x08
     ace:	23 30       	cpi	r18, 0x03	; 3
     ad0:	31 05       	cpc	r19, r1
     ad2:	71 f1       	breq	.+92     	; 0xb30 <DIO_SetPinDirection+0xc4>
     ad4:	8f 81       	ldd	r24, Y+7	; 0x07
     ad6:	98 85       	ldd	r25, Y+8	; 0x08
     ad8:	84 30       	cpi	r24, 0x04	; 4
     ada:	91 05       	cpc	r25, r1
     adc:	e9 f1       	breq	.+122    	; 0xb58 <DIO_SetPinDirection+0xec>
     ade:	50 c0       	rjmp	.+160    	; 0xb80 <DIO_SetPinDirection+0x114>
			case PORTA:
				SET_BIT(DDRA_Register, PinNo);
     ae0:	aa e3       	ldi	r26, 0x3A	; 58
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	ea e3       	ldi	r30, 0x3A	; 58
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	48 2f       	mov	r20, r24
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 2e       	mov	r0, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_SetPinDirection+0x92>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_SetPinDirection+0x8e>
     b02:	84 2b       	or	r24, r20
     b04:	8c 93       	st	X, r24
     b06:	c0 c0       	rjmp	.+384    	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				SET_BIT(DDRB_Register, PinNo);
     b08:	a7 e3       	ldi	r26, 0x37	; 55
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	e7 e3       	ldi	r30, 0x37	; 55
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	48 2f       	mov	r20, r24
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	28 2f       	mov	r18, r24
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	02 2e       	mov	r0, r18
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <DIO_SetPinDirection+0xba>
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <DIO_SetPinDirection+0xb6>
     b2a:	84 2b       	or	r24, r20
     b2c:	8c 93       	st	X, r24
     b2e:	ac c0       	rjmp	.+344    	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				SET_BIT(DDRC_Register, PinNo);
     b30:	a4 e3       	ldi	r26, 0x34	; 52
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	e4 e3       	ldi	r30, 0x34	; 52
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 81       	ld	r24, Z
     b3a:	48 2f       	mov	r20, r24
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	28 2f       	mov	r18, r24
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	02 2e       	mov	r0, r18
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <DIO_SetPinDirection+0xe2>
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	0a 94       	dec	r0
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <DIO_SetPinDirection+0xde>
     b52:	84 2b       	or	r24, r20
     b54:	8c 93       	st	X, r24
     b56:	98 c0       	rjmp	.+304    	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				SET_BIT(DDRD_Register, PinNo);
     b58:	a1 e3       	ldi	r26, 0x31	; 49
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e1 e3       	ldi	r30, 0x31	; 49
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	48 2f       	mov	r20, r24
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	02 2e       	mov	r0, r18
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_SetPinDirection+0x10a>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	0a 94       	dec	r0
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <DIO_SetPinDirection+0x106>
     b7a:	84 2b       	or	r24, r20
     b7c:	8c 93       	st	X, r24
     b7e:	84 c0       	rjmp	.+264    	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	81 c0       	rjmp	.+258    	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			}
		} else if (PinDirection == PIN_INPUT) {
     b86:	8c 81       	ldd	r24, Y+4	; 0x04
     b88:	88 23       	and	r24, r24
     b8a:	09 f0       	breq	.+2      	; 0xb8e <DIO_SetPinDirection+0x122>
     b8c:	78 c0       	rjmp	.+240    	; 0xc7e <DIO_SetPinDirection+0x212>

			switch (PortName) {
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	3e 83       	std	Y+6, r19	; 0x06
     b96:	2d 83       	std	Y+5, r18	; 0x05
     b98:	8d 81       	ldd	r24, Y+5	; 0x05
     b9a:	9e 81       	ldd	r25, Y+6	; 0x06
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	91 05       	cpc	r25, r1
     ba0:	61 f1       	breq	.+88     	; 0xbfa <DIO_SetPinDirection+0x18e>
     ba2:	2d 81       	ldd	r18, Y+5	; 0x05
     ba4:	3e 81       	ldd	r19, Y+6	; 0x06
     ba6:	23 30       	cpi	r18, 0x03	; 3
     ba8:	31 05       	cpc	r19, r1
     baa:	34 f4       	brge	.+12     	; 0xbb8 <DIO_SetPinDirection+0x14c>
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	91 05       	cpc	r25, r1
     bb4:	69 f0       	breq	.+26     	; 0xbd0 <DIO_SetPinDirection+0x164>
     bb6:	60 c0       	rjmp	.+192    	; 0xc78 <DIO_SetPinDirection+0x20c>
     bb8:	2d 81       	ldd	r18, Y+5	; 0x05
     bba:	3e 81       	ldd	r19, Y+6	; 0x06
     bbc:	23 30       	cpi	r18, 0x03	; 3
     bbe:	31 05       	cpc	r19, r1
     bc0:	89 f1       	breq	.+98     	; 0xc24 <DIO_SetPinDirection+0x1b8>
     bc2:	8d 81       	ldd	r24, Y+5	; 0x05
     bc4:	9e 81       	ldd	r25, Y+6	; 0x06
     bc6:	84 30       	cpi	r24, 0x04	; 4
     bc8:	91 05       	cpc	r25, r1
     bca:	09 f4       	brne	.+2      	; 0xbce <DIO_SetPinDirection+0x162>
     bcc:	40 c0       	rjmp	.+128    	; 0xc4e <DIO_SetPinDirection+0x1e2>
     bce:	54 c0       	rjmp	.+168    	; 0xc78 <DIO_SetPinDirection+0x20c>
			case PORTA:
				CLEAR_BIT(DDRA_Register, PinNo);
     bd0:	aa e3       	ldi	r26, 0x3A	; 58
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ea e3       	ldi	r30, 0x3A	; 58
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	02 2e       	mov	r0, r18
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_SetPinDirection+0x182>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_SetPinDirection+0x17e>
     bf2:	80 95       	com	r24
     bf4:	84 23       	and	r24, r20
     bf6:	8c 93       	st	X, r24
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				CLEAR_BIT(DDRB_Register, PinNo);
     bfa:	a7 e3       	ldi	r26, 0x37	; 55
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e7 e3       	ldi	r30, 0x37	; 55
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	48 2f       	mov	r20, r24
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 2e       	mov	r0, r18
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_SetPinDirection+0x1ac>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_SetPinDirection+0x1a8>
     c1c:	80 95       	com	r24
     c1e:	84 23       	and	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	32 c0       	rjmp	.+100    	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				CLEAR_BIT(DDRC_Register, PinNo);
     c24:	a4 e3       	ldi	r26, 0x34	; 52
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e4 e3       	ldi	r30, 0x34	; 52
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_SetPinDirection+0x1d6>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_SetPinDirection+0x1d2>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	1d c0       	rjmp	.+58     	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				CLEAR_BIT(DDRD_Register, PinNo);
     c4e:	a1 e3       	ldi	r26, 0x31	; 49
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e1 e3       	ldi	r30, 0x31	; 49
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	48 2f       	mov	r20, r24
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 2e       	mov	r0, r18
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_SetPinDirection+0x200>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	0a 94       	dec	r0
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_SetPinDirection+0x1fc>
     c70:	80 95       	com	r24
     c72:	84 23       	and	r24, r20
     c74:	8c 93       	st	X, r24
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <DIO_SetPinDirection+0x21c>
				break;
			}
		}

		else {
			ErrorValue = EXIT_FAILURE;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_SetPinDirection+0x21c>
		}
	}

	else {
		ErrorValue = EXIT_FAILURE;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     c88:	89 81       	ldd	r24, Y+1	; 0x01
}
     c8a:	28 96       	adiw	r28, 0x08	; 8
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <DIO_WritePin>:
uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	28 97       	sbiw	r28, 0x08	; 8
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	8a 83       	std	Y+2, r24	; 0x02
     cb2:	6b 83       	std	Y+3, r22	; 0x03
     cb4:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     cb6:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	85 30       	cpi	r24, 0x05	; 5
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <DIO_WritePin+0x24>
     cbe:	0f c2       	rjmp	.+1054   	; 0x10de <DIO_WritePin+0x442>
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	88 30       	cpi	r24, 0x08	; 8
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <DIO_WritePin+0x2c>
     cc6:	0b c2       	rjmp	.+1046   	; 0x10de <DIO_WritePin+0x442>
			if (PinValue == PIN_HIGH) {
     cc8:	8c 81       	ldd	r24, Y+4	; 0x04
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <DIO_WritePin+0x34>
     cce:	fe c0       	rjmp	.+508    	; 0xecc <DIO_WritePin+0x230>

				switch (PortName) {
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	38 87       	std	Y+8, r19	; 0x08
     cd8:	2f 83       	std	Y+7, r18	; 0x07
     cda:	4f 81       	ldd	r20, Y+7	; 0x07
     cdc:	58 85       	ldd	r21, Y+8	; 0x08
     cde:	42 30       	cpi	r20, 0x02	; 2
     ce0:	51 05       	cpc	r21, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <DIO_WritePin+0x4a>
     ce4:	4e c0       	rjmp	.+156    	; 0xd82 <DIO_WritePin+0xe6>
     ce6:	8f 81       	ldd	r24, Y+7	; 0x07
     ce8:	98 85       	ldd	r25, Y+8	; 0x08
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	91 05       	cpc	r25, r1
     cee:	34 f4       	brge	.+12     	; 0xcfc <DIO_WritePin+0x60>
     cf0:	2f 81       	ldd	r18, Y+7	; 0x07
     cf2:	38 85       	ldd	r19, Y+8	; 0x08
     cf4:	21 30       	cpi	r18, 0x01	; 1
     cf6:	31 05       	cpc	r19, r1
     cf8:	71 f0       	breq	.+28     	; 0xd16 <DIO_WritePin+0x7a>
     cfa:	e5 c0       	rjmp	.+458    	; 0xec6 <DIO_WritePin+0x22a>
     cfc:	4f 81       	ldd	r20, Y+7	; 0x07
     cfe:	58 85       	ldd	r21, Y+8	; 0x08
     d00:	43 30       	cpi	r20, 0x03	; 3
     d02:	51 05       	cpc	r21, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <DIO_WritePin+0x6c>
     d06:	73 c0       	rjmp	.+230    	; 0xdee <DIO_WritePin+0x152>
     d08:	8f 81       	ldd	r24, Y+7	; 0x07
     d0a:	98 85       	ldd	r25, Y+8	; 0x08
     d0c:	84 30       	cpi	r24, 0x04	; 4
     d0e:	91 05       	cpc	r25, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <DIO_WritePin+0x78>
     d12:	a3 c0       	rjmp	.+326    	; 0xe5a <DIO_WritePin+0x1be>
     d14:	d8 c0       	rjmp	.+432    	; 0xec6 <DIO_WritePin+0x22a>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
     d16:	ea e3       	ldi	r30, 0x3A	; 58
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_WritePin+0x94>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	2a 95       	dec	r18
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_WritePin+0x90>
     d34:	9a 01       	movw	r18, r20
     d36:	28 23       	and	r18, r24
     d38:	39 23       	and	r19, r25
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a9 01       	movw	r20, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_WritePin+0xac>
     d44:	55 95       	asr	r21
     d46:	47 95       	ror	r20
     d48:	8a 95       	dec	r24
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_WritePin+0xa8>
     d4c:	ca 01       	movw	r24, r20
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	a1 f4       	brne	.+40     	; 0xd7c <DIO_WritePin+0xe0>
						SET_BIT(PORTA_Register, PinNo);
     d54:	ab e3       	ldi	r26, 0x3B	; 59
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	eb e3       	ldi	r30, 0x3B	; 59
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_WritePin+0xd6>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_WritePin+0xd2>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	b3 c1       	rjmp	.+870    	; 0x10e2 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	b0 c1       	rjmp	.+864    	; 0x10e2 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_WritePin+0x100>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	2a 95       	dec	r18
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_WritePin+0xfc>
     da0:	9a 01       	movw	r18, r20
     da2:	28 23       	and	r18, r24
     da4:	39 23       	and	r19, r25
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	a9 01       	movw	r20, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_WritePin+0x118>
     db0:	55 95       	asr	r21
     db2:	47 95       	ror	r20
     db4:	8a 95       	dec	r24
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_WritePin+0x114>
     db8:	ca 01       	movw	r24, r20
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	91 05       	cpc	r25, r1
     dbe:	a1 f4       	brne	.+40     	; 0xde8 <DIO_WritePin+0x14c>
						SET_BIT(PORTB_Register, PinNo);
     dc0:	a8 e3       	ldi	r26, 0x38	; 56
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e8 e3       	ldi	r30, 0x38	; 56
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 2e       	mov	r0, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_WritePin+0x142>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	0a 94       	dec	r0
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_WritePin+0x13e>
     de2:	84 2b       	or	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	7d c1       	rjmp	.+762    	; 0x10e2 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	7a c1       	rjmp	.+756    	; 0x10e2 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
     dee:	e4 e3       	ldi	r30, 0x34	; 52
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_WritePin+0x16c>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	2a 95       	dec	r18
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_WritePin+0x168>
     e0c:	9a 01       	movw	r18, r20
     e0e:	28 23       	and	r18, r24
     e10:	39 23       	and	r19, r25
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a9 01       	movw	r20, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_WritePin+0x184>
     e1c:	55 95       	asr	r21
     e1e:	47 95       	ror	r20
     e20:	8a 95       	dec	r24
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_WritePin+0x180>
     e24:	ca 01       	movw	r24, r20
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	91 05       	cpc	r25, r1
     e2a:	a1 f4       	brne	.+40     	; 0xe54 <DIO_WritePin+0x1b8>
						SET_BIT(PORTC_Register, PinNo);
     e2c:	a5 e3       	ldi	r26, 0x35	; 53
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e5 e3       	ldi	r30, 0x35	; 53
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_WritePin+0x1ae>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_WritePin+0x1aa>
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	47 c1       	rjmp	.+654    	; 0x10e2 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	44 c1       	rjmp	.+648    	; 0x10e2 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_WritePin+0x1d8>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	2a 95       	dec	r18
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_WritePin+0x1d4>
     e78:	9a 01       	movw	r18, r20
     e7a:	28 23       	and	r18, r24
     e7c:	39 23       	and	r19, r25
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a9 01       	movw	r20, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_WritePin+0x1f0>
     e88:	55 95       	asr	r21
     e8a:	47 95       	ror	r20
     e8c:	8a 95       	dec	r24
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_WritePin+0x1ec>
     e90:	ca 01       	movw	r24, r20
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	a1 f4       	brne	.+40     	; 0xec0 <DIO_WritePin+0x224>
						SET_BIT(PORTD_Register, PinNo);
     e98:	a2 e3       	ldi	r26, 0x32	; 50
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e2 e3       	ldi	r30, 0x32	; 50
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_WritePin+0x21a>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_WritePin+0x216>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	11 c1       	rjmp	.+546    	; 0x10e2 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	0e c1       	rjmp	.+540    	; 0x10e2 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	0b c1       	rjmp	.+534    	; 0x10e2 <DIO_WritePin+0x446>
					break;
				}
			} else if (PinValue == PIN_LOW) {
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	88 23       	and	r24, r24
     ed0:	09 f0       	breq	.+2      	; 0xed4 <DIO_WritePin+0x238>
     ed2:	02 c1       	rjmp	.+516    	; 0x10d8 <DIO_WritePin+0x43c>

				switch (PortName) {
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3e 83       	std	Y+6, r19	; 0x06
     edc:	2d 83       	std	Y+5, r18	; 0x05
     ede:	4d 81       	ldd	r20, Y+5	; 0x05
     ee0:	5e 81       	ldd	r21, Y+6	; 0x06
     ee2:	42 30       	cpi	r20, 0x02	; 2
     ee4:	51 05       	cpc	r21, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <DIO_WritePin+0x24e>
     ee8:	4f c0       	rjmp	.+158    	; 0xf88 <DIO_WritePin+0x2ec>
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	34 f4       	brge	.+12     	; 0xf00 <DIO_WritePin+0x264>
     ef4:	2d 81       	ldd	r18, Y+5	; 0x05
     ef6:	3e 81       	ldd	r19, Y+6	; 0x06
     ef8:	21 30       	cpi	r18, 0x01	; 1
     efa:	31 05       	cpc	r19, r1
     efc:	71 f0       	breq	.+28     	; 0xf1a <DIO_WritePin+0x27e>
     efe:	e9 c0       	rjmp	.+466    	; 0x10d2 <DIO_WritePin+0x436>
     f00:	4d 81       	ldd	r20, Y+5	; 0x05
     f02:	5e 81       	ldd	r21, Y+6	; 0x06
     f04:	43 30       	cpi	r20, 0x03	; 3
     f06:	51 05       	cpc	r21, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <DIO_WritePin+0x270>
     f0a:	75 c0       	rjmp	.+234    	; 0xff6 <DIO_WritePin+0x35a>
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	91 05       	cpc	r25, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <DIO_WritePin+0x27c>
     f16:	a6 c0       	rjmp	.+332    	; 0x1064 <DIO_WritePin+0x3c8>
     f18:	dc c0       	rjmp	.+440    	; 0x10d2 <DIO_WritePin+0x436>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_WritePin+0x298>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	2a 95       	dec	r18
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_WritePin+0x294>
     f38:	9a 01       	movw	r18, r20
     f3a:	28 23       	and	r18, r24
     f3c:	39 23       	and	r19, r25
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a9 01       	movw	r20, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_WritePin+0x2b0>
     f48:	55 95       	asr	r21
     f4a:	47 95       	ror	r20
     f4c:	8a 95       	dec	r24
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_WritePin+0x2ac>
     f50:	ca 01       	movw	r24, r20
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	91 05       	cpc	r25, r1
     f56:	a9 f4       	brne	.+42     	; 0xf82 <DIO_WritePin+0x2e6>
						CLEAR_BIT(PORTA_Register, PinNo);
     f58:	ab e3       	ldi	r26, 0x3B	; 59
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	eb e3       	ldi	r30, 0x3B	; 59
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_WritePin+0x2da>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_WritePin+0x2d6>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	b0 c0       	rjmp	.+352    	; 0x10e2 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	ad c0       	rjmp	.+346    	; 0x10e2 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
     f88:	e7 e3       	ldi	r30, 0x37	; 55
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_WritePin+0x306>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	2a 95       	dec	r18
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_WritePin+0x302>
     fa6:	9a 01       	movw	r18, r20
     fa8:	28 23       	and	r18, r24
     faa:	39 23       	and	r19, r25
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a9 01       	movw	r20, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_WritePin+0x31e>
     fb6:	55 95       	asr	r21
     fb8:	47 95       	ror	r20
     fba:	8a 95       	dec	r24
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_WritePin+0x31a>
     fbe:	ca 01       	movw	r24, r20
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	91 05       	cpc	r25, r1
     fc4:	a9 f4       	brne	.+42     	; 0xff0 <DIO_WritePin+0x354>
						CLEAR_BIT(PORTB_Register, PinNo);
     fc6:	a8 e3       	ldi	r26, 0x38	; 56
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e8 e3       	ldi	r30, 0x38	; 56
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_WritePin+0x348>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_WritePin+0x344>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	79 c0       	rjmp	.+242    	; 0x10e2 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	76 c0       	rjmp	.+236    	; 0x10e2 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
     ff6:	e4 e3       	ldi	r30, 0x34	; 52
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_WritePin+0x374>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	2a 95       	dec	r18
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_WritePin+0x370>
    1014:	9a 01       	movw	r18, r20
    1016:	28 23       	and	r18, r24
    1018:	39 23       	and	r19, r25
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_WritePin+0x38c>
    1024:	55 95       	asr	r21
    1026:	47 95       	ror	r20
    1028:	8a 95       	dec	r24
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_WritePin+0x388>
    102c:	ca 01       	movw	r24, r20
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	a9 f4       	brne	.+42     	; 0x105e <DIO_WritePin+0x3c2>
						CLEAR_BIT(PORTC_Register, PinNo);
    1034:	a5 e3       	ldi	r26, 0x35	; 53
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e3       	ldi	r30, 0x35	; 53
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_WritePin+0x3b6>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_WritePin+0x3b2>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	42 c0       	rjmp	.+132    	; 0x10e2 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	3f c0       	rjmp	.+126    	; 0x10e2 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    1064:	e1 e3       	ldi	r30, 0x31	; 49
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_WritePin+0x3e2>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	2a 95       	dec	r18
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_WritePin+0x3de>
    1082:	9a 01       	movw	r18, r20
    1084:	28 23       	and	r18, r24
    1086:	39 23       	and	r19, r25
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_WritePin+0x3fa>
    1092:	55 95       	asr	r21
    1094:	47 95       	ror	r20
    1096:	8a 95       	dec	r24
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_WritePin+0x3f6>
    109a:	ca 01       	movw	r24, r20
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	a9 f4       	brne	.+42     	; 0x10cc <DIO_WritePin+0x430>
						CLEAR_BIT(PORTD_Register, PinNo);
    10a2:	a2 e3       	ldi	r26, 0x32	; 50
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e2 e3       	ldi	r30, 0x32	; 50
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_WritePin+0x424>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_WritePin+0x420>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	0b c0       	rjmp	.+22     	; 0x10e2 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	08 c0       	rjmp	.+16     	; 0x10e2 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <DIO_WritePin+0x446>
					break;
				}
			} else {
				ErrorValue = EXIT_FAILURE;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_WritePin+0x446>
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e4:	28 96       	adiw	r28, 0x08	; 8
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <DIO_TogglePin>:
uint8_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <DIO_TogglePin+0x6>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <DIO_TogglePin+0x8>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	8a 83       	std	Y+2, r24	; 0x02
    1106:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1108:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	85 30       	cpi	r24, 0x05	; 5
    110e:	08 f0       	brcs	.+2      	; 0x1112 <DIO_TogglePin+0x1c>
    1110:	02 c1       	rjmp	.+516    	; 0x1316 <DIO_TogglePin+0x220>
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	88 30       	cpi	r24, 0x08	; 8
    1116:	08 f0       	brcs	.+2      	; 0x111a <DIO_TogglePin+0x24>
    1118:	fe c0       	rjmp	.+508    	; 0x1316 <DIO_TogglePin+0x220>
			switch (PortName) {
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3d 83       	std	Y+5, r19	; 0x05
    1122:	2c 83       	std	Y+4, r18	; 0x04
    1124:	4c 81       	ldd	r20, Y+4	; 0x04
    1126:	5d 81       	ldd	r21, Y+5	; 0x05
    1128:	42 30       	cpi	r20, 0x02	; 2
    112a:	51 05       	cpc	r21, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <DIO_TogglePin+0x3a>
    112e:	4e c0       	rjmp	.+156    	; 0x11cc <DIO_TogglePin+0xd6>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	91 05       	cpc	r25, r1
    1138:	34 f4       	brge	.+12     	; 0x1146 <DIO_TogglePin+0x50>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	21 30       	cpi	r18, 0x01	; 1
    1140:	31 05       	cpc	r19, r1
    1142:	71 f0       	breq	.+28     	; 0x1160 <DIO_TogglePin+0x6a>
    1144:	e5 c0       	rjmp	.+458    	; 0x1310 <DIO_TogglePin+0x21a>
    1146:	4c 81       	ldd	r20, Y+4	; 0x04
    1148:	5d 81       	ldd	r21, Y+5	; 0x05
    114a:	43 30       	cpi	r20, 0x03	; 3
    114c:	51 05       	cpc	r21, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <DIO_TogglePin+0x5c>
    1150:	73 c0       	rjmp	.+230    	; 0x1238 <DIO_TogglePin+0x142>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <DIO_TogglePin+0x68>
    115c:	a3 c0       	rjmp	.+326    	; 0x12a4 <DIO_TogglePin+0x1ae>
    115e:	d8 c0       	rjmp	.+432    	; 0x1310 <DIO_TogglePin+0x21a>
			case PORTA:
				if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    1160:	ea e3       	ldi	r30, 0x3A	; 58
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_TogglePin+0x84>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	2a 95       	dec	r18
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_TogglePin+0x80>
    117e:	9a 01       	movw	r18, r20
    1180:	28 23       	and	r18, r24
    1182:	39 23       	and	r19, r25
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_TogglePin+0x9c>
    118e:	55 95       	asr	r21
    1190:	47 95       	ror	r20
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_TogglePin+0x98>
    1196:	ca 01       	movw	r24, r20
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	91 05       	cpc	r25, r1
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <DIO_TogglePin+0xd0>
					TOG_BIT(PORTA_Register, PinNo);
    119e:	ab e3       	ldi	r26, 0x3B	; 59
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	eb e3       	ldi	r30, 0x3B	; 59
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_TogglePin+0xc6>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_TogglePin+0xc2>
    11c0:	84 27       	eor	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	aa c0       	rjmp	.+340    	; 0x131a <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	a7 c0       	rjmp	.+334    	; 0x131a <DIO_TogglePin+0x224>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    11cc:	e7 e3       	ldi	r30, 0x37	; 55
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_TogglePin+0xf0>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	2a 95       	dec	r18
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_TogglePin+0xec>
    11ea:	9a 01       	movw	r18, r20
    11ec:	28 23       	and	r18, r24
    11ee:	39 23       	and	r19, r25
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a9 01       	movw	r20, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_TogglePin+0x108>
    11fa:	55 95       	asr	r21
    11fc:	47 95       	ror	r20
    11fe:	8a 95       	dec	r24
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_TogglePin+0x104>
    1202:	ca 01       	movw	r24, r20
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	91 05       	cpc	r25, r1
    1208:	a1 f4       	brne	.+40     	; 0x1232 <DIO_TogglePin+0x13c>
					TOG_BIT(PORTB_Register, PinNo);
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_TogglePin+0x132>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_TogglePin+0x12e>
    122c:	84 27       	eor	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	74 c0       	rjmp	.+232    	; 0x131a <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	71 c0       	rjmp	.+226    	; 0x131a <DIO_TogglePin+0x224>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    1238:	e4 e3       	ldi	r30, 0x34	; 52
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_TogglePin+0x15c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	2a 95       	dec	r18
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_TogglePin+0x158>
    1256:	9a 01       	movw	r18, r20
    1258:	28 23       	and	r18, r24
    125a:	39 23       	and	r19, r25
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a9 01       	movw	r20, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_TogglePin+0x174>
    1266:	55 95       	asr	r21
    1268:	47 95       	ror	r20
    126a:	8a 95       	dec	r24
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_TogglePin+0x170>
    126e:	ca 01       	movw	r24, r20
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	a1 f4       	brne	.+40     	; 0x129e <DIO_TogglePin+0x1a8>
					TOG_BIT(PORTC_Register, PinNo);
    1276:	a5 e3       	ldi	r26, 0x35	; 53
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_TogglePin+0x19e>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_TogglePin+0x19a>
    1298:	84 27       	eor	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	3e c0       	rjmp	.+124    	; 0x131a <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	3b c0       	rjmp	.+118    	; 0x131a <DIO_TogglePin+0x224>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    12a4:	e1 e3       	ldi	r30, 0x31	; 49
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_TogglePin+0x1c8>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	2a 95       	dec	r18
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_TogglePin+0x1c4>
    12c2:	9a 01       	movw	r18, r20
    12c4:	28 23       	and	r18, r24
    12c6:	39 23       	and	r19, r25
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a9 01       	movw	r20, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_TogglePin+0x1e0>
    12d2:	55 95       	asr	r21
    12d4:	47 95       	ror	r20
    12d6:	8a 95       	dec	r24
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_TogglePin+0x1dc>
    12da:	ca 01       	movw	r24, r20
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	a1 f4       	brne	.+40     	; 0x130a <DIO_TogglePin+0x214>
					TOG_BIT(PORTD_Register, PinNo);
    12e2:	a2 e3       	ldi	r26, 0x32	; 50
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e2 e3       	ldi	r30, 0x32	; 50
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_TogglePin+0x20a>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_TogglePin+0x206>
    1304:	84 27       	eor	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	08 c0       	rjmp	.+16     	; 0x131a <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	05 c0       	rjmp	.+10     	; 0x131a <DIO_TogglePin+0x224>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_TogglePin+0x224>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <DIO_ReadPin>:
uint8_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	27 97       	sbiw	r28, 0x07	; 7
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	6b 83       	std	Y+3, r22	; 0x03
    1344:	5d 83       	std	Y+5, r21	; 0x05
    1346:	4c 83       	std	Y+4, r20	; 0x04
	Byte RETVAL = EXIT_SUCCESFUL;
    1348:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	08 f0       	brcs	.+2      	; 0x1352 <DIO_ReadPin+0x26>
    1350:	a9 c0       	rjmp	.+338    	; 0x14a4 <DIO_ReadPin+0x178>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 30       	cpi	r24, 0x08	; 8
    1356:	08 f0       	brcs	.+2      	; 0x135a <DIO_ReadPin+0x2e>
    1358:	a5 c0       	rjmp	.+330    	; 0x14a4 <DIO_ReadPin+0x178>

			switch (PortName) {
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3f 83       	std	Y+7, r19	; 0x07
    1362:	2e 83       	std	Y+6, r18	; 0x06
    1364:	4e 81       	ldd	r20, Y+6	; 0x06
    1366:	5f 81       	ldd	r21, Y+7	; 0x07
    1368:	42 30       	cpi	r20, 0x02	; 2
    136a:	51 05       	cpc	r21, r1
    136c:	c1 f1       	breq	.+112    	; 0x13de <DIO_ReadPin+0xb2>
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	91 05       	cpc	r25, r1
    1376:	34 f4       	brge	.+12     	; 0x1384 <DIO_ReadPin+0x58>
    1378:	2e 81       	ldd	r18, Y+6	; 0x06
    137a:	3f 81       	ldd	r19, Y+7	; 0x07
    137c:	21 30       	cpi	r18, 0x01	; 1
    137e:	31 05       	cpc	r19, r1
    1380:	71 f0       	breq	.+28     	; 0x139e <DIO_ReadPin+0x72>
    1382:	8d c0       	rjmp	.+282    	; 0x149e <DIO_ReadPin+0x172>
    1384:	4e 81       	ldd	r20, Y+6	; 0x06
    1386:	5f 81       	ldd	r21, Y+7	; 0x07
    1388:	43 30       	cpi	r20, 0x03	; 3
    138a:	51 05       	cpc	r21, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <DIO_ReadPin+0x64>
    138e:	47 c0       	rjmp	.+142    	; 0x141e <DIO_ReadPin+0xf2>
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <DIO_ReadPin+0x70>
    139a:	61 c0       	rjmp	.+194    	; 0x145e <DIO_ReadPin+0x132>
    139c:	80 c0       	rjmp	.+256    	; 0x149e <DIO_ReadPin+0x172>
			case PORTA:
				*PinData = READ_BIT(PINA_Register, PinNo);
    139e:	e9 e3       	ldi	r30, 0x39	; 57
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_ReadPin+0x8c>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	2a 95       	dec	r18
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_ReadPin+0x88>
    13bc:	9a 01       	movw	r18, r20
    13be:	28 23       	and	r18, r24
    13c0:	39 23       	and	r19, r25
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_ReadPin+0xa4>
    13cc:	55 95       	asr	r21
    13ce:	47 95       	ror	r20
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_ReadPin+0xa0>
    13d4:	ca 01       	movw	r24, r20
    13d6:	ec 81       	ldd	r30, Y+4	; 0x04
    13d8:	fd 81       	ldd	r31, Y+5	; 0x05
    13da:	80 83       	st	Z, r24
    13dc:	65 c0       	rjmp	.+202    	; 0x14a8 <DIO_ReadPin+0x17c>
				break;
			case PORTB:
				*PinData = READ_BIT(PINB_Register, PinNo);
    13de:	e6 e3       	ldi	r30, 0x36	; 54
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_ReadPin+0xcc>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	2a 95       	dec	r18
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_ReadPin+0xc8>
    13fc:	9a 01       	movw	r18, r20
    13fe:	28 23       	and	r18, r24
    1400:	39 23       	and	r19, r25
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_ReadPin+0xe4>
    140c:	55 95       	asr	r21
    140e:	47 95       	ror	r20
    1410:	8a 95       	dec	r24
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_ReadPin+0xe0>
    1414:	ca 01       	movw	r24, r20
    1416:	ec 81       	ldd	r30, Y+4	; 0x04
    1418:	fd 81       	ldd	r31, Y+5	; 0x05
    141a:	80 83       	st	Z, r24
    141c:	45 c0       	rjmp	.+138    	; 0x14a8 <DIO_ReadPin+0x17c>
				break;
			case PORTC:
				*PinData = READ_BIT(PINC_Register, PinNo);
    141e:	e3 e3       	ldi	r30, 0x33	; 51
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_ReadPin+0x10c>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	2a 95       	dec	r18
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_ReadPin+0x108>
    143c:	9a 01       	movw	r18, r20
    143e:	28 23       	and	r18, r24
    1440:	39 23       	and	r19, r25
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a9 01       	movw	r20, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_ReadPin+0x124>
    144c:	55 95       	asr	r21
    144e:	47 95       	ror	r20
    1450:	8a 95       	dec	r24
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_ReadPin+0x120>
    1454:	ca 01       	movw	r24, r20
    1456:	ec 81       	ldd	r30, Y+4	; 0x04
    1458:	fd 81       	ldd	r31, Y+5	; 0x05
    145a:	80 83       	st	Z, r24
    145c:	25 c0       	rjmp	.+74     	; 0x14a8 <DIO_ReadPin+0x17c>
				break;
			case PORTD:
				*PinData = READ_BIT(PIND_Register, PinNo);
    145e:	e0 e3       	ldi	r30, 0x30	; 48
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_ReadPin+0x14c>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	2a 95       	dec	r18
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_ReadPin+0x148>
    147c:	9a 01       	movw	r18, r20
    147e:	28 23       	and	r18, r24
    1480:	39 23       	and	r19, r25
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_ReadPin+0x164>
    148c:	55 95       	asr	r21
    148e:	47 95       	ror	r20
    1490:	8a 95       	dec	r24
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_ReadPin+0x160>
    1494:	ca 01       	movw	r24, r20
    1496:	ec 81       	ldd	r30, Y+4	; 0x04
    1498:	fd 81       	ldd	r31, Y+5	; 0x05
    149a:	80 83       	st	Z, r24
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <DIO_ReadPin+0x17c>
				break;
			default:
				RETVAL = EXIT_FAILURE;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_ReadPin+0x17c>
			}
		} else {
			RETVAL = EXIT_FAILURE;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
		}

		return RETVAL;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14aa:	27 96       	adiw	r28, 0x07	; 7
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <DIO_EnablePinPullup>:
uint8_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_EnablePinPullup+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <DIO_EnablePinPullup+0x8>
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    14ce:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	85 30       	cpi	r24, 0x05	; 5
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <DIO_EnablePinPullup+0x1c>
    14d6:	99 c0       	rjmp	.+306    	; 0x160a <DIO_EnablePinPullup+0x14e>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <DIO_EnablePinPullup+0x24>
    14de:	95 c0       	rjmp	.+298    	; 0x160a <DIO_EnablePinPullup+0x14e>
			/* Check on the Required PORT Number */
			switch (PortName) {
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3d 83       	std	Y+5, r19	; 0x05
    14e8:	2c 83       	std	Y+4, r18	; 0x04
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	91 05       	cpc	r25, r1
    14f2:	a1 f1       	breq	.+104    	; 0x155c <DIO_EnablePinPullup+0xa0>
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	23 30       	cpi	r18, 0x03	; 3
    14fa:	31 05       	cpc	r19, r1
    14fc:	34 f4       	brge	.+12     	; 0x150a <DIO_EnablePinPullup+0x4e>
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	9d 81       	ldd	r25, Y+5	; 0x05
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	91 05       	cpc	r25, r1
    1506:	71 f0       	breq	.+28     	; 0x1524 <DIO_EnablePinPullup+0x68>
    1508:	7d c0       	rjmp	.+250    	; 0x1604 <DIO_EnablePinPullup+0x148>
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	23 30       	cpi	r18, 0x03	; 3
    1510:	31 05       	cpc	r19, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <DIO_EnablePinPullup+0x5a>
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <DIO_EnablePinPullup+0xd8>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <DIO_EnablePinPullup+0x66>
    1520:	55 c0       	rjmp	.+170    	; 0x15cc <DIO_EnablePinPullup+0x110>
    1522:	70 c0       	rjmp	.+224    	; 0x1604 <DIO_EnablePinPullup+0x148>
			case PORTA:
				if (READ_REG(DDRA_Register) == PIN_INPUT) {
    1524:	ea e3       	ldi	r30, 0x3A	; 58
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	88 23       	and	r24, r24
    152c:	a1 f4       	brne	.+40     	; 0x1556 <DIO_EnablePinPullup+0x9a>
					SET_BIT(PORTA_Register, PinNo);
    152e:	ab e3       	ldi	r26, 0x3B	; 59
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	eb e3       	ldi	r30, 0x3B	; 59
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_EnablePinPullup+0x90>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_EnablePinPullup+0x8c>
    1550:	84 2b       	or	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	5c c0       	rjmp	.+184    	; 0x160e <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	59 c0       	rjmp	.+178    	; 0x160e <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTB:
				if (READ_REG(DDRB_Register) == PIN_INPUT) {
    155c:	e7 e3       	ldi	r30, 0x37	; 55
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 23       	and	r24, r24
    1564:	a1 f4       	brne	.+40     	; 0x158e <DIO_EnablePinPullup+0xd2>
					SET_BIT(PORTB_Register, PinNo);
    1566:	a8 e3       	ldi	r26, 0x38	; 56
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 e3       	ldi	r30, 0x38	; 56
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_EnablePinPullup+0xc8>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_EnablePinPullup+0xc4>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	40 c0       	rjmp	.+128    	; 0x160e <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	3d c0       	rjmp	.+122    	; 0x160e <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTC:
				if (READ_REG(DDRC_Register) == PIN_INPUT) {
    1594:	e4 e3       	ldi	r30, 0x34	; 52
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	88 23       	and	r24, r24
    159c:	a1 f4       	brne	.+40     	; 0x15c6 <DIO_EnablePinPullup+0x10a>
					SET_BIT(PORTC_Register, PinNo);
    159e:	a5 e3       	ldi	r26, 0x35	; 53
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e3       	ldi	r30, 0x35	; 53
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_EnablePinPullup+0x100>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_EnablePinPullup+0xfc>
    15c0:	84 2b       	or	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	24 c0       	rjmp	.+72     	; 0x160e <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	21 c0       	rjmp	.+66     	; 0x160e <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTD:
				if (READ_REG(DDRD_Register) == PIN_INPUT) {
    15cc:	e1 e3       	ldi	r30, 0x31	; 49
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 23       	and	r24, r24
    15d4:	a1 f4       	brne	.+40     	; 0x15fe <DIO_EnablePinPullup+0x142>
					SET_BIT(PORTD_Register, PinNo);
    15d6:	a2 e3       	ldi	r26, 0x32	; 50
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e2 e3       	ldi	r30, 0x32	; 50
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_EnablePinPullup+0x138>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_EnablePinPullup+0x134>
    15f8:	84 2b       	or	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	08 c0       	rjmp	.+16     	; 0x160e <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	05 c0       	rjmp	.+10     	; 0x160e <DIO_EnablePinPullup+0x152>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_EnablePinPullup+0x152>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    160e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <APP_Init>:
#include "../Infrastructure/LIB/STD_TYPES.h"
#include "../Infrastructure/LIB/Bit Operations.h"
#include "../MCAL/UART/UART.h"
#include "APP.h"
void APP_Init()
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	UART_Init(UARTChannel_1);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <APP_Start>:
void APP_Start(ptr_uint8_t chararr)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <APP_Start+0x6>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
	UART_ReceiveString(UARTChannel_1, chararr);
    1642:	29 81       	ldd	r18, Y+1	; 0x01
    1644:	3a 81       	ldd	r19, Y+2	; 0x02
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	b9 01       	movw	r22, r18
    164a:	0e 94 6d 01 	call	0x2da	; 0x2da <UART_ReceiveString>
	UART_TransmitString(UARTChannel_1, chararr);
    164e:	29 81       	ldd	r18, Y+1	; 0x01
    1650:	3a 81       	ldd	r19, Y+2	; 0x02
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	b9 01       	movw	r22, r18
    1656:	0e 94 39 01 	call	0x272	; 0x272 <UART_TransmitString>
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <main>:
#include "Infrastructure/LIB/Bit Operations.h"
#include "MCAL/DIO/DIO_DRIVER_TypeDef.h"
#include "MCAL/DIO/DIO_DRIVER.h"
#include "MCAL/UART/UART.h"
#include "APP/APP.h"
int main() {
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	c4 50       	subi	r28, 0x04	; 4
    166e:	d1 40       	sbci	r29, 0x01	; 1
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
	APP_Init();
    167a:	0e 94 10 0b 	call	0x1620	; 0x1620 <APP_Init>
	uint8_t chararr[255]="ahmed";
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	c0 50       	subi	r28, 0x00	; 0
    1684:	df 4f       	sbci	r29, 0xFF	; 255
    1686:	99 83       	std	Y+1, r25	; 0x01
    1688:	88 83       	st	Y, r24
    168a:	c0 50       	subi	r28, 0x00	; 0
    168c:	d1 40       	sbci	r29, 0x01	; 1
    168e:	a0 e6       	ldi	r26, 0x60	; 96
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ce 5f       	subi	r28, 0xFE	; 254
    1694:	de 4f       	sbci	r29, 0xFE	; 254
    1696:	b9 83       	std	Y+1, r27	; 0x01
    1698:	a8 83       	st	Y, r26
    169a:	c2 50       	subi	r28, 0x02	; 2
    169c:	d1 40       	sbci	r29, 0x01	; 1
    169e:	b6 e0       	ldi	r27, 0x06	; 6
    16a0:	cc 5f       	subi	r28, 0xFC	; 252
    16a2:	de 4f       	sbci	r29, 0xFE	; 254
    16a4:	b8 83       	st	Y, r27
    16a6:	c4 50       	subi	r28, 0x04	; 4
    16a8:	d1 40       	sbci	r29, 0x01	; 1
    16aa:	ce 5f       	subi	r28, 0xFE	; 254
    16ac:	de 4f       	sbci	r29, 0xFE	; 254
    16ae:	e8 81       	ld	r30, Y
    16b0:	f9 81       	ldd	r31, Y+1	; 0x01
    16b2:	c2 50       	subi	r28, 0x02	; 2
    16b4:	d1 40       	sbci	r29, 0x01	; 1
    16b6:	00 80       	ld	r0, Z
    16b8:	ce 5f       	subi	r28, 0xFE	; 254
    16ba:	de 4f       	sbci	r29, 0xFE	; 254
    16bc:	88 81       	ld	r24, Y
    16be:	99 81       	ldd	r25, Y+1	; 0x01
    16c0:	c2 50       	subi	r28, 0x02	; 2
    16c2:	d1 40       	sbci	r29, 0x01	; 1
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	ce 5f       	subi	r28, 0xFE	; 254
    16c8:	de 4f       	sbci	r29, 0xFE	; 254
    16ca:	99 83       	std	Y+1, r25	; 0x01
    16cc:	88 83       	st	Y, r24
    16ce:	c2 50       	subi	r28, 0x02	; 2
    16d0:	d1 40       	sbci	r29, 0x01	; 1
    16d2:	c0 50       	subi	r28, 0x00	; 0
    16d4:	df 4f       	sbci	r29, 0xFF	; 255
    16d6:	a8 81       	ld	r26, Y
    16d8:	b9 81       	ldd	r27, Y+1	; 0x01
    16da:	c0 50       	subi	r28, 0x00	; 0
    16dc:	d1 40       	sbci	r29, 0x01	; 1
    16de:	0c 92       	st	X, r0
    16e0:	c0 50       	subi	r28, 0x00	; 0
    16e2:	df 4f       	sbci	r29, 0xFF	; 255
    16e4:	e8 81       	ld	r30, Y
    16e6:	f9 81       	ldd	r31, Y+1	; 0x01
    16e8:	c0 50       	subi	r28, 0x00	; 0
    16ea:	d1 40       	sbci	r29, 0x01	; 1
    16ec:	31 96       	adiw	r30, 0x01	; 1
    16ee:	c0 50       	subi	r28, 0x00	; 0
    16f0:	df 4f       	sbci	r29, 0xFF	; 255
    16f2:	f9 83       	std	Y+1, r31	; 0x01
    16f4:	e8 83       	st	Y, r30
    16f6:	c0 50       	subi	r28, 0x00	; 0
    16f8:	d1 40       	sbci	r29, 0x01	; 1
    16fa:	cc 5f       	subi	r28, 0xFC	; 252
    16fc:	de 4f       	sbci	r29, 0xFE	; 254
    16fe:	f8 81       	ld	r31, Y
    1700:	c4 50       	subi	r28, 0x04	; 4
    1702:	d1 40       	sbci	r29, 0x01	; 1
    1704:	f1 50       	subi	r31, 0x01	; 1
    1706:	cc 5f       	subi	r28, 0xFC	; 252
    1708:	de 4f       	sbci	r29, 0xFE	; 254
    170a:	f8 83       	st	Y, r31
    170c:	c4 50       	subi	r28, 0x04	; 4
    170e:	d1 40       	sbci	r29, 0x01	; 1
    1710:	cc 5f       	subi	r28, 0xFC	; 252
    1712:	de 4f       	sbci	r29, 0xFE	; 254
    1714:	88 81       	ld	r24, Y
    1716:	c4 50       	subi	r28, 0x04	; 4
    1718:	d1 40       	sbci	r29, 0x01	; 1
    171a:	88 23       	and	r24, r24
    171c:	31 f6       	brne	.-116    	; 0x16aa <main+0x46>
    171e:	89 ef       	ldi	r24, 0xF9	; 249
    1720:	fe 01       	movw	r30, r28
    1722:	37 96       	adiw	r30, 0x07	; 7
    1724:	df 01       	movw	r26, r30
    1726:	98 2f       	mov	r25, r24
    1728:	1d 92       	st	X+, r1
    172a:	9a 95       	dec	r25
    172c:	e9 f7       	brne	.-6      	; 0x1728 <main+0xc4>
	while (1) {
		APP_Start(chararr);
    172e:	ce 01       	movw	r24, r28
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	0e 94 1a 0b 	call	0x1634	; 0x1634 <APP_Start>
    1736:	fb cf       	rjmp	.-10     	; 0x172e <main+0xca>

00001738 <_exit>:
    1738:	f8 94       	cli

0000173a <__stop_program>:
    173a:	ff cf       	rjmp	.-2      	; 0x173a <__stop_program>
