
DesignImplementDriverForSPI_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a42  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  00001ab6  2**0
                  ALLOC
  2 .stab         000025ec  00000000  00000000  00001ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c08  00000000  00000000  000040a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__vector_12>
      34:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_13>
      38:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_14>
      3c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_15>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <main>
      74:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_Init>:
void static (*UART_TX_Complete_callback)(void)=NULL;
void __vector_13(void)__attribute__((signal,used));//RX_complete
void __vector_14(void)__attribute__((signal,used));//UDRE Empty
void __vector_15(void)__attribute__((signal,used));//TX_complete

uint8_t UART_Init(uint8_t UartNumber) {
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <UART_Init+0x6>
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
      86:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
      88:	8f ef       	ldi	r24, 0xFF	; 255
      8a:	89 83       	std	Y+1, r24	; 0x01
	if (UartNumber > NumOfUARTChannels) {
      8c:	8a 81       	ldd	r24, Y+2	; 0x02
      8e:	82 30       	cpi	r24, 0x02	; 2
      90:	18 f0       	brcs	.+6      	; 0x98 <UART_Init+0x1c>
		//error uart channel out of range
		ErrRetVal = Unavailable_UART_Channel;
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	89 83       	std	Y+1, r24	; 0x01
      96:	67 c0       	rjmp	.+206    	; 0x166 <UART_Init+0xea>
	} else {
		/* configure control and status register A
		 * (double transmission speed & Multi-processor communication mode) */
		MODIFY_REG(UART_ControlStatusRegA, UART_DoubleTransmissionSpeed_MSK,
      98:	ab e2       	ldi	r26, 0x2B	; 43
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	eb e2       	ldi	r30, 0x2B	; 43
      9e:	f0 e0       	ldi	r31, 0x00	; 0
      a0:	80 81       	ld	r24, Z
      a2:	82 60       	ori	r24, 0x02	; 2
      a4:	8c 93       	st	X, r24
				DoubleSpeedTransmission<<UART_DoubleTransmissionSpeed_BIT);
		MODIFY_REG(UART_ControlStatusRegA,
      a6:	ab e2       	ldi	r26, 0x2B	; 43
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	eb e2       	ldi	r30, 0x2B	; 43
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	8e 7f       	andi	r24, 0xFE	; 254
      b2:	8c 93       	st	X, r24
				UART_MultiProcessorCommunicationMode_MSK,
				MultiProcessCommunicationMode<<UART_MultiProcessorCommunicationMode_BIT);

		/* Setting Uart Data Size */
		MODIFY_REG(UART_ControlStatusRegB, UART_CharacterSizeBit_2_MSK,
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	ea e2       	ldi	r30, 0x2A	; 42
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	8b 7f       	andi	r24, 0xFB	; 251
      c0:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,2)<<UART_CharacterSizeBit_2_BIT);
		SET_BIT(UART_ControlStatusRegC, UART_RegisterSelect_BIT);
      c2:	a0 e4       	ldi	r26, 0x40	; 64
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	e0 e4       	ldi	r30, 0x40	; 64
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	80 68       	ori	r24, 0x80	; 128
      ce:	8c 93       	st	X, r24
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_1_MSK,
      d0:	a0 e4       	ldi	r26, 0x40	; 64
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e0 e4       	ldi	r30, 0x40	; 64
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	84 60       	ori	r24, 0x04	; 4
      dc:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,1)<<UART_CharacterSizeBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_0_MSK,
      de:	a0 e4       	ldi	r26, 0x40	; 64
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e0 e4       	ldi	r30, 0x40	; 64
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	82 60       	ori	r24, 0x02	; 2
      ea:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,0)<<UART_CharacterSizeBit_0_BIT);

		/* setting Stop Bit */
		MODIFY_REG(UART_ControlStatusRegC, UART_StopBitSelect_MSK,
      ec:	a0 e4       	ldi	r26, 0x40	; 64
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	e0 e4       	ldi	r30, 0x40	; 64
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	87 7f       	andi	r24, 0xF7	; 247
      f8:	8c 93       	st	X, r24
				StopBitMode<<UART_StopBitSelect_BIT);

		/* Setting Parity mode */
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_1_MSK,
      fa:	a0 e4       	ldi	r26, 0x40	; 64
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	e0 e4       	ldi	r30, 0x40	; 64
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	8f 7d       	andi	r24, 0xDF	; 223
     106:	8c 93       	st	X, r24
				READ_BIT(ParityMode,1)<<UART_ParityModeSelectBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_0_MSK,
     108:	a0 e4       	ldi	r26, 0x40	; 64
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	e0 e4       	ldi	r30, 0x40	; 64
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	8c 93       	st	X, r24
				READ_BIT(ParityMode,0)<<UART_ParityModeSelectBit_0_BIT);
		/* Setting communication mode (synch. or Asynch.)*/
		MODIFY_REG(UART_ControlStatusRegC, UART_SynchAsynchModeSelect_MSK,
     116:	a0 e4       	ldi	r26, 0x40	; 64
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	e0 e4       	ldi	r30, 0x40	; 64
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8f 7b       	andi	r24, 0xBF	; 191
     122:	8c 93       	st	X, r24
				CommunicationMode<<UART_SynchAsynchModeSelect_BIT);

		/*Set Clock Poalrity*/
		// ignored as all our work is asynchronus communication mode.
		/*Set the value of baud rate register*/
		CLEAR_BIT(UART_BaudRateRegH,UART_RegisterSelect_BIT);
     124:	a0 e4       	ldi	r26, 0x40	; 64
     126:	b0 e0       	ldi	r27, 0x00	; 0
     128:	e0 e4       	ldi	r30, 0x40	; 64
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	8f 77       	andi	r24, 0x7F	; 127
     130:	8c 93       	st	X, r24
		MODIFY_REG(UART_BaudRateRegH, UART_BaudRateRegH_MSK, (BaudCalc(BaudRate)>>8)&0x0F);
     132:	a0 e4       	ldi	r26, 0x40	; 64
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e0 e4       	ldi	r30, 0x40	; 64
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 7f       	andi	r24, 0xF0	; 240
     13e:	8c 93       	st	X, r24
		WRITE_REG(UART_BaudRateRegL,BaudCalc(BaudRate)&0xFF);
     140:	e9 e2       	ldi	r30, 0x29	; 41
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	87 e6       	ldi	r24, 0x67	; 103
     146:	80 83       	st	Z, r24

		/* Enabling receiving and transmitting*/
		MODIFY_REG(UART_ControlStatusRegB, UART_ReceiveEnable_MSK,
     148:	aa e2       	ldi	r26, 0x2A	; 42
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	ea e2       	ldi	r30, 0x2A	; 42
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 61       	ori	r24, 0x10	; 16
     154:	8c 93       	st	X, r24
				UART_ReceiveEnable_MSK);
		MODIFY_REG(UART_ControlStatusRegB, UART_TransmissionEnable_MSK,
     156:	aa e2       	ldi	r26, 0x2A	; 42
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	ea e2       	ldi	r30, 0x2A	; 42
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	88 60       	ori	r24, 0x08	; 8
     162:	8c 93       	st	X, r24
				UART_TransmissionEnable_MSK);
		ErrRetVal = OperationSuccess;
     164:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrRetVal;
     166:	89 81       	ldd	r24, Y+1	; 0x01
}
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	08 95       	ret

00000172 <UART_FlushReceiveBuffer>:
uint8_t UART_FlushReceiveBuffer(void) {
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	00 d0       	rcall	.+0      	; 0x178 <UART_FlushReceiveBuffer+0x6>
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flushedCharacter;
	flushedCharacter = UART_DataReg;
     180:	ec e2       	ldi	r30, 0x2C	; 44
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = OperationSuccess;
     188:	1a 82       	std	Y+2, r1	; 0x02
	return ErrRetVal;
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	cf 91       	pop	r28
     192:	df 91       	pop	r29
     194:	08 95       	ret

00000196 <UART_TransmitChar>:

uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	00 d0       	rcall	.+0      	; 0x19c <UART_TransmitChar+0x6>
     19c:	0f 92       	push	r0
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	8a 83       	std	Y+2, r24	; 0x02
     1a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA, 5)) {
     1aa:	eb e2       	ldi	r30, 0x2B	; 43
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	88 2f       	mov	r24, r24
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	80 72       	andi	r24, 0x20	; 32
     1b6:	90 70       	andi	r25, 0x00	; 0
     1b8:	95 95       	asr	r25
     1ba:	87 95       	ror	r24
     1bc:	95 95       	asr	r25
     1be:	87 95       	ror	r24
     1c0:	95 95       	asr	r25
     1c2:	87 95       	ror	r24
     1c4:	95 95       	asr	r25
     1c6:	87 95       	ror	r24
     1c8:	95 95       	asr	r25
     1ca:	87 95       	ror	r24
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	31 f0       	breq	.+12     	; 0x1dc <UART_TransmitChar+0x46>
		UART_DataReg= TxChar;
     1d0:	ec e2       	ldi	r30, 0x2C	; 44
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     1d8:	19 82       	std	Y+1, r1	; 0x01
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <UART_TransmitChar+0x4a>
	}
	else
	{
		ErrRetVal = Transmission_Fail;
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <UART_ReceiveChar+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <UART_ReceiveChar+0x8>
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	8a 83       	std	Y+2, r24	; 0x02
     1fc:	7c 83       	std	Y+4, r23	; 0x04
     1fe:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA,7) == 1) {
     204:	eb e2       	ldi	r30, 0x2B	; 43
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 1f       	adc	r24, r24
     20c:	88 27       	eor	r24, r24
     20e:	88 1f       	adc	r24, r24
     210:	88 2f       	mov	r24, r24
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	90 70       	andi	r25, 0x00	; 0
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	91 05       	cpc	r25, r1
     21a:	41 f4       	brne	.+16     	; 0x22c <UART_ReceiveChar+0x3e>
		*RxChar = UART_DataReg;
     21c:	ec e2       	ldi	r30, 0x2C	; 44
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	eb 81       	ldd	r30, Y+3	; 0x03
     224:	fc 81       	ldd	r31, Y+4	; 0x04
     226:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     228:	19 82       	std	Y+1, r1	; 0x01
     22a:	02 c0       	rjmp	.+4      	; 0x230 <UART_ReceiveChar+0x42>
	}
	else
	{
		ErrRetVal = Receiving_Fail;
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     230:	89 81       	ldd	r24, Y+1	; 0x01
}
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	08 95       	ret

00000240 <UART_TransmitString>:

uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString)
{
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	00 d0       	rcall	.+0      	; 0x246 <UART_TransmitString+0x6>
     246:	00 d0       	rcall	.+0      	; 0x248 <UART_TransmitString+0x8>
     248:	0f 92       	push	r0
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	8b 83       	std	Y+3, r24	; 0x03
     250:	7d 83       	std	Y+5, r23	; 0x05
     252:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     258:	19 82       	std	Y+1, r1	; 0x01
	while(iterator <= 255)
	{
		if(*TxString=='\0')
     25a:	ec 81       	ldd	r30, Y+4	; 0x04
     25c:	fd 81       	ldd	r31, Y+5	; 0x05
     25e:	80 81       	ld	r24, Z
     260:	88 23       	and	r24, r24
     262:	81 f4       	brne	.+32     	; 0x284 <UART_TransmitString+0x44>
		{
			ErrRetVal=OperationSuccess;
     264:	1a 82       	std	Y+2, r1	; 0x02
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	6d e0       	ldi	r22, 0x0D	; 13
     26a:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitChar>
     26e:	88 23       	and	r24, r24
     270:	d1 f7       	brne	.-12     	; 0x266 <UART_TransmitString+0x26>
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
			iterator++;
			TxString++;
		}
	}
	return ErrRetVal;
     272:	8a 81       	ldd	r24, Y+2	; 0x02
}
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	cf 91       	pop	r28
     280:	df 91       	pop	r29
     282:	08 95       	ret
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
			break;
		}
		else
		{
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
     284:	ec 81       	ldd	r30, Y+4	; 0x04
     286:	fd 81       	ldd	r31, Y+5	; 0x05
     288:	90 81       	ld	r25, Z
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	69 2f       	mov	r22, r25
     28e:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitChar>
     292:	88 23       	and	r24, r24
     294:	b9 f7       	brne	.-18     	; 0x284 <UART_TransmitString+0x44>
			iterator++;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	8f 5f       	subi	r24, 0xFF	; 255
     29a:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
     29c:	8c 81       	ldd	r24, Y+4	; 0x04
     29e:	9d 81       	ldd	r25, Y+5	; 0x05
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	9d 83       	std	Y+5, r25	; 0x05
     2a4:	8c 83       	std	Y+4, r24	; 0x04
     2a6:	d9 cf       	rjmp	.-78     	; 0x25a <UART_TransmitString+0x1a>

000002a8 <UART_ReceiveString>:
		}
	}
	return ErrRetVal;
}
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <UART_ReceiveString+0x6>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <UART_ReceiveString+0x8>
     2b0:	0f 92       	push	r0
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	8b 83       	std	Y+3, r24	; 0x03
     2b8:	7d 83       	std	Y+5, r23	; 0x05
     2ba:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     2bc:	8f ef       	ldi	r24, 0xFF	; 255
     2be:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     2c0:	19 82       	std	Y+1, r1	; 0x01
	while(iterator<=255)
	{
		if(UART_ReceiveChar(UartNumber,RxString)==OperationSuccess)
     2c2:	2c 81       	ldd	r18, Y+4	; 0x04
     2c4:	3d 81       	ldd	r19, Y+5	; 0x05
     2c6:	8b 81       	ldd	r24, Y+3	; 0x03
     2c8:	b9 01       	movw	r22, r18
     2ca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART_ReceiveChar>
     2ce:	88 23       	and	r24, r24
     2d0:	c1 f7       	brne	.-16     	; 0x2c2 <UART_ReceiveString+0x1a>
		{
			if(*RxString == '\r' || *RxString == '\n')
     2d2:	ec 81       	ldd	r30, Y+4	; 0x04
     2d4:	fd 81       	ldd	r31, Y+5	; 0x05
     2d6:	80 81       	ld	r24, Z
     2d8:	8d 30       	cpi	r24, 0x0D	; 13
     2da:	29 f0       	breq	.+10     	; 0x2e6 <UART_ReceiveString+0x3e>
     2dc:	ec 81       	ldd	r30, Y+4	; 0x04
     2de:	fd 81       	ldd	r31, Y+5	; 0x05
     2e0:	80 81       	ld	r24, Z
     2e2:	8a 30       	cpi	r24, 0x0A	; 10
     2e4:	69 f4       	brne	.+26     	; 0x300 <UART_ReceiveString+0x58>
			{
				*RxString='\0';
     2e6:	ec 81       	ldd	r30, Y+4	; 0x04
     2e8:	fd 81       	ldd	r31, Y+5	; 0x05
     2ea:	10 82       	st	Z, r1
				ErrRetVal = OperationSuccess;
     2ec:	1a 82       	std	Y+2, r1	; 0x02
		else
		{
			continue;
		}
	}
	return ErrRetVal;
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	cf 91       	pop	r28
     2fc:	df 91       	pop	r29
     2fe:	08 95       	ret
				ErrRetVal = OperationSuccess;
				break;
			}
			else
			{
			RxString++;
     300:	8c 81       	ldd	r24, Y+4	; 0x04
     302:	9d 81       	ldd	r25, Y+5	; 0x05
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	9d 83       	std	Y+5, r25	; 0x05
     308:	8c 83       	std	Y+4, r24	; 0x04
			iterator++;
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	89 83       	std	Y+1, r24	; 0x01
     310:	d8 cf       	rjmp	.-80     	; 0x2c2 <UART_ReceiveString+0x1a>

00000312 <UART_EnableInterrupt>:
		}
	}
	return ErrRetVal;
}

uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	00 d0       	rcall	.+0      	; 0x318 <UART_EnableInterrupt+0x6>
     318:	00 d0       	rcall	.+0      	; 0x31a <UART_EnableInterrupt+0x8>
     31a:	0f 92       	push	r0
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	8a 83       	std	Y+2, r24	; 0x02
     322:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
     328:	af e5       	ldi	r26, 0x5F	; 95
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	ef e5       	ldi	r30, 0x5F	; 95
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	80 68       	ori	r24, 0x80	; 128
     334:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	83 30       	cpi	r24, 0x03	; 3
     33a:	88 f5       	brcc	.+98     	; 0x39e <UART_EnableInterrupt+0x8c>
	{
		switch (UartInterruptType)
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	28 2f       	mov	r18, r24
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	3d 83       	std	Y+5, r19	; 0x05
     344:	2c 83       	std	Y+4, r18	; 0x04
     346:	8c 81       	ldd	r24, Y+4	; 0x04
     348:	9d 81       	ldd	r25, Y+5	; 0x05
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	91 05       	cpc	r25, r1
     34e:	91 f0       	breq	.+36     	; 0x374 <UART_EnableInterrupt+0x62>
     350:	2c 81       	ldd	r18, Y+4	; 0x04
     352:	3d 81       	ldd	r19, Y+5	; 0x05
     354:	22 30       	cpi	r18, 0x02	; 2
     356:	31 05       	cpc	r19, r1
     358:	b1 f0       	breq	.+44     	; 0x386 <UART_EnableInterrupt+0x74>
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	9d 81       	ldd	r25, Y+5	; 0x05
     35e:	00 97       	sbiw	r24, 0x00	; 0
     360:	d9 f4       	brne	.+54     	; 0x398 <UART_EnableInterrupt+0x86>
		{
		case RxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     362:	aa e2       	ldi	r26, 0x2A	; 42
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	ea e2       	ldi	r30, 0x2A	; 42
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_MSK,
					UART_ReceiveCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     370:	19 82       	std	Y+1, r1	; 0x01
     372:	17 c0       	rjmp	.+46     	; 0x3a2 <UART_EnableInterrupt+0x90>
			break;
		case DataBufferEmptyInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     374:	aa e2       	ldi	r26, 0x2A	; 42
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	ea e2       	ldi	r30, 0x2A	; 42
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	80 62       	ori	r24, 0x20	; 32
     380:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_MSK,
					UART_DataRegisterEmptyInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     382:	19 82       	std	Y+1, r1	; 0x01
     384:	0e c0       	rjmp	.+28     	; 0x3a2 <UART_EnableInterrupt+0x90>
			break;
		case TxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     386:	aa e2       	ldi	r26, 0x2A	; 42
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	ea e2       	ldi	r30, 0x2A	; 42
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	80 64       	ori	r24, 0x40	; 64
     392:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_MSK,
					UART_TransmissionCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     394:	19 82       	std	Y+1, r1	; 0x01
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <UART_EnableInterrupt+0x90>
			break;
		default:
			ErrRetVal = Interrupt_Enabling_Fail;
     398:	89 e0       	ldi	r24, 0x09	; 9
     39a:	89 83       	std	Y+1, r24	; 0x01
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <UART_EnableInterrupt+0x90>
		}
	}
	else
	{
		ErrRetVal = Interrupt_Enabling_Fail;
     39e:	89 e0       	ldi	r24, 0x09	; 9
     3a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <UART_DisableInterrupt+0x6>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <UART_DisableInterrupt+0x8>
     3bc:	0f 92       	push	r0
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	8a 83       	std	Y+2, r24	; 0x02
     3c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     3ca:	8b 81       	ldd	r24, Y+3	; 0x03
     3cc:	83 30       	cpi	r24, 0x03	; 3
     3ce:	88 f5       	brcc	.+98     	; 0x432 <UART_DisableInterrupt+0x7e>
		{
			switch (UartInterruptType)
     3d0:	8b 81       	ldd	r24, Y+3	; 0x03
     3d2:	28 2f       	mov	r18, r24
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	3d 83       	std	Y+5, r19	; 0x05
     3d8:	2c 83       	std	Y+4, r18	; 0x04
     3da:	8c 81       	ldd	r24, Y+4	; 0x04
     3dc:	9d 81       	ldd	r25, Y+5	; 0x05
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	91 05       	cpc	r25, r1
     3e2:	91 f0       	breq	.+36     	; 0x408 <UART_DisableInterrupt+0x54>
     3e4:	2c 81       	ldd	r18, Y+4	; 0x04
     3e6:	3d 81       	ldd	r19, Y+5	; 0x05
     3e8:	22 30       	cpi	r18, 0x02	; 2
     3ea:	31 05       	cpc	r19, r1
     3ec:	b1 f0       	breq	.+44     	; 0x41a <UART_DisableInterrupt+0x66>
     3ee:	8c 81       	ldd	r24, Y+4	; 0x04
     3f0:	9d 81       	ldd	r25, Y+5	; 0x05
     3f2:	00 97       	sbiw	r24, 0x00	; 0
     3f4:	d9 f4       	brne	.+54     	; 0x42c <UART_DisableInterrupt+0x78>
			{
			case RxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     3f6:	aa e2       	ldi	r26, 0x2A	; 42
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	ea e2       	ldi	r30, 0x2A	; 42
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	8f 77       	andi	r24, 0x7F	; 127
     402:	8c 93       	st	X, r24
						UART_ReceiveCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     404:	19 82       	std	Y+1, r1	; 0x01
     406:	17 c0       	rjmp	.+46     	; 0x436 <UART_DisableInterrupt+0x82>
				break;
			case DataBufferEmptyInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     408:	aa e2       	ldi	r26, 0x2A	; 42
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	ea e2       	ldi	r30, 0x2A	; 42
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	8f 7d       	andi	r24, 0xDF	; 223
     414:	8c 93       	st	X, r24
						UART_DataRegisterEmptyInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     416:	19 82       	std	Y+1, r1	; 0x01
     418:	0e c0       	rjmp	.+28     	; 0x436 <UART_DisableInterrupt+0x82>
				break;
			case TxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     41a:	aa e2       	ldi	r26, 0x2A	; 42
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	ea e2       	ldi	r30, 0x2A	; 42
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	8f 7b       	andi	r24, 0xBF	; 191
     426:	8c 93       	st	X, r24
						UART_TransmissionCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     428:	19 82       	std	Y+1, r1	; 0x01
     42a:	05 c0       	rjmp	.+10     	; 0x436 <UART_DisableInterrupt+0x82>
				break;
			default:
				ErrRetVal = Interrupt_Disabling_Fail;
     42c:	88 e0       	ldi	r24, 0x08	; 8
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	02 c0       	rjmp	.+4      	; 0x436 <UART_DisableInterrupt+0x82>
			}
		}
		else
		{
			ErrRetVal = Interrupt_Disabling_Fail;
     432:	88 e0       	ldi	r24, 0x08	; 8
     434:	89 83       	std	Y+1, r24	; 0x01
		}
	return ErrRetVal;
     436:	89 81       	ldd	r24, Y+1	; 0x01
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <UART_Set_RX_CompleteCallback>:
uint8_t UART_Set_RX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	00 d0       	rcall	.+0      	; 0x44e <UART_Set_RX_CompleteCallback+0x6>
     44e:	00 d0       	rcall	.+0      	; 0x450 <UART_Set_RX_CompleteCallback+0x8>
     450:	0f 92       	push	r0
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	8a 83       	std	Y+2, r24	; 0x02
     458:	6b 83       	std	Y+3, r22	; 0x03
     45a:	5d 83       	std	Y+5, r21	; 0x05
     45c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     45e:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	9d 81       	ldd	r25, Y+5	; 0x05
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	31 f0       	breq	.+12     	; 0x474 <UART_Set_RX_CompleteCallback+0x2c>
		UART_RX_Complete_callback = callBack;
     468:	8c 81       	ldd	r24, Y+4	; 0x04
     46a:	9d 81       	ldd	r25, Y+5	; 0x05
     46c:	90 93 61 00 	sts	0x0061, r25
     470:	80 93 60 00 	sts	0x0060, r24
	return ErrRetVal;
     474:	89 81       	ldd	r24, Y+1	; 0x01
}
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <UART_UDRE_Empty_CompleteCallback>:
uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <UART_UDRE_Empty_CompleteCallback+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <UART_UDRE_Empty_CompleteCallback+0x8>
     48e:	0f 92       	push	r0
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	8a 83       	std	Y+2, r24	; 0x02
     496:	6b 83       	std	Y+3, r22	; 0x03
     498:	5d 83       	std	Y+5, r21	; 0x05
     49a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     49c:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     49e:	8c 81       	ldd	r24, Y+4	; 0x04
     4a0:	9d 81       	ldd	r25, Y+5	; 0x05
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	31 f0       	breq	.+12     	; 0x4b2 <UART_UDRE_Empty_CompleteCallback+0x2c>
		UART_UDRE_Empty_callback = callBack;
     4a6:	8c 81       	ldd	r24, Y+4	; 0x04
     4a8:	9d 81       	ldd	r25, Y+5	; 0x05
     4aa:	90 93 63 00 	sts	0x0063, r25
     4ae:	80 93 62 00 	sts	0x0062, r24
	return ErrRetVal;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <UART_Set_TX_CompleteCallback>:
uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <UART_Set_TX_CompleteCallback+0x6>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <UART_Set_TX_CompleteCallback+0x8>
     4cc:	0f 92       	push	r0
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	8a 83       	std	Y+2, r24	; 0x02
     4d4:	6b 83       	std	Y+3, r22	; 0x03
     4d6:	5d 83       	std	Y+5, r21	; 0x05
     4d8:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4da:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4dc:	8c 81       	ldd	r24, Y+4	; 0x04
     4de:	9d 81       	ldd	r25, Y+5	; 0x05
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	31 f0       	breq	.+12     	; 0x4f0 <UART_Set_TX_CompleteCallback+0x2c>
		UART_TX_Complete_callback = callBack;
     4e4:	8c 81       	ldd	r24, Y+4	; 0x04
     4e6:	9d 81       	ldd	r25, Y+5	; 0x05
     4e8:	90 93 65 00 	sts	0x0065, r25
     4ec:	80 93 64 00 	sts	0x0064, r24
	return ErrRetVal;
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	cf 91       	pop	r28
     4fe:	df 91       	pop	r29
     500:	08 95       	ret

00000502 <__vector_13>:
void __vector_13(void)
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	2f 93       	push	r18
     50e:	3f 93       	push	r19
     510:	4f 93       	push	r20
     512:	5f 93       	push	r21
     514:	6f 93       	push	r22
     516:	7f 93       	push	r23
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	af 93       	push	r26
     51e:	bf 93       	push	r27
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31
     524:	df 93       	push	r29
     526:	cf 93       	push	r28
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Complete_callback != NULL)
     52c:	80 91 60 00 	lds	r24, 0x0060
     530:	90 91 61 00 	lds	r25, 0x0061
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	29 f0       	breq	.+10     	; 0x542 <__vector_13+0x40>
		UART_RX_Complete_callback();
     538:	e0 91 60 00 	lds	r30, 0x0060
     53c:	f0 91 61 00 	lds	r31, 0x0061
     540:	09 95       	icall
}
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0f be       	out	0x3f, r0	; 63
     562:	0f 90       	pop	r0
     564:	1f 90       	pop	r1
     566:	18 95       	reti

00000568 <__vector_14>:
void __vector_14(void)
{
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	if (UART_UDRE_Empty_callback != NULL)
     592:	80 91 62 00 	lds	r24, 0x0062
     596:	90 91 63 00 	lds	r25, 0x0063
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	29 f0       	breq	.+10     	; 0x5a8 <__vector_14+0x40>
		UART_UDRE_Empty_callback();
     59e:	e0 91 62 00 	lds	r30, 0x0062
     5a2:	f0 91 63 00 	lds	r31, 0x0063
     5a6:	09 95       	icall
}
     5a8:	cf 91       	pop	r28
     5aa:	df 91       	pop	r29
     5ac:	ff 91       	pop	r31
     5ae:	ef 91       	pop	r30
     5b0:	bf 91       	pop	r27
     5b2:	af 91       	pop	r26
     5b4:	9f 91       	pop	r25
     5b6:	8f 91       	pop	r24
     5b8:	7f 91       	pop	r23
     5ba:	6f 91       	pop	r22
     5bc:	5f 91       	pop	r21
     5be:	4f 91       	pop	r20
     5c0:	3f 91       	pop	r19
     5c2:	2f 91       	pop	r18
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <__vector_15>:
void __vector_15(void)
{
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	2f 93       	push	r18
     5da:	3f 93       	push	r19
     5dc:	4f 93       	push	r20
     5de:	5f 93       	push	r21
     5e0:	6f 93       	push	r22
     5e2:	7f 93       	push	r23
     5e4:	8f 93       	push	r24
     5e6:	9f 93       	push	r25
     5e8:	af 93       	push	r26
     5ea:	bf 93       	push	r27
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Complete_callback != NULL)
     5f8:	80 91 64 00 	lds	r24, 0x0064
     5fc:	90 91 65 00 	lds	r25, 0x0065
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	29 f0       	breq	.+10     	; 0x60e <__vector_15+0x40>
		UART_TX_Complete_callback();
     604:	e0 91 64 00 	lds	r30, 0x0064
     608:	f0 91 65 00 	lds	r31, 0x0065
     60c:	09 95       	icall
}
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <SPI_Init>:

void static (*SPI_TX_Complete_callback)(void)=NULL;

void __vector_12(void)__attribute__((signal,used));//TX_complete

uint8_t SPI_Init(uint8_t SpiNumber) {
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	00 d0       	rcall	.+0      	; 0x63a <SPI_Init+0x6>
     63a:	0f 92       	push	r0
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Dummy = 0;
     646:	19 82       	std	Y+1, r1	; 0x01
	if (SpiNumber <= NumOfSPIChannels) {
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	08 f0       	brcs	.+2      	; 0x650 <SPI_Init+0x1c>
     64e:	6c c0       	rjmp	.+216    	; 0x728 <SPI_Init+0xf4>
		WRITE_REG(SPI_ControlReg, ResgisterDefaultVal);
     650:	ed e2       	ldi	r30, 0x2D	; 45
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	10 82       	st	Z, r1
		switch (SPI_Mode) {
		case Master:
			/*SPI Master Mode*/
			MODIFY_REG(SPI_ControlReg, MasterSlaveModeSelect_MSK,
     656:	ad e2       	ldi	r26, 0x2D	; 45
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	ed e2       	ldi	r30, 0x2D	; 45
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	80 61       	ori	r24, 0x10	; 16
     662:	8c 93       	st	X, r24
					Master<<MasterSlaveModeSelect_BIT);
			/*SPI PIN Initialization*/
			DIO_PinInit(SPI_PORT, SPI_SS_PIN, PIN_OUTPUT);
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	64 e0       	ldi	r22, 0x04	; 4
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_PinInit>
			DIO_SetPinVal(SPI_PORT, SPI_SS_PIN,PIN_HIGH);
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	64 e0       	ldi	r22, 0x04	; 4
     672:	41 e0       	ldi	r20, 0x01	; 1
     674:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPinVal>
			DIO_PinInit(SPI_PORT, SPI_SCK_PIN, PIN_OUTPUT);
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	67 e0       	ldi	r22, 0x07	; 7
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_PinInit>
			DIO_PinInit(SPI_PORT, SPI_MOSI_PIN, PIN_OUTPUT);
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	65 e0       	ldi	r22, 0x05	; 5
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_PinInit>
			/*selecting the clock mode*/
			MODIFY_REG(SPI_ControlReg, ClockPhase_MSK,
     68c:	ad e2       	ldi	r26, 0x2D	; 45
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	ed e2       	ldi	r30, 0x2D	; 45
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	84 60       	ori	r24, 0x04	; 4
     698:	8c 93       	st	X, r24
					READ_BIT(SPI_ClockMode,0)<<ClockPhase_BIT);
			MODIFY_REG(SPI_ControlReg, ClockPolarity_MSK,
     69a:	ad e2       	ldi	r26, 0x2D	; 45
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	ed e2       	ldi	r30, 0x2D	; 45
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	87 7f       	andi	r24, 0xF7	; 247
     6a6:	8c 93       	st	X, r24
					READ_BIT(SPI_ClockMode,1)<<ClockPolarity_BIT);
			/*Setting the Data Order*/
			MODIFY_REG(SPI_ControlReg, DataOrder_MSK,
     6a8:	ad e2       	ldi	r26, 0x2D	; 45
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	ed e2       	ldi	r30, 0x2D	; 45
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	8f 7d       	andi	r24, 0xDF	; 223
     6b4:	8c 93       	st	X, r24
					SPI_DataOrder<<DataOrder_BIT);
			/*Set SPI Clock Frequency*/
			MODIFY_REG(SPI_StatusReg, ClockSelectBit_2_MSK,
     6b6:	ae e2       	ldi	r26, 0x2E	; 46
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	ee e2       	ldi	r30, 0x2E	; 46
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	80 81       	ld	r24, Z
     6c0:	81 60       	ori	r24, 0x01	; 1
     6c2:	8c 93       	st	X, r24
					READ_BIT(SPI_Freq,2)<<ClockSelectBit_2_BIT);
			MODIFY_REG(SPI_ControlReg, ClockSelectBit_1_MSK,
     6c4:	ad e2       	ldi	r26, 0x2D	; 45
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	ed e2       	ldi	r30, 0x2D	; 45
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	82 60       	ori	r24, 0x02	; 2
     6d0:	8c 93       	st	X, r24
					READ_BIT(SPI_Freq,1)<<ClockSelectBit_1_BIT);
			MODIFY_REG(SPI_ControlReg, ClockSelectBit_0_MSK,
     6d2:	ad e2       	ldi	r26, 0x2D	; 45
     6d4:	b0 e0       	ldi	r27, 0x00	; 0
     6d6:	ed e2       	ldi	r30, 0x2D	; 45
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	80 81       	ld	r24, Z
     6dc:	8e 7f       	andi	r24, 0xFE	; 254
     6de:	8c 93       	st	X, r24
					READ_BIT(SPI_Freq,0)<<ClockSelectBit_0_BIT);
			/*clearing flags*/
			Dummy = READ_BIT(SPI_StatusReg,WriteCollisionFlag_BIT);
     6e0:	ee e2       	ldi	r30, 0x2E	; 46
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	88 2f       	mov	r24, r24
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	80 74       	andi	r24, 0x40	; 64
     6ec:	90 70       	andi	r25, 0x00	; 0
     6ee:	08 2e       	mov	r0, r24
     6f0:	89 2f       	mov	r24, r25
     6f2:	00 0c       	add	r0, r0
     6f4:	88 1f       	adc	r24, r24
     6f6:	99 0b       	sbc	r25, r25
     6f8:	00 0c       	add	r0, r0
     6fa:	88 1f       	adc	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	89 83       	std	Y+1, r24	; 0x01
			Dummy = READ_BIT(SPI_StatusReg,InterruptFlag_BIT);
     700:	ee e2       	ldi	r30, 0x2E	; 46
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	88 1f       	adc	r24, r24
     708:	88 27       	eor	r24, r24
     70a:	88 1f       	adc	r24, r24
     70c:	89 83       	std	Y+1, r24	; 0x01
			Dummy = READ_REG(SPI_DataReg);
     70e:	ef e2       	ldi	r30, 0x2F	; 47
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	89 83       	std	Y+1, r24	; 0x01
			/*enable SPI Module*/
			SET_BIT(SPI_ControlReg, SPIEnable_BIT);
     716:	ad e2       	ldi	r26, 0x2D	; 45
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	ed e2       	ldi	r30, 0x2D	; 45
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	80 64       	ori	r24, 0x40	; 64
     722:	8c 93       	st	X, r24
			ErrRetVal = OperationSuccess;
     724:	1a 82       	std	Y+2, r1	; 0x02
     726:	02 c0       	rjmp	.+4      	; 0x72c <SPI_Init+0xf8>
			/*error selected SPI mode is unavailable*/
			ErrRetVal = SelectedSPIModeUnavailable;
		}
	} else {
		/*error out of spi channels range.*/
		ErrRetVal = Unavailable_SPI_Channel;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ErrRetVal;
     72c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	08 95       	ret

0000073a <SPI_TransmitChar>:

uint8_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH) {
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	00 d0       	rcall	.+0      	; 0x740 <SPI_TransmitChar+0x6>
     740:	00 d0       	rcall	.+0      	; 0x742 <SPI_TransmitChar+0x8>
     742:	0f 92       	push	r0
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	6c 83       	std	Y+4, r22	; 0x04
     74c:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t ErrRetVal = OperationStarted;
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t dummy = 0;
     752:	19 82       	std	Y+1, r1	; 0x01
	switch (SPI_Mode) {
	case Master:
		if (slave_CH <= NumOfSPISlaves) {
     754:	8d 81       	ldd	r24, Y+5	; 0x05
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	18 f5       	brcc	.+70     	; 0x7a0 <SPI_TransmitChar+0x66>
			/*pulling slave select down*/
			DIO_SetPinVal(SlaveID_1_Port, SlaveID_1_Pin, PIN_LOW);
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	64 e0       	ldi	r22, 0x04	; 4
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPinVal>
			/*making data available in the shift register (transmitting start)*/
			WRITE_REG(SPI_DataReg, TxChar);
     764:	ef e2       	ldi	r30, 0x2F	; 47
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	8c 81       	ldd	r24, Y+4	; 0x04
     76a:	80 83       	st	Z, r24
			/*checking for write collision*/
			if (READ_BIT(SPI_StatusReg, WriteCollisionFlag_BIT)) {
     76c:	ee e2       	ldi	r30, 0x2E	; 46
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	80 74       	andi	r24, 0x40	; 64
     778:	90 70       	andi	r25, 0x00	; 0
     77a:	08 2e       	mov	r0, r24
     77c:	89 2f       	mov	r24, r25
     77e:	00 0c       	add	r0, r0
     780:	88 1f       	adc	r24, r24
     782:	99 0b       	sbc	r25, r25
     784:	00 0c       	add	r0, r0
     786:	88 1f       	adc	r24, r24
     788:	99 1f       	adc	r25, r25
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	39 f0       	breq	.+14     	; 0x79c <SPI_TransmitChar+0x62>
				ErrRetVal = WriteCollisionOccurs;
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	8a 83       	std	Y+2, r24	; 0x02
				dummy = READ_REG(SPI_DataReg);
     792:	ef e2       	ldi	r30, 0x2F	; 47
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <SPI_TransmitChar+0x6a>
				/*flag is cleared*/
			} else {
				ErrRetVal = OperationSuccess;
     79c:	1a 82       	std	Y+2, r1	; 0x02
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <SPI_TransmitChar+0x6a>
			}

		} else {
			ErrRetVal = Non_Existant_Slave;
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	8a 83       	std	Y+2, r24	; 0x02
		} else {
			ErrRetVal = OperationFail;
		}
		break;
	}
	return ErrRetVal;
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	08 95       	ret

000007b6 <SPI_ReceiveChar>:

uint8_t SPI_ReceiveChar(uint8_t SpiNumber, ptr_uint8_t RxData, uint8_t slave_CH) {
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <SPI_ReceiveChar+0x6>
     7bc:	00 d0       	rcall	.+0      	; 0x7be <SPI_ReceiveChar+0x8>
     7be:	0f 92       	push	r0
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	8a 83       	std	Y+2, r24	; 0x02
     7c6:	7c 83       	std	Y+4, r23	; 0x04
     7c8:	6b 83       	std	Y+3, r22	; 0x03
     7ca:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t ErrRetVal = OperationStarted;
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	89 83       	std	Y+1, r24	; 0x01
	switch (SPI_Mode) {
	case Master:
		if (slave_CH <= NumOfSPISlaves) {
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	d8 f4       	brcc	.+54     	; 0x80c <SPI_ReceiveChar+0x56>
			/*check that transmission is completed*/
			if ((READ_BIT(SPI_StatusReg, InterruptFlag_BIT))) {
     7d6:	ee e2       	ldi	r30, 0x2E	; 46
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	88 1f       	adc	r24, r24
     7de:	88 27       	eor	r24, r24
     7e0:	88 1f       	adc	r24, r24
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	90 70       	andi	r25, 0x00	; 0
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	69 f0       	breq	.+26     	; 0x806 <SPI_ReceiveChar+0x50>
				/*Read Data from data_register*/
				*RxData = SPI_DataReg;
     7ec:	ef e2       	ldi	r30, 0x2F	; 47
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	eb 81       	ldd	r30, Y+3	; 0x03
     7f4:	fc 81       	ldd	r31, Y+4	; 0x04
     7f6:	80 83       	st	Z, r24
				DIO_SetPinVal(SlaveID_1_Port, SlaveID_1_Pin, PIN_HIGH);
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	64 e0       	ldi	r22, 0x04	; 4
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_SetPinVal>
				ErrRetVal = OperationSuccess;
     802:	19 82       	std	Y+1, r1	; 0x01
     804:	05 c0       	rjmp	.+10     	; 0x810 <SPI_ReceiveChar+0x5a>
			} else {
				ErrRetVal = OperationFail;
     806:	85 e0       	ldi	r24, 0x05	; 5
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	02 c0       	rjmp	.+4      	; 0x810 <SPI_ReceiveChar+0x5a>
			}
		} else {
			/*error out of spi channels range.*/
			ErrRetVal = Unavailable_SPI_Channel;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	89 83       	std	Y+1, r24	; 0x01
		} else {
			ErrRetVal = OperationFail;
		}
		break;
	}
	return ErrRetVal;
     810:	89 81       	ldd	r24, Y+1	; 0x01
}
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	cf 91       	pop	r28
     81e:	df 91       	pop	r29
     820:	08 95       	ret

00000822 <SPI_DataExchange>:

uint8_t SPI_DataExchange (uint8_t SpiNumber, uint8_t TxChar, ptr_uint8_t RxData, uint8_t slave_CH)
{
     822:	df 93       	push	r29
     824:	cf 93       	push	r28
     826:	00 d0       	rcall	.+0      	; 0x828 <SPI_DataExchange+0x6>
     828:	00 d0       	rcall	.+0      	; 0x82a <SPI_DataExchange+0x8>
     82a:	00 d0       	rcall	.+0      	; 0x82c <SPI_DataExchange+0xa>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	8a 83       	std	Y+2, r24	; 0x02
     832:	6b 83       	std	Y+3, r22	; 0x03
     834:	5d 83       	std	Y+5, r21	; 0x05
     836:	4c 83       	std	Y+4, r20	; 0x04
     838:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t RETVAL = OperationStarted;
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	89 83       	std	Y+1, r24	; 0x01
	switch(SPI_Mode){
	case Master:
		SPI_TransmitChar(SPIChannel_1, TxChar, SlaveID_1);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	6b 81       	ldd	r22, Y+3	; 0x03
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_TransmitChar>
		while(SPI_ReceiveChar(SPIChannel_1, RxData, SlaveID_1) != OperationSuccess) ;
     848:	2c 81       	ldd	r18, Y+4	; 0x04
     84a:	3d 81       	ldd	r19, Y+5	; 0x05
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	b9 01       	movw	r22, r18
     850:	41 e0       	ldi	r20, 0x01	; 1
     852:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_ReceiveChar>
     856:	88 23       	and	r24, r24
     858:	b9 f7       	brne	.-18     	; 0x848 <SPI_DataExchange+0x26>
		RETVAL = OperationSuccess;
     85a:	19 82       	std	Y+1, r1	; 0x01
		while (SPI_TransmitChar(SPIChannel_1, TxChar, SlaveID_1) != OperationSuccess);
		while (SPI_ReceiveChar(SPIChannel_1, RxData, SlaveID_1)	!= OperationSuccess);
		RETVAL = OperationSuccess;
		break;
	}
	return RETVAL;
     85c:	89 81       	ldd	r24, Y+1	; 0x01
}
     85e:	26 96       	adiw	r28, 0x06	; 6
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	cf 91       	pop	r28
     86c:	df 91       	pop	r29
     86e:	08 95       	ret

00000870 <SPI_TransmitString>:

uint8_t SPI_TransmitString(uint8_t SpiNumber, ptr_uint8_t TxString,
		uint8_t slave_CH) {
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	27 97       	sbiw	r28, 0x07	; 7
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	8c 83       	std	Y+4, r24	; 0x04
     886:	7e 83       	std	Y+6, r23	; 0x06
     888:	6d 83       	std	Y+5, r22	; 0x05
     88a:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t ErrRetVal = OperationStarted;
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     890:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Dummy = 0;
     892:	1b 82       	std	Y+3, r1	; 0x03
	while(iterator <= 255)
	{
		if (*TxString == '\0') {
     894:	ed 81       	ldd	r30, Y+5	; 0x05
     896:	fe 81       	ldd	r31, Y+6	; 0x06
     898:	80 81       	ld	r24, Z
     89a:	88 23       	and	r24, r24
     89c:	b1 f4       	brne	.+44     	; 0x8ca <SPI_TransmitString+0x5a>
			ErrRetVal = OperationSuccess;
     89e:	1a 82       	std	Y+2, r1	; 0x02
			while (SPI_DataExchange(SpiNumber, '\0', &Dummy, slave_CH) != OperationSuccess);
     8a0:	9e 01       	movw	r18, r28
     8a2:	2d 5f       	subi	r18, 0xFD	; 253
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	8c 81       	ldd	r24, Y+4	; 0x04
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	a9 01       	movw	r20, r18
     8ac:	2f 81       	ldd	r18, Y+7	; 0x07
     8ae:	0e 94 11 04 	call	0x822	; 0x822 <SPI_DataExchange>
     8b2:	88 23       	and	r24, r24
     8b4:	a9 f7       	brne	.-22     	; 0x8a0 <SPI_TransmitString+0x30>
			while (SPI_DataExchange(SpiNumber, *TxString, &Dummy, slave_CH) != OperationSuccess);
			iterator++;
			TxString++;
		}
	}
return ErrRetVal;
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     8b8:	27 96       	adiw	r28, 0x07	; 7
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	cf 91       	pop	r28
     8c6:	df 91       	pop	r29
     8c8:	08 95       	ret
		if (*TxString == '\0') {
			ErrRetVal = OperationSuccess;
			while (SPI_DataExchange(SpiNumber, '\0', &Dummy, slave_CH) != OperationSuccess);
			break;
		} else {
			while (SPI_DataExchange(SpiNumber, *TxString, &Dummy, slave_CH) != OperationSuccess);
     8ca:	ed 81       	ldd	r30, Y+5	; 0x05
     8cc:	fe 81       	ldd	r31, Y+6	; 0x06
     8ce:	90 81       	ld	r25, Z
     8d0:	9e 01       	movw	r18, r28
     8d2:	2d 5f       	subi	r18, 0xFD	; 253
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	8c 81       	ldd	r24, Y+4	; 0x04
     8d8:	69 2f       	mov	r22, r25
     8da:	a9 01       	movw	r20, r18
     8dc:	2f 81       	ldd	r18, Y+7	; 0x07
     8de:	0e 94 11 04 	call	0x822	; 0x822 <SPI_DataExchange>
     8e2:	88 23       	and	r24, r24
     8e4:	91 f7       	brne	.-28     	; 0x8ca <SPI_TransmitString+0x5a>
			iterator++;
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	8f 5f       	subi	r24, 0xFF	; 255
     8ea:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
     8ec:	8d 81       	ldd	r24, Y+5	; 0x05
     8ee:	9e 81       	ldd	r25, Y+6	; 0x06
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	9e 83       	std	Y+6, r25	; 0x06
     8f4:	8d 83       	std	Y+5, r24	; 0x05
     8f6:	ce cf       	rjmp	.-100    	; 0x894 <SPI_TransmitString+0x24>

000008f8 <SPI_ReceiveString>:
	}
return ErrRetVal;
}

uint8_t SPI_ReceiveString(uint8_t SpiNumber, ptr_uint8_t RxString,
		uint8_t slave_CH) {
     8f8:	df 93       	push	r29
     8fa:	cf 93       	push	r28
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	29 97       	sbiw	r28, 0x09	; 9
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	8e 83       	std	Y+6, r24	; 0x06
     90e:	78 87       	std	Y+8, r23	; 0x08
     910:	6f 83       	std	Y+7, r22	; 0x07
     912:	49 87       	std	Y+9, r20	; 0x09
	uint8_t ErrRetVal = OperationStarted;
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t* RxStringAddress=RxString;
     918:	8f 81       	ldd	r24, Y+7	; 0x07
     91a:	98 85       	ldd	r25, Y+8	; 0x08
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t iterator = 0;
     920:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Dummy = 0;
     922:	19 82       	std	Y+1, r1	; 0x01
	while (iterator <= 255) {
		if (SPI_DataExchange(SpiNumber, Dummy, RxString,
     924:	2f 81       	ldd	r18, Y+7	; 0x07
     926:	38 85       	ldd	r19, Y+8	; 0x08
     928:	8e 81       	ldd	r24, Y+6	; 0x06
     92a:	69 81       	ldd	r22, Y+1	; 0x01
     92c:	a9 01       	movw	r20, r18
     92e:	29 85       	ldd	r18, Y+9	; 0x09
     930:	0e 94 11 04 	call	0x822	; 0x822 <SPI_DataExchange>
     934:	88 23       	and	r24, r24
     936:	b1 f7       	brne	.-20     	; 0x924 <SPI_ReceiveString+0x2c>
				slave_CH)==OperationSuccess) {
			if (*RxString == '\0') {
     938:	ef 81       	ldd	r30, Y+7	; 0x07
     93a:	f8 85       	ldd	r31, Y+8	; 0x08
     93c:	80 81       	ld	r24, Z
     93e:	88 23       	and	r24, r24
     940:	91 f4       	brne	.+36     	; 0x966 <SPI_ReceiveString+0x6e>
				if (RxString == RxStringAddress) {
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	51 f3       	breq	.-44     	; 0x924 <SPI_ReceiveString+0x2c>
					continue;
				} else {
					ErrRetVal = OperationSuccess;
     950:	1d 82       	std	Y+5, r1	; 0x05
			}
		} else {
			continue;
		}
	}
	return ErrRetVal;
     952:	8d 81       	ldd	r24, Y+5	; 0x05
}
     954:	29 96       	adiw	r28, 0x09	; 9
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	08 95       	ret
				} else {
					ErrRetVal = OperationSuccess;
					break;
				}
			} else {
				RxString++;
     966:	8f 81       	ldd	r24, Y+7	; 0x07
     968:	98 85       	ldd	r25, Y+8	; 0x08
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	98 87       	std	Y+8, r25	; 0x08
     96e:	8f 83       	std	Y+7, r24	; 0x07
				iterator++;
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	8a 83       	std	Y+2, r24	; 0x02
     976:	d6 cf       	rjmp	.-84     	; 0x924 <SPI_ReceiveString+0x2c>

00000978 <SPI_EnableInterrupt>:
	}
	return ErrRetVal;
}

uint8_t SPI_EnableInterrupt(uint8_t SpiNumber)
{
     978:	df 93       	push	r29
     97a:	cf 93       	push	r28
     97c:	00 d0       	rcall	.+0      	; 0x97e <SPI_EnableInterrupt+0x6>
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
     988:	af e5       	ldi	r26, 0x5F	; 95
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	ef e5       	ldi	r30, 0x5F	; 95
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	80 68       	ori	r24, 0x80	; 128
     994:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	MODIFY_REG(SPI_ControlReg,
     996:	ad e2       	ldi	r26, 0x2D	; 45
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	ed e2       	ldi	r30, 0x2D	; 45
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	80 68       	ori	r24, 0x80	; 128
     9a2:	8c 93       	st	X, r24
			InterruptEnable_MSK,
			InterruptEnable_MSK);
	ErrRetVal = OperationSuccess;
     9a4:	19 82       	std	Y+1, r1	; 0x01
	return ErrRetVal;
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
}
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	cf 91       	pop	r28
     9ae:	df 91       	pop	r29
     9b0:	08 95       	ret

000009b2 <SPI_DisableInterrupt>:

uint8_t SPI_DisableInterrupt(uint8_t SpiNumber)
{
     9b2:	df 93       	push	r29
     9b4:	cf 93       	push	r28
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <SPI_DisableInterrupt+0x6>
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(SPI_ControlReg, InterruptEnable_BIT);
     9c2:	ad e2       	ldi	r26, 0x2D	; 45
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	ed e2       	ldi	r30, 0x2D	; 45
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	8f 77       	andi	r24, 0x7F	; 127
     9ce:	8c 93       	st	X, r24
	ErrRetVal = OperationSuccess;
     9d0:	19 82       	std	Y+1, r1	; 0x01
	return ErrRetVal;
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	cf 91       	pop	r28
     9da:	df 91       	pop	r29
     9dc:	08 95       	ret

000009de <SPI_Set_TX_CompleteCallback>:

uint8_t SPI_Set_TX_CompleteCallback(uint8_t SpiNumber,void(*callBack)(void))
{
     9de:	df 93       	push	r29
     9e0:	cf 93       	push	r28
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <SPI_Set_TX_CompleteCallback+0x6>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <SPI_Set_TX_CompleteCallback+0x8>
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	8a 83       	std	Y+2, r24	; 0x02
     9ec:	7c 83       	std	Y+4, r23	; 0x04
     9ee:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = 0;
     9f0:	19 82       	std	Y+1, r1	; 0x01
		if (callBack != NULL)
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	31 f0       	breq	.+12     	; 0xa06 <SPI_Set_TX_CompleteCallback+0x28>
			SPI_TX_Complete_callback = callBack;
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	9c 81       	ldd	r25, Y+4	; 0x04
     9fe:	90 93 67 00 	sts	0x0067, r25
     a02:	80 93 66 00 	sts	0x0066, r24
		return ErrRetVal;
     a06:	89 81       	ldd	r24, Y+1	; 0x01
}
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	08 95       	ret

00000a16 <__vector_12>:

void __vector_12(void)
{
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	2f 93       	push	r18
     a22:	3f 93       	push	r19
     a24:	4f 93       	push	r20
     a26:	5f 93       	push	r21
     a28:	6f 93       	push	r22
     a2a:	7f 93       	push	r23
     a2c:	8f 93       	push	r24
     a2e:	9f 93       	push	r25
     a30:	af 93       	push	r26
     a32:	bf 93       	push	r27
     a34:	ef 93       	push	r30
     a36:	ff 93       	push	r31
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	if (SPI_TX_Complete_callback != NULL)
     a40:	80 91 66 00 	lds	r24, 0x0066
     a44:	90 91 67 00 	lds	r25, 0x0067
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	29 f0       	breq	.+10     	; 0xa56 <__vector_12+0x40>
		SPI_TX_Complete_callback();
     a4c:	e0 91 66 00 	lds	r30, 0x0066
     a50:	f0 91 67 00 	lds	r31, 0x0067
     a54:	09 95       	icall
}
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	ff 91       	pop	r31
     a5c:	ef 91       	pop	r30
     a5e:	bf 91       	pop	r27
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <DIO_PortInit>:
#include "../DIO/DIO_DRIVER_TypeDef.h"
#include "../DIO/DIO_DRIVER.h"
#include "../DIO/DIO_DRIVER_Priv.h"

DIO_ERROR_RETVAL_t DIO_PortInit(DIO_PORT_ID_t DIO_port,
		DIO_DIRECTION_t DIO_direction) {
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	00 d0       	rcall	.+0      	; 0xa82 <DIO_PortInit+0x6>
     a82:	00 d0       	rcall	.+0      	; 0xa84 <DIO_PortInit+0x8>
     a84:	0f 92       	push	r0
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	8a 83       	std	Y+2, r24	; 0x02
     a8c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     a8e:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD)
     a90:	8a 81       	ldd	r24, Y+2	; 0x02
     a92:	85 30       	cpi	r24, 0x05	; 5
     a94:	08 f0       	brcs	.+2      	; 0xa98 <DIO_PortInit+0x1c>
     a96:	3d c0       	rjmp	.+122    	; 0xb12 <DIO_PortInit+0x96>
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	88 23       	and	r24, r24
     a9c:	19 f0       	breq	.+6      	; 0xaa4 <DIO_PortInit+0x28>
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	8f 3f       	cpi	r24, 0xFF	; 255
     aa2:	b9 f5       	brne	.+110    	; 0xb12 <DIO_PortInit+0x96>
			&& (DIO_direction == PORT_INPUT || DIO_direction == PORT_OUTPUT)) {
		switch (DIO_port) {
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	28 2f       	mov	r18, r24
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	3d 83       	std	Y+5, r19	; 0x05
     aac:	2c 83       	std	Y+4, r18	; 0x04
     aae:	8c 81       	ldd	r24, Y+4	; 0x04
     ab0:	9d 81       	ldd	r25, Y+5	; 0x05
     ab2:	82 30       	cpi	r24, 0x02	; 2
     ab4:	91 05       	cpc	r25, r1
     ab6:	d9 f0       	breq	.+54     	; 0xaee <DIO_PortInit+0x72>
     ab8:	2c 81       	ldd	r18, Y+4	; 0x04
     aba:	3d 81       	ldd	r19, Y+5	; 0x05
     abc:	23 30       	cpi	r18, 0x03	; 3
     abe:	31 05       	cpc	r19, r1
     ac0:	34 f4       	brge	.+12     	; 0xace <DIO_PortInit+0x52>
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	91 05       	cpc	r25, r1
     aca:	61 f0       	breq	.+24     	; 0xae4 <DIO_PortInit+0x68>
     acc:	1f c0       	rjmp	.+62     	; 0xb0c <DIO_PortInit+0x90>
     ace:	2c 81       	ldd	r18, Y+4	; 0x04
     ad0:	3d 81       	ldd	r19, Y+5	; 0x05
     ad2:	23 30       	cpi	r18, 0x03	; 3
     ad4:	31 05       	cpc	r19, r1
     ad6:	81 f0       	breq	.+32     	; 0xaf8 <DIO_PortInit+0x7c>
     ad8:	8c 81       	ldd	r24, Y+4	; 0x04
     ada:	9d 81       	ldd	r25, Y+5	; 0x05
     adc:	84 30       	cpi	r24, 0x04	; 4
     ade:	91 05       	cpc	r25, r1
     ae0:	81 f0       	breq	.+32     	; 0xb02 <DIO_PortInit+0x86>
     ae2:	14 c0       	rjmp	.+40     	; 0xb0c <DIO_PortInit+0x90>
		case PORTA:
			WRITE_REG(DDRA_Register, DIO_direction);
     ae4:	ea e3       	ldi	r30, 0x3A	; 58
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	80 83       	st	Z, r24
     aec:	14 c0       	rjmp	.+40     	; 0xb16 <DIO_PortInit+0x9a>
			break;
		case PORTB:
			WRITE_REG(DDRB_Register, DIO_direction);
     aee:	e7 e3       	ldi	r30, 0x37	; 55
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	80 83       	st	Z, r24
     af6:	0f c0       	rjmp	.+30     	; 0xb16 <DIO_PortInit+0x9a>
			break;
		case PORTC:
			WRITE_REG(DDRC_Register, DIO_direction);
     af8:	e4 e3       	ldi	r30, 0x34	; 52
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	80 83       	st	Z, r24
     b00:	0a c0       	rjmp	.+20     	; 0xb16 <DIO_PortInit+0x9a>
			break;
		case PORTD:
			WRITE_REG(DDRD_Register, DIO_direction);
     b02:	e1 e3       	ldi	r30, 0x31	; 49
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	80 83       	st	Z, r24
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <DIO_PortInit+0x9a>
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	89 83       	std	Y+1, r24	; 0x01
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <DIO_PortInit+0x9a>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     b16:	89 81       	ldd	r24, Y+1	; 0x01
}
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <DIO_PinInit>:

DIO_ERROR_RETVAL_t DIO_PinInit(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin,
		DIO_DIRECTION_t DIO_direction) {
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	28 97       	sbiw	r28, 0x08	; 8
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	8a 83       	std	Y+2, r24	; 0x02
     b3e:	6b 83       	std	Y+3, r22	; 0x03
     b40:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     b42:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	85 30       	cpi	r24, 0x05	; 5
     b48:	08 f0       	brcs	.+2      	; 0xb4c <DIO_PinInit+0x24>
     b4a:	fa c0       	rjmp	.+500    	; 0xd40 <DIO_PinInit+0x218>
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	88 30       	cpi	r24, 0x08	; 8
     b50:	08 f0       	brcs	.+2      	; 0xb54 <DIO_PinInit+0x2c>
     b52:	f6 c0       	rjmp	.+492    	; 0xd40 <DIO_PinInit+0x218>
		if (DIO_direction == PIN_OUTPUT) {
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <DIO_PinInit+0x34>
     b5a:	73 c0       	rjmp	.+230    	; 0xc42 <DIO_PinInit+0x11a>

			switch (DIO_port) {
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	38 87       	std	Y+8, r19	; 0x08
     b64:	2f 83       	std	Y+7, r18	; 0x07
     b66:	8f 81       	ldd	r24, Y+7	; 0x07
     b68:	98 85       	ldd	r25, Y+8	; 0x08
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	91 05       	cpc	r25, r1
     b6e:	51 f1       	breq	.+84     	; 0xbc4 <DIO_PinInit+0x9c>
     b70:	2f 81       	ldd	r18, Y+7	; 0x07
     b72:	38 85       	ldd	r19, Y+8	; 0x08
     b74:	23 30       	cpi	r18, 0x03	; 3
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_PinInit+0x5e>
     b7a:	8f 81       	ldd	r24, Y+7	; 0x07
     b7c:	98 85       	ldd	r25, Y+8	; 0x08
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	91 05       	cpc	r25, r1
     b82:	61 f0       	breq	.+24     	; 0xb9c <DIO_PinInit+0x74>
     b84:	5b c0       	rjmp	.+182    	; 0xc3c <DIO_PinInit+0x114>
     b86:	2f 81       	ldd	r18, Y+7	; 0x07
     b88:	38 85       	ldd	r19, Y+8	; 0x08
     b8a:	23 30       	cpi	r18, 0x03	; 3
     b8c:	31 05       	cpc	r19, r1
     b8e:	71 f1       	breq	.+92     	; 0xbec <DIO_PinInit+0xc4>
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	84 30       	cpi	r24, 0x04	; 4
     b96:	91 05       	cpc	r25, r1
     b98:	e9 f1       	breq	.+122    	; 0xc14 <DIO_PinInit+0xec>
     b9a:	50 c0       	rjmp	.+160    	; 0xc3c <DIO_PinInit+0x114>
			case PORTA:
				SET_BIT(DDRA_Register, DIO_pin);
     b9c:	aa e3       	ldi	r26, 0x3A	; 58
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ea e3       	ldi	r30, 0x3A	; 58
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	48 2f       	mov	r20, r24
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 2e       	mov	r0, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_PinInit+0x92>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_PinInit+0x8e>
     bbe:	84 2b       	or	r24, r20
     bc0:	8c 93       	st	X, r24
     bc2:	c0 c0       	rjmp	.+384    	; 0xd44 <DIO_PinInit+0x21c>
				break;
			case PORTB:
				SET_BIT(DDRB_Register, DIO_pin);
     bc4:	a7 e3       	ldi	r26, 0x37	; 55
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e7 e3       	ldi	r30, 0x37	; 55
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	48 2f       	mov	r20, r24
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	02 2e       	mov	r0, r18
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DIO_PinInit+0xba>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <DIO_PinInit+0xb6>
     be6:	84 2b       	or	r24, r20
     be8:	8c 93       	st	X, r24
     bea:	ac c0       	rjmp	.+344    	; 0xd44 <DIO_PinInit+0x21c>
				break;
			case PORTC:
				SET_BIT(DDRC_Register, DIO_pin);
     bec:	a4 e3       	ldi	r26, 0x34	; 52
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e4 e3       	ldi	r30, 0x34	; 52
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_PinInit+0xe2>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_PinInit+0xde>
     c0e:	84 2b       	or	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	98 c0       	rjmp	.+304    	; 0xd44 <DIO_PinInit+0x21c>
				break;
			case PORTD:
				SET_BIT(DDRD_Register, DIO_pin);
     c14:	a1 e3       	ldi	r26, 0x31	; 49
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e1 e3       	ldi	r30, 0x31	; 49
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_PinInit+0x10a>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_PinInit+0x106>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	84 c0       	rjmp	.+264    	; 0xd44 <DIO_PinInit+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	81 c0       	rjmp	.+258    	; 0xd44 <DIO_PinInit+0x21c>
				break;
			}
		} else if (DIO_direction == PIN_INPUT) {
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	88 23       	and	r24, r24
     c46:	09 f0       	breq	.+2      	; 0xc4a <DIO_PinInit+0x122>
     c48:	78 c0       	rjmp	.+240    	; 0xd3a <DIO_PinInit+0x212>

			switch (DIO_port) {
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	3e 83       	std	Y+6, r19	; 0x06
     c52:	2d 83       	std	Y+5, r18	; 0x05
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	91 05       	cpc	r25, r1
     c5c:	61 f1       	breq	.+88     	; 0xcb6 <DIO_PinInit+0x18e>
     c5e:	2d 81       	ldd	r18, Y+5	; 0x05
     c60:	3e 81       	ldd	r19, Y+6	; 0x06
     c62:	23 30       	cpi	r18, 0x03	; 3
     c64:	31 05       	cpc	r19, r1
     c66:	34 f4       	brge	.+12     	; 0xc74 <DIO_PinInit+0x14c>
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	69 f0       	breq	.+26     	; 0xc8c <DIO_PinInit+0x164>
     c72:	60 c0       	rjmp	.+192    	; 0xd34 <DIO_PinInit+0x20c>
     c74:	2d 81       	ldd	r18, Y+5	; 0x05
     c76:	3e 81       	ldd	r19, Y+6	; 0x06
     c78:	23 30       	cpi	r18, 0x03	; 3
     c7a:	31 05       	cpc	r19, r1
     c7c:	89 f1       	breq	.+98     	; 0xce0 <DIO_PinInit+0x1b8>
     c7e:	8d 81       	ldd	r24, Y+5	; 0x05
     c80:	9e 81       	ldd	r25, Y+6	; 0x06
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	91 05       	cpc	r25, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <DIO_PinInit+0x162>
     c88:	40 c0       	rjmp	.+128    	; 0xd0a <DIO_PinInit+0x1e2>
     c8a:	54 c0       	rjmp	.+168    	; 0xd34 <DIO_PinInit+0x20c>
			case PORTA:
				CLEAR_BIT(DDRA_Register, DIO_pin);
     c8c:	aa e3       	ldi	r26, 0x3A	; 58
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ea e3       	ldi	r30, 0x3A	; 58
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_PinInit+0x182>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_PinInit+0x17e>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	47 c0       	rjmp	.+142    	; 0xd44 <DIO_PinInit+0x21c>
				break;
			case PORTB:
				CLEAR_BIT(DDRB_Register, DIO_pin);
     cb6:	a7 e3       	ldi	r26, 0x37	; 55
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e3       	ldi	r30, 0x37	; 55
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <DIO_PinInit+0x1ac>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <DIO_PinInit+0x1a8>
     cd8:	80 95       	com	r24
     cda:	84 23       	and	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	32 c0       	rjmp	.+100    	; 0xd44 <DIO_PinInit+0x21c>
				break;
			case PORTC:
				CLEAR_BIT(DDRC_Register, DIO_pin);
     ce0:	a4 e3       	ldi	r26, 0x34	; 52
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e4 e3       	ldi	r30, 0x34	; 52
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_PinInit+0x1d6>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_PinInit+0x1d2>
     d02:	80 95       	com	r24
     d04:	84 23       	and	r24, r20
     d06:	8c 93       	st	X, r24
     d08:	1d c0       	rjmp	.+58     	; 0xd44 <DIO_PinInit+0x21c>
				break;
			case PORTD:
				CLEAR_BIT(DDRD_Register, DIO_pin);
     d0a:	a1 e3       	ldi	r26, 0x31	; 49
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e1 e3       	ldi	r30, 0x31	; 49
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_PinInit+0x200>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_PinInit+0x1fc>
     d2c:	80 95       	com	r24
     d2e:	84 23       	and	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	08 c0       	rjmp	.+16     	; 0xd44 <DIO_PinInit+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <DIO_PinInit+0x21c>
				break;
			}
		}

		else {
			ErrorValue = EXIT_FAILURE;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_PinInit+0x21c>
		}
	}

	else {
		ErrorValue = EXIT_FAILURE;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
}
     d46:	28 96       	adiw	r28, 0x08	; 8
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <DIO_PinEnablePullUp>:

DIO_ERROR_RETVAL_t DIO_PinEnablePullUp(DIO_PORT_ID_t DIO_port,
		DIO_PIN_ID_t DIO_pin) {
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <DIO_PinEnablePullUp+0x6>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <DIO_PinEnablePullUp+0x8>
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	8a 83       	std	Y+2, r24	; 0x02
     d68:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     d6a:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	85 30       	cpi	r24, 0x05	; 5
     d70:	08 f0       	brcs	.+2      	; 0xd74 <DIO_PinEnablePullUp+0x1c>
     d72:	99 c0       	rjmp	.+306    	; 0xea6 <DIO_PinEnablePullUp+0x14e>
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	88 30       	cpi	r24, 0x08	; 8
     d78:	08 f0       	brcs	.+2      	; 0xd7c <DIO_PinEnablePullUp+0x24>
     d7a:	95 c0       	rjmp	.+298    	; 0xea6 <DIO_PinEnablePullUp+0x14e>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	3d 83       	std	Y+5, r19	; 0x05
     d84:	2c 83       	std	Y+4, r18	; 0x04
     d86:	8c 81       	ldd	r24, Y+4	; 0x04
     d88:	9d 81       	ldd	r25, Y+5	; 0x05
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	91 05       	cpc	r25, r1
     d8e:	a1 f1       	breq	.+104    	; 0xdf8 <DIO_PinEnablePullUp+0xa0>
     d90:	2c 81       	ldd	r18, Y+4	; 0x04
     d92:	3d 81       	ldd	r19, Y+5	; 0x05
     d94:	23 30       	cpi	r18, 0x03	; 3
     d96:	31 05       	cpc	r19, r1
     d98:	34 f4       	brge	.+12     	; 0xda6 <DIO_PinEnablePullUp+0x4e>
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	9d 81       	ldd	r25, Y+5	; 0x05
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	91 05       	cpc	r25, r1
     da2:	71 f0       	breq	.+28     	; 0xdc0 <DIO_PinEnablePullUp+0x68>
     da4:	7d c0       	rjmp	.+250    	; 0xea0 <DIO_PinEnablePullUp+0x148>
     da6:	2c 81       	ldd	r18, Y+4	; 0x04
     da8:	3d 81       	ldd	r19, Y+5	; 0x05
     daa:	23 30       	cpi	r18, 0x03	; 3
     dac:	31 05       	cpc	r19, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <DIO_PinEnablePullUp+0x5a>
     db0:	3f c0       	rjmp	.+126    	; 0xe30 <DIO_PinEnablePullUp+0xd8>
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	91 05       	cpc	r25, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <DIO_PinEnablePullUp+0x66>
     dbc:	55 c0       	rjmp	.+170    	; 0xe68 <DIO_PinEnablePullUp+0x110>
     dbe:	70 c0       	rjmp	.+224    	; 0xea0 <DIO_PinEnablePullUp+0x148>
		case PORTA:
			if (READ_REG(DDRA_Register) == PIN_INPUT) {
     dc0:	ea e3       	ldi	r30, 0x3A	; 58
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 23       	and	r24, r24
     dc8:	a1 f4       	brne	.+40     	; 0xdf2 <DIO_PinEnablePullUp+0x9a>
				SET_BIT(PORTA_Register, DIO_pin);
     dca:	ab e3       	ldi	r26, 0x3B	; 59
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb e3       	ldi	r30, 0x3B	; 59
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_PinEnablePullUp+0x90>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_PinEnablePullUp+0x8c>
     dec:	84 2b       	or	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	5c c0       	rjmp	.+184    	; 0xeaa <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	59 c0       	rjmp	.+178    	; 0xeaa <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PIN_INPUT) {
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 23       	and	r24, r24
     e00:	a1 f4       	brne	.+40     	; 0xe2a <DIO_PinEnablePullUp+0xd2>
				SET_BIT(PORTB_Register, DIO_pin);
     e02:	a8 e3       	ldi	r26, 0x38	; 56
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e8 e3       	ldi	r30, 0x38	; 56
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_PinEnablePullUp+0xc8>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_PinEnablePullUp+0xc4>
     e24:	84 2b       	or	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	40 c0       	rjmp	.+128    	; 0xeaa <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	3d c0       	rjmp	.+122    	; 0xeaa <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PIN_INPUT) {
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	88 23       	and	r24, r24
     e38:	a1 f4       	brne	.+40     	; 0xe62 <DIO_PinEnablePullUp+0x10a>
				SET_BIT(PORTC_Register, DIO_pin);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_PinEnablePullUp+0x100>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_PinEnablePullUp+0xfc>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	24 c0       	rjmp	.+72     	; 0xeaa <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	21 c0       	rjmp	.+66     	; 0xeaa <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PIN_INPUT) {
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 23       	and	r24, r24
     e70:	a1 f4       	brne	.+40     	; 0xe9a <DIO_PinEnablePullUp+0x142>
				SET_BIT(PORTD_Register, DIO_pin);
     e72:	a2 e3       	ldi	r26, 0x32	; 50
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e2 e3       	ldi	r30, 0x32	; 50
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_PinEnablePullUp+0x138>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_PinEnablePullUp+0x134>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	08 c0       	rjmp	.+16     	; 0xeaa <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	05 c0       	rjmp	.+10     	; 0xeaa <DIO_PinEnablePullUp+0x152>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_PinEnablePullUp+0x152>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <DIO_SetPortVal>:

DIO_ERROR_RETVAL_t DIO_SetPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <DIO_SetPortVal+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <DIO_SetPortVal+0x8>
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     ece:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	85 30       	cpi	r24, 0x05	; 5
     ed4:	b8 f5       	brcc	.+110    	; 0xf44 <DIO_SetPortVal+0x88>
		switch (DIO_port) {
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 83       	std	Y+5, r19	; 0x05
     ede:	2c 83       	std	Y+4, r18	; 0x04
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	91 05       	cpc	r25, r1
     ee8:	d9 f0       	breq	.+54     	; 0xf20 <DIO_SetPortVal+0x64>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	23 30       	cpi	r18, 0x03	; 3
     ef0:	31 05       	cpc	r19, r1
     ef2:	34 f4       	brge	.+12     	; 0xf00 <DIO_SetPortVal+0x44>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	91 05       	cpc	r25, r1
     efc:	61 f0       	breq	.+24     	; 0xf16 <DIO_SetPortVal+0x5a>
     efe:	1f c0       	rjmp	.+62     	; 0xf3e <DIO_SetPortVal+0x82>
     f00:	2c 81       	ldd	r18, Y+4	; 0x04
     f02:	3d 81       	ldd	r19, Y+5	; 0x05
     f04:	23 30       	cpi	r18, 0x03	; 3
     f06:	31 05       	cpc	r19, r1
     f08:	81 f0       	breq	.+32     	; 0xf2a <DIO_SetPortVal+0x6e>
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	91 05       	cpc	r25, r1
     f12:	81 f0       	breq	.+32     	; 0xf34 <DIO_SetPortVal+0x78>
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <DIO_SetPortVal+0x82>
		case PORTA:

			WRITE_REG(PORTA_Register, value);
     f16:	eb e3       	ldi	r30, 0x3B	; 59
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	80 83       	st	Z, r24
     f1e:	14 c0       	rjmp	.+40     	; 0xf48 <DIO_SetPortVal+0x8c>

			break;
		case PORTB:

			WRITE_REG(PORTB_Register, value);
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	80 83       	st	Z, r24
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <DIO_SetPortVal+0x8c>

			break;
		case PORTC:

			WRITE_REG(PORTC_Register, value);
     f2a:	e5 e3       	ldi	r30, 0x35	; 53
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	80 83       	st	Z, r24
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <DIO_SetPortVal+0x8c>

			break;
		case PORTD:

			WRITE_REG(PORTD_Register, value);
     f34:	e2 e3       	ldi	r30, 0x32	; 50
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	80 83       	st	Z, r24
     f3c:	05 c0       	rjmp	.+10     	; 0xf48 <DIO_SetPortVal+0x8c>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_SetPortVal+0x8c>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     f48:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <DIO_ClrPortVal>:

DIO_ERROR_RETVAL_t DIO_ClrPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	29 97       	sbiw	r28, 0x09	; 9
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	8a 83       	std	Y+2, r24	; 0x02
     f70:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     f72:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	85 30       	cpi	r24, 0x05	; 5
     f78:	08 f0       	brcs	.+2      	; 0xf7c <DIO_ClrPortVal+0x22>
     f7a:	53 c0       	rjmp	.+166    	; 0x1022 <DIO_ClrPortVal+0xc8>
		switch (DIO_port) {
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	39 87       	std	Y+9, r19	; 0x09
     f84:	28 87       	std	Y+8, r18	; 0x08
     f86:	88 85       	ldd	r24, Y+8	; 0x08
     f88:	99 85       	ldd	r25, Y+9	; 0x09
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	91 05       	cpc	r25, r1
     f8e:	11 f1       	breq	.+68     	; 0xfd4 <DIO_ClrPortVal+0x7a>
     f90:	28 85       	ldd	r18, Y+8	; 0x08
     f92:	39 85       	ldd	r19, Y+9	; 0x09
     f94:	23 30       	cpi	r18, 0x03	; 3
     f96:	31 05       	cpc	r19, r1
     f98:	34 f4       	brge	.+12     	; 0xfa6 <DIO_ClrPortVal+0x4c>
     f9a:	88 85       	ldd	r24, Y+8	; 0x08
     f9c:	99 85       	ldd	r25, Y+9	; 0x09
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	61 f0       	breq	.+24     	; 0xfbc <DIO_ClrPortVal+0x62>
     fa4:	3b c0       	rjmp	.+118    	; 0x101c <DIO_ClrPortVal+0xc2>
     fa6:	28 85       	ldd	r18, Y+8	; 0x08
     fa8:	39 85       	ldd	r19, Y+9	; 0x09
     faa:	23 30       	cpi	r18, 0x03	; 3
     fac:	31 05       	cpc	r19, r1
     fae:	f1 f0       	breq	.+60     	; 0xfec <DIO_ClrPortVal+0x92>
     fb0:	88 85       	ldd	r24, Y+8	; 0x08
     fb2:	99 85       	ldd	r25, Y+9	; 0x09
     fb4:	84 30       	cpi	r24, 0x04	; 4
     fb6:	91 05       	cpc	r25, r1
     fb8:	29 f1       	breq	.+74     	; 0x1004 <DIO_ClrPortVal+0xaa>
     fba:	30 c0       	rjmp	.+96     	; 0x101c <DIO_ClrPortVal+0xc2>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, ~value);
     fbc:	eb e3       	ldi	r30, 0x3B	; 59
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	90 81       	ld	r25, Z
     fc2:	eb e3       	ldi	r30, 0x3B	; 59
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	80 95       	com	r24
     fce:	90 95       	com	r25
     fd0:	80 83       	st	Z, r24
     fd2:	29 c0       	rjmp	.+82     	; 0x1026 <DIO_ClrPortVal+0xcc>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, ~value);
     fd4:	e8 e3       	ldi	r30, 0x38	; 56
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	20 81       	ld	r18, Z
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	80 95       	com	r24
     fe6:	90 95       	com	r25
     fe8:	80 83       	st	Z, r24
     fea:	1d c0       	rjmp	.+58     	; 0x1026 <DIO_ClrPortVal+0xcc>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, ~value);
     fec:	e5 e3       	ldi	r30, 0x35	; 53
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	30 81       	ld	r19, Z
     ff2:	e5 e3       	ldi	r30, 0x35	; 53
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	80 95       	com	r24
     ffe:	90 95       	com	r25
    1000:	80 83       	st	Z, r24
    1002:	11 c0       	rjmp	.+34     	; 0x1026 <DIO_ClrPortVal+0xcc>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, ~value);
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	e2 e3       	ldi	r30, 0x32	; 50
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	80 95       	com	r24
    1016:	90 95       	com	r25
    1018:	80 83       	st	Z, r24
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <DIO_ClrPortVal+0xcc>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_ClrPortVal+0xcc>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
}
    1028:	29 96       	adiw	r28, 0x09	; 9
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_SetPinVal>:

DIO_ERROR_RETVAL_t DIO_SetPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin,
		Byte value) {
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	28 97       	sbiw	r28, 0x08	; 8
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	8a 83       	std	Y+2, r24	; 0x02
    1050:	6b 83       	std	Y+3, r22	; 0x03
    1052:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1054:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	85 30       	cpi	r24, 0x05	; 5
    105a:	08 f0       	brcs	.+2      	; 0x105e <DIO_SetPinVal+0x24>
    105c:	0f c2       	rjmp	.+1054   	; 0x147c <DIO_SetPinVal+0x442>
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	08 f0       	brcs	.+2      	; 0x1066 <DIO_SetPinVal+0x2c>
    1064:	0b c2       	rjmp	.+1046   	; 0x147c <DIO_SetPinVal+0x442>
		if (value == PIN_HIGH) {
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	09 f0       	breq	.+2      	; 0x106e <DIO_SetPinVal+0x34>
    106c:	fe c0       	rjmp	.+508    	; 0x126a <DIO_SetPinVal+0x230>

			switch (DIO_port) {
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	38 87       	std	Y+8, r19	; 0x08
    1076:	2f 83       	std	Y+7, r18	; 0x07
    1078:	4f 81       	ldd	r20, Y+7	; 0x07
    107a:	58 85       	ldd	r21, Y+8	; 0x08
    107c:	42 30       	cpi	r20, 0x02	; 2
    107e:	51 05       	cpc	r21, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <DIO_SetPinVal+0x4a>
    1082:	4e c0       	rjmp	.+156    	; 0x1120 <DIO_SetPinVal+0xe6>
    1084:	8f 81       	ldd	r24, Y+7	; 0x07
    1086:	98 85       	ldd	r25, Y+8	; 0x08
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	34 f4       	brge	.+12     	; 0x109a <DIO_SetPinVal+0x60>
    108e:	2f 81       	ldd	r18, Y+7	; 0x07
    1090:	38 85       	ldd	r19, Y+8	; 0x08
    1092:	21 30       	cpi	r18, 0x01	; 1
    1094:	31 05       	cpc	r19, r1
    1096:	71 f0       	breq	.+28     	; 0x10b4 <DIO_SetPinVal+0x7a>
    1098:	e5 c0       	rjmp	.+458    	; 0x1264 <DIO_SetPinVal+0x22a>
    109a:	4f 81       	ldd	r20, Y+7	; 0x07
    109c:	58 85       	ldd	r21, Y+8	; 0x08
    109e:	43 30       	cpi	r20, 0x03	; 3
    10a0:	51 05       	cpc	r21, r1
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <DIO_SetPinVal+0x6c>
    10a4:	73 c0       	rjmp	.+230    	; 0x118c <DIO_SetPinVal+0x152>
    10a6:	8f 81       	ldd	r24, Y+7	; 0x07
    10a8:	98 85       	ldd	r25, Y+8	; 0x08
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	91 05       	cpc	r25, r1
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <DIO_SetPinVal+0x78>
    10b0:	a3 c0       	rjmp	.+326    	; 0x11f8 <DIO_SetPinVal+0x1be>
    10b2:	d8 c0       	rjmp	.+432    	; 0x1264 <DIO_SetPinVal+0x22a>
			case PORTA:
				if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    10b4:	ea e3       	ldi	r30, 0x3A	; 58
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_SetPinVal+0x94>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	2a 95       	dec	r18
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_SetPinVal+0x90>
    10d2:	9a 01       	movw	r18, r20
    10d4:	28 23       	and	r18, r24
    10d6:	39 23       	and	r19, r25
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_SetPinVal+0xac>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_SetPinVal+0xa8>
    10ea:	ca 01       	movw	r24, r20
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	a1 f4       	brne	.+40     	; 0x111a <DIO_SetPinVal+0xe0>
					SET_BIT(PORTA_Register, DIO_pin);
    10f2:	ab e3       	ldi	r26, 0x3B	; 59
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	eb e3       	ldi	r30, 0x3B	; 59
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_SetPinVal+0xd6>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_SetPinVal+0xd2>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	b3 c1       	rjmp	.+870    	; 0x1480 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	b0 c1       	rjmp	.+864    	; 0x1480 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    1120:	e7 e3       	ldi	r30, 0x37	; 55
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_SetPinVal+0x100>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	2a 95       	dec	r18
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_SetPinVal+0xfc>
    113e:	9a 01       	movw	r18, r20
    1140:	28 23       	and	r18, r24
    1142:	39 23       	and	r19, r25
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a9 01       	movw	r20, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_SetPinVal+0x118>
    114e:	55 95       	asr	r21
    1150:	47 95       	ror	r20
    1152:	8a 95       	dec	r24
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_SetPinVal+0x114>
    1156:	ca 01       	movw	r24, r20
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	91 05       	cpc	r25, r1
    115c:	a1 f4       	brne	.+40     	; 0x1186 <DIO_SetPinVal+0x14c>
					SET_BIT(PORTB_Register, DIO_pin);
    115e:	a8 e3       	ldi	r26, 0x38	; 56
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e8 e3       	ldi	r30, 0x38	; 56
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_SetPinVal+0x142>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_SetPinVal+0x13e>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	7d c1       	rjmp	.+762    	; 0x1480 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	7a c1       	rjmp	.+756    	; 0x1480 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    118c:	e4 e3       	ldi	r30, 0x34	; 52
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_SetPinVal+0x16c>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	2a 95       	dec	r18
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_SetPinVal+0x168>
    11aa:	9a 01       	movw	r18, r20
    11ac:	28 23       	and	r18, r24
    11ae:	39 23       	and	r19, r25
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a9 01       	movw	r20, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_SetPinVal+0x184>
    11ba:	55 95       	asr	r21
    11bc:	47 95       	ror	r20
    11be:	8a 95       	dec	r24
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_SetPinVal+0x180>
    11c2:	ca 01       	movw	r24, r20
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	a1 f4       	brne	.+40     	; 0x11f2 <DIO_SetPinVal+0x1b8>
					SET_BIT(PORTC_Register, DIO_pin);
    11ca:	a5 e3       	ldi	r26, 0x35	; 53
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e3       	ldi	r30, 0x35	; 53
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_SetPinVal+0x1ae>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_SetPinVal+0x1aa>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	47 c1       	rjmp	.+654    	; 0x1480 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	44 c1       	rjmp	.+648    	; 0x1480 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    11f8:	e1 e3       	ldi	r30, 0x31	; 49
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_SetPinVal+0x1d8>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	2a 95       	dec	r18
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_SetPinVal+0x1d4>
    1216:	9a 01       	movw	r18, r20
    1218:	28 23       	and	r18, r24
    121a:	39 23       	and	r19, r25
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_SetPinVal+0x1f0>
    1226:	55 95       	asr	r21
    1228:	47 95       	ror	r20
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_SetPinVal+0x1ec>
    122e:	ca 01       	movw	r24, r20
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	a1 f4       	brne	.+40     	; 0x125e <DIO_SetPinVal+0x224>
					SET_BIT(PORTD_Register, DIO_pin);
    1236:	a2 e3       	ldi	r26, 0x32	; 50
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e2 e3       	ldi	r30, 0x32	; 50
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_SetPinVal+0x21a>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_SetPinVal+0x216>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	11 c1       	rjmp	.+546    	; 0x1480 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	0e c1       	rjmp	.+540    	; 0x1480 <DIO_SetPinVal+0x446>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	0b c1       	rjmp	.+534    	; 0x1480 <DIO_SetPinVal+0x446>
				break;
			}
		} else if (value == PIN_LOW) {
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	88 23       	and	r24, r24
    126e:	09 f0       	breq	.+2      	; 0x1272 <DIO_SetPinVal+0x238>
    1270:	02 c1       	rjmp	.+516    	; 0x1476 <DIO_SetPinVal+0x43c>

			switch (DIO_port) {
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3e 83       	std	Y+6, r19	; 0x06
    127a:	2d 83       	std	Y+5, r18	; 0x05
    127c:	4d 81       	ldd	r20, Y+5	; 0x05
    127e:	5e 81       	ldd	r21, Y+6	; 0x06
    1280:	42 30       	cpi	r20, 0x02	; 2
    1282:	51 05       	cpc	r21, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <DIO_SetPinVal+0x24e>
    1286:	4f c0       	rjmp	.+158    	; 0x1326 <DIO_SetPinVal+0x2ec>
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	91 05       	cpc	r25, r1
    1290:	34 f4       	brge	.+12     	; 0x129e <DIO_SetPinVal+0x264>
    1292:	2d 81       	ldd	r18, Y+5	; 0x05
    1294:	3e 81       	ldd	r19, Y+6	; 0x06
    1296:	21 30       	cpi	r18, 0x01	; 1
    1298:	31 05       	cpc	r19, r1
    129a:	71 f0       	breq	.+28     	; 0x12b8 <DIO_SetPinVal+0x27e>
    129c:	e9 c0       	rjmp	.+466    	; 0x1470 <DIO_SetPinVal+0x436>
    129e:	4d 81       	ldd	r20, Y+5	; 0x05
    12a0:	5e 81       	ldd	r21, Y+6	; 0x06
    12a2:	43 30       	cpi	r20, 0x03	; 3
    12a4:	51 05       	cpc	r21, r1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <DIO_SetPinVal+0x270>
    12a8:	75 c0       	rjmp	.+234    	; 0x1394 <DIO_SetPinVal+0x35a>
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_SetPinVal+0x27c>
    12b4:	a6 c0       	rjmp	.+332    	; 0x1402 <DIO_SetPinVal+0x3c8>
    12b6:	dc c0       	rjmp	.+440    	; 0x1470 <DIO_SetPinVal+0x436>
			case PORTA:
				if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    12b8:	ea e3       	ldi	r30, 0x3A	; 58
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_SetPinVal+0x298>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	2a 95       	dec	r18
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_SetPinVal+0x294>
    12d6:	9a 01       	movw	r18, r20
    12d8:	28 23       	and	r18, r24
    12da:	39 23       	and	r19, r25
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_SetPinVal+0x2b0>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_SetPinVal+0x2ac>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	a9 f4       	brne	.+42     	; 0x1320 <DIO_SetPinVal+0x2e6>
					CLEAR_BIT(PORTA_Register, DIO_pin);
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	eb e3       	ldi	r30, 0x3B	; 59
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_SetPinVal+0x2da>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_SetPinVal+0x2d6>
    1318:	80 95       	com	r24
    131a:	84 23       	and	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	b0 c0       	rjmp	.+352    	; 0x1480 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	ad c0       	rjmp	.+346    	; 0x1480 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    1326:	e7 e3       	ldi	r30, 0x37	; 55
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_SetPinVal+0x306>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	2a 95       	dec	r18
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_SetPinVal+0x302>
    1344:	9a 01       	movw	r18, r20
    1346:	28 23       	and	r18, r24
    1348:	39 23       	and	r19, r25
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_SetPinVal+0x31e>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_SetPinVal+0x31a>
    135c:	ca 01       	movw	r24, r20
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	a9 f4       	brne	.+42     	; 0x138e <DIO_SetPinVal+0x354>
					CLEAR_BIT(PORTB_Register, DIO_pin);
    1364:	a8 e3       	ldi	r26, 0x38	; 56
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e8 e3       	ldi	r30, 0x38	; 56
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_SetPinVal+0x348>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_SetPinVal+0x344>
    1386:	80 95       	com	r24
    1388:	84 23       	and	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	79 c0       	rjmp	.+242    	; 0x1480 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	76 c0       	rjmp	.+236    	; 0x1480 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    1394:	e4 e3       	ldi	r30, 0x34	; 52
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_SetPinVal+0x374>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	2a 95       	dec	r18
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_SetPinVal+0x370>
    13b2:	9a 01       	movw	r18, r20
    13b4:	28 23       	and	r18, r24
    13b6:	39 23       	and	r19, r25
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_SetPinVal+0x38c>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_SetPinVal+0x388>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	91 05       	cpc	r25, r1
    13d0:	a9 f4       	brne	.+42     	; 0x13fc <DIO_SetPinVal+0x3c2>
					CLEAR_BIT(PORTC_Register, DIO_pin);
    13d2:	a5 e3       	ldi	r26, 0x35	; 53
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e3       	ldi	r30, 0x35	; 53
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_SetPinVal+0x3b6>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_SetPinVal+0x3b2>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	42 c0       	rjmp	.+132    	; 0x1480 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	3f c0       	rjmp	.+126    	; 0x1480 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    1402:	e1 e3       	ldi	r30, 0x31	; 49
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_SetPinVal+0x3e2>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	2a 95       	dec	r18
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_SetPinVal+0x3de>
    1420:	9a 01       	movw	r18, r20
    1422:	28 23       	and	r18, r24
    1424:	39 23       	and	r19, r25
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_SetPinVal+0x3fa>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_SetPinVal+0x3f6>
    1438:	ca 01       	movw	r24, r20
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	a9 f4       	brne	.+42     	; 0x146a <DIO_SetPinVal+0x430>
					CLEAR_BIT(PORTD_Register, DIO_pin);
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_SetPinVal+0x424>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_SetPinVal+0x420>
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	0b c0       	rjmp	.+22     	; 0x1480 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	08 c0       	rjmp	.+16     	; 0x1480 <DIO_SetPinVal+0x446>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	05 c0       	rjmp	.+10     	; 0x1480 <DIO_SetPinVal+0x446>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_SetPinVal+0x446>
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1480:	89 81       	ldd	r24, Y+1	; 0x01
}
    1482:	28 96       	adiw	r28, 0x08	; 8
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <DIO_GetPortVal>:

Byte DIO_GetPortVal(DIO_PORT_ID_t DIO_port) {
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <DIO_GetPortVal+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <DIO_GetPortVal+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	8a 83       	std	Y+2, r24	; 0x02
	Byte RETVAL = EXIT_FAILURE;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD)) {
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	85 30       	cpi	r24, 0x05	; 5
    14aa:	b8 f5       	brcc	.+110    	; 0x151a <DIO_GetPortVal+0x86>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3c 83       	std	Y+4, r19	; 0x04
    14b4:	2b 83       	std	Y+3, r18	; 0x03
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	91 05       	cpc	r25, r1
    14be:	d9 f0       	breq	.+54     	; 0x14f6 <DIO_GetPortVal+0x62>
    14c0:	2b 81       	ldd	r18, Y+3	; 0x03
    14c2:	3c 81       	ldd	r19, Y+4	; 0x04
    14c4:	23 30       	cpi	r18, 0x03	; 3
    14c6:	31 05       	cpc	r19, r1
    14c8:	34 f4       	brge	.+12     	; 0x14d6 <DIO_GetPortVal+0x42>
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	91 05       	cpc	r25, r1
    14d2:	61 f0       	breq	.+24     	; 0x14ec <DIO_GetPortVal+0x58>
    14d4:	1f c0       	rjmp	.+62     	; 0x1514 <DIO_GetPortVal+0x80>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	23 30       	cpi	r18, 0x03	; 3
    14dc:	31 05       	cpc	r19, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <DIO_GetPortVal+0x6c>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	91 05       	cpc	r25, r1
    14e8:	81 f0       	breq	.+32     	; 0x150a <DIO_GetPortVal+0x76>
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <DIO_GetPortVal+0x80>
		case PORTA:
			RETVAL = READ_REG(PINA_Register);
    14ec:	e9 e3       	ldi	r30, 0x39	; 57
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <DIO_GetPortVal+0x8a>
			break;
		case PORTB:
			RETVAL = READ_REG(PINB_Register);
    14f6:	e6 e3       	ldi	r30, 0x36	; 54
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <DIO_GetPortVal+0x8a>
			break;
		case PORTC:
			RETVAL = READ_REG(PINC_Register);
    1500:	e3 e3       	ldi	r30, 0x33	; 51
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	0a c0       	rjmp	.+20     	; 0x151e <DIO_GetPortVal+0x8a>
			break;
		case PORTD:
			RETVAL = READ_REG(PIND_Register);
    150a:	e0 e3       	ldi	r30, 0x30	; 48
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	05 c0       	rjmp	.+10     	; 0x151e <DIO_GetPortVal+0x8a>
			break;
		default:
			RETVAL = EXIT_FAILURE;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_GetPortVal+0x8a>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	89 83       	std	Y+1, r24	; 0x01
	}
	return RETVAL;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <DIO_GetPinVal>:

Byte DIO_GetPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin) {
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <DIO_GetPinVal+0x6>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <DIO_GetPinVal+0x8>
    1536:	0f 92       	push	r0
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	8a 83       	std	Y+2, r24	; 0x02
    153e:	6b 83       	std	Y+3, r22	; 0x03

	Byte RETVAL = EXIT_FAILURE;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	85 30       	cpi	r24, 0x05	; 5
    1548:	08 f0       	brcs	.+2      	; 0x154c <DIO_GetPinVal+0x1e>
    154a:	9e c0       	rjmp	.+316    	; 0x1688 <DIO_GetPinVal+0x15a>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 30       	cpi	r24, 0x08	; 8
    1550:	08 f0       	brcs	.+2      	; 0x1554 <DIO_GetPinVal+0x26>
    1552:	9a c0       	rjmp	.+308    	; 0x1688 <DIO_GetPinVal+0x15a>

		switch (DIO_port) {
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3d 83       	std	Y+5, r19	; 0x05
    155c:	2c 83       	std	Y+4, r18	; 0x04
    155e:	4c 81       	ldd	r20, Y+4	; 0x04
    1560:	5d 81       	ldd	r21, Y+5	; 0x05
    1562:	42 30       	cpi	r20, 0x02	; 2
    1564:	51 05       	cpc	r21, r1
    1566:	b1 f1       	breq	.+108    	; 0x15d4 <DIO_GetPinVal+0xa6>
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	91 05       	cpc	r25, r1
    1570:	34 f4       	brge	.+12     	; 0x157e <DIO_GetPinVal+0x50>
    1572:	2c 81       	ldd	r18, Y+4	; 0x04
    1574:	3d 81       	ldd	r19, Y+5	; 0x05
    1576:	21 30       	cpi	r18, 0x01	; 1
    1578:	31 05       	cpc	r19, r1
    157a:	71 f0       	breq	.+28     	; 0x1598 <DIO_GetPinVal+0x6a>
    157c:	87 c0       	rjmp	.+270    	; 0x168c <DIO_GetPinVal+0x15e>
    157e:	4c 81       	ldd	r20, Y+4	; 0x04
    1580:	5d 81       	ldd	r21, Y+5	; 0x05
    1582:	43 30       	cpi	r20, 0x03	; 3
    1584:	51 05       	cpc	r21, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <DIO_GetPinVal+0x5c>
    1588:	43 c0       	rjmp	.+134    	; 0x1610 <DIO_GetPinVal+0xe2>
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	9d 81       	ldd	r25, Y+5	; 0x05
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	91 05       	cpc	r25, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <DIO_GetPinVal+0x68>
    1594:	5b c0       	rjmp	.+182    	; 0x164c <DIO_GetPinVal+0x11e>
    1596:	7a c0       	rjmp	.+244    	; 0x168c <DIO_GetPinVal+0x15e>
		case PORTA:
			RETVAL = READ_BIT(PINA_Register, DIO_pin);
    1598:	e9 e3       	ldi	r30, 0x39	; 57
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_GetPinVal+0x84>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	2a 95       	dec	r18
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_GetPinVal+0x80>
    15b6:	9a 01       	movw	r18, r20
    15b8:	28 23       	and	r18, r24
    15ba:	39 23       	and	r19, r25
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a9 01       	movw	r20, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_GetPinVal+0x9c>
    15c6:	55 95       	asr	r21
    15c8:	47 95       	ror	r20
    15ca:	8a 95       	dec	r24
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_GetPinVal+0x98>
    15ce:	ca 01       	movw	r24, r20
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	5c c0       	rjmp	.+184    	; 0x168c <DIO_GetPinVal+0x15e>
			break;
		case PORTB:
			RETVAL = READ_BIT(PINB_Register, DIO_pin);
    15d4:	e6 e3       	ldi	r30, 0x36	; 54
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_GetPinVal+0xc0>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	2a 95       	dec	r18
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_GetPinVal+0xbc>
    15f2:	9a 01       	movw	r18, r20
    15f4:	28 23       	and	r18, r24
    15f6:	39 23       	and	r19, r25
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_GetPinVal+0xd8>
    1602:	55 95       	asr	r21
    1604:	47 95       	ror	r20
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_GetPinVal+0xd4>
    160a:	ca 01       	movw	r24, r20
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	3e c0       	rjmp	.+124    	; 0x168c <DIO_GetPinVal+0x15e>
			break;
		case PORTC:
			RETVAL = READ_BIT(PINC_Register, DIO_pin);
    1610:	e3 e3       	ldi	r30, 0x33	; 51
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_GetPinVal+0xfc>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	2a 95       	dec	r18
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_GetPinVal+0xf8>
    162e:	9a 01       	movw	r18, r20
    1630:	28 23       	and	r18, r24
    1632:	39 23       	and	r19, r25
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a9 01       	movw	r20, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_GetPinVal+0x114>
    163e:	55 95       	asr	r21
    1640:	47 95       	ror	r20
    1642:	8a 95       	dec	r24
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_GetPinVal+0x110>
    1646:	ca 01       	movw	r24, r20
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	20 c0       	rjmp	.+64     	; 0x168c <DIO_GetPinVal+0x15e>
			break;
		case PORTD:
			RETVAL = READ_BIT(PIND_Register, DIO_pin);
    164c:	e0 e3       	ldi	r30, 0x30	; 48
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_GetPinVal+0x138>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	2a 95       	dec	r18
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_GetPinVal+0x134>
    166a:	9a 01       	movw	r18, r20
    166c:	28 23       	and	r18, r24
    166e:	39 23       	and	r19, r25
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a9 01       	movw	r20, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <DIO_GetPinVal+0x150>
    167a:	55 95       	asr	r21
    167c:	47 95       	ror	r20
    167e:	8a 95       	dec	r24
    1680:	e2 f7       	brpl	.-8      	; 0x167a <DIO_GetPinVal+0x14c>
    1682:	ca 01       	movw	r24, r20
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_GetPinVal+0x15e>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
	}

	return RETVAL;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <DIO_TogPortVal>:

DIO_ERROR_RETVAL_t DIO_TogPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <DIO_TogPortVal+0x6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <DIO_TogPortVal+0x8>
    16a6:	0f 92       	push	r0
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	8a 83       	std	Y+2, r24	; 0x02
    16ae:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    16b0:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	85 30       	cpi	r24, 0x05	; 5
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <DIO_TogPortVal+0x1c>
    16b8:	67 c0       	rjmp	.+206    	; 0x1788 <DIO_TogPortVal+0xea>
		switch (DIO_port) {
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 83       	std	Y+5, r19	; 0x05
    16c2:	2c 83       	std	Y+4, r18	; 0x04
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	91 05       	cpc	r25, r1
    16cc:	39 f1       	breq	.+78     	; 0x171c <DIO_TogPortVal+0x7e>
    16ce:	2c 81       	ldd	r18, Y+4	; 0x04
    16d0:	3d 81       	ldd	r19, Y+5	; 0x05
    16d2:	23 30       	cpi	r18, 0x03	; 3
    16d4:	31 05       	cpc	r19, r1
    16d6:	34 f4       	brge	.+12     	; 0x16e4 <DIO_TogPortVal+0x46>
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 05       	cpc	r25, r1
    16e0:	61 f0       	breq	.+24     	; 0x16fa <DIO_TogPortVal+0x5c>
    16e2:	4f c0       	rjmp	.+158    	; 0x1782 <DIO_TogPortVal+0xe4>
    16e4:	2c 81       	ldd	r18, Y+4	; 0x04
    16e6:	3d 81       	ldd	r19, Y+5	; 0x05
    16e8:	23 30       	cpi	r18, 0x03	; 3
    16ea:	31 05       	cpc	r19, r1
    16ec:	41 f1       	breq	.+80     	; 0x173e <DIO_TogPortVal+0xa0>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	91 05       	cpc	r25, r1
    16f6:	a1 f1       	breq	.+104    	; 0x1760 <DIO_TogPortVal+0xc2>
    16f8:	44 c0       	rjmp	.+136    	; 0x1782 <DIO_TogPortVal+0xe4>
		case PORTA:
			if (READ_REG(DDRA_Register) == PORT_OUTPUT) {
    16fa:	ea e3       	ldi	r30, 0x3A	; 58
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8f 3f       	cpi	r24, 0xFF	; 255
    1702:	49 f4       	brne	.+18     	; 0x1716 <DIO_TogPortVal+0x78>
				TOG_REG(PORTA_Register, value);
    1704:	ab e3       	ldi	r26, 0x3B	; 59
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	90 81       	ld	r25, Z
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	89 27       	eor	r24, r25
    1712:	8c 93       	st	X, r24
    1714:	3b c0       	rjmp	.+118    	; 0x178c <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	38 c0       	rjmp	.+112    	; 0x178c <DIO_TogPortVal+0xee>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PORT_OUTPUT) {
    171c:	e7 e3       	ldi	r30, 0x37	; 55
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8f 3f       	cpi	r24, 0xFF	; 255
    1724:	49 f4       	brne	.+18     	; 0x1738 <DIO_TogPortVal+0x9a>
				TOG_REG(PORTB_Register, value);
    1726:	a8 e3       	ldi	r26, 0x38	; 56
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	90 81       	ld	r25, Z
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	89 27       	eor	r24, r25
    1734:	8c 93       	st	X, r24
    1736:	2a c0       	rjmp	.+84     	; 0x178c <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	27 c0       	rjmp	.+78     	; 0x178c <DIO_TogPortVal+0xee>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PORT_OUTPUT) {
    173e:	e4 e3       	ldi	r30, 0x34	; 52
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8f 3f       	cpi	r24, 0xFF	; 255
    1746:	49 f4       	brne	.+18     	; 0x175a <DIO_TogPortVal+0xbc>
				TOG_REG(PORTC_Register, value);
    1748:	a5 e3       	ldi	r26, 0x35	; 53
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e3       	ldi	r30, 0x35	; 53
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	90 81       	ld	r25, Z
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	89 27       	eor	r24, r25
    1756:	8c 93       	st	X, r24
    1758:	19 c0       	rjmp	.+50     	; 0x178c <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	16 c0       	rjmp	.+44     	; 0x178c <DIO_TogPortVal+0xee>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PORT_OUTPUT) {
    1760:	e1 e3       	ldi	r30, 0x31	; 49
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8f 3f       	cpi	r24, 0xFF	; 255
    1768:	49 f4       	brne	.+18     	; 0x177c <DIO_TogPortVal+0xde>
				TOG_REG(PORTD_Register, value);
    176a:	a2 e3       	ldi	r26, 0x32	; 50
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e2 e3       	ldi	r30, 0x32	; 50
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	90 81       	ld	r25, Z
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	89 27       	eor	r24, r25
    1778:	8c 93       	st	X, r24
    177a:	08 c0       	rjmp	.+16     	; 0x178c <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	05 c0       	rjmp	.+10     	; 0x178c <DIO_TogPortVal+0xee>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_TogPortVal+0xee>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    178c:	89 81       	ldd	r24, Y+1	; 0x01
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <DIO_TogPinVal>:

DIO_ERROR_RETVAL_t DIO_TogPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin) {
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <DIO_TogPinVal+0x6>
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <DIO_TogPinVal+0x8>
    17a6:	0f 92       	push	r0
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    17b0:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	85 30       	cpi	r24, 0x05	; 5
    17b6:	08 f0       	brcs	.+2      	; 0x17ba <DIO_TogPinVal+0x1c>
    17b8:	02 c1       	rjmp	.+516    	; 0x19be <DIO_TogPinVal+0x220>
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 30       	cpi	r24, 0x08	; 8
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <DIO_TogPinVal+0x24>
    17c0:	fe c0       	rjmp	.+508    	; 0x19be <DIO_TogPinVal+0x220>
		switch (DIO_port) {
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3d 83       	std	Y+5, r19	; 0x05
    17ca:	2c 83       	std	Y+4, r18	; 0x04
    17cc:	4c 81       	ldd	r20, Y+4	; 0x04
    17ce:	5d 81       	ldd	r21, Y+5	; 0x05
    17d0:	42 30       	cpi	r20, 0x02	; 2
    17d2:	51 05       	cpc	r21, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <DIO_TogPinVal+0x3a>
    17d6:	4e c0       	rjmp	.+156    	; 0x1874 <DIO_TogPinVal+0xd6>
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	34 f4       	brge	.+12     	; 0x17ee <DIO_TogPinVal+0x50>
    17e2:	2c 81       	ldd	r18, Y+4	; 0x04
    17e4:	3d 81       	ldd	r19, Y+5	; 0x05
    17e6:	21 30       	cpi	r18, 0x01	; 1
    17e8:	31 05       	cpc	r19, r1
    17ea:	71 f0       	breq	.+28     	; 0x1808 <DIO_TogPinVal+0x6a>
    17ec:	e5 c0       	rjmp	.+458    	; 0x19b8 <DIO_TogPinVal+0x21a>
    17ee:	4c 81       	ldd	r20, Y+4	; 0x04
    17f0:	5d 81       	ldd	r21, Y+5	; 0x05
    17f2:	43 30       	cpi	r20, 0x03	; 3
    17f4:	51 05       	cpc	r21, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <DIO_TogPinVal+0x5c>
    17f8:	73 c0       	rjmp	.+230    	; 0x18e0 <DIO_TogPinVal+0x142>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	84 30       	cpi	r24, 0x04	; 4
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <DIO_TogPinVal+0x68>
    1804:	a3 c0       	rjmp	.+326    	; 0x194c <DIO_TogPinVal+0x1ae>
    1806:	d8 c0       	rjmp	.+432    	; 0x19b8 <DIO_TogPinVal+0x21a>
		case PORTA:
			if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    1808:	ea e3       	ldi	r30, 0x3A	; 58
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_TogPinVal+0x84>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	2a 95       	dec	r18
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_TogPinVal+0x80>
    1826:	9a 01       	movw	r18, r20
    1828:	28 23       	and	r18, r24
    182a:	39 23       	and	r19, r25
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_TogPinVal+0x9c>
    1836:	55 95       	asr	r21
    1838:	47 95       	ror	r20
    183a:	8a 95       	dec	r24
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_TogPinVal+0x98>
    183e:	ca 01       	movw	r24, r20
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	a1 f4       	brne	.+40     	; 0x186e <DIO_TogPinVal+0xd0>
				TOG_BIT(PORTA_Register, DIO_pin);
    1846:	ab e3       	ldi	r26, 0x3B	; 59
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	eb e3       	ldi	r30, 0x3B	; 59
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_TogPinVal+0xc6>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_TogPinVal+0xc2>
    1868:	84 27       	eor	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	aa c0       	rjmp	.+340    	; 0x19c2 <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	a7 c0       	rjmp	.+334    	; 0x19c2 <DIO_TogPinVal+0x224>
			}
			break;
		case PORTB:
			if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    1874:	e7 e3       	ldi	r30, 0x37	; 55
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_TogPinVal+0xf0>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	2a 95       	dec	r18
    1890:	e2 f7       	brpl	.-8      	; 0x188a <DIO_TogPinVal+0xec>
    1892:	9a 01       	movw	r18, r20
    1894:	28 23       	and	r18, r24
    1896:	39 23       	and	r19, r25
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a9 01       	movw	r20, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_TogPinVal+0x108>
    18a2:	55 95       	asr	r21
    18a4:	47 95       	ror	r20
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_TogPinVal+0x104>
    18aa:	ca 01       	movw	r24, r20
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	a1 f4       	brne	.+40     	; 0x18da <DIO_TogPinVal+0x13c>
				TOG_BIT(PORTB_Register, DIO_pin);
    18b2:	a8 e3       	ldi	r26, 0x38	; 56
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e8 e3       	ldi	r30, 0x38	; 56
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_TogPinVal+0x132>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_TogPinVal+0x12e>
    18d4:	84 27       	eor	r24, r20
    18d6:	8c 93       	st	X, r24
    18d8:	74 c0       	rjmp	.+232    	; 0x19c2 <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	71 c0       	rjmp	.+226    	; 0x19c2 <DIO_TogPinVal+0x224>
			}
			break;
		case PORTC:
			if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    18e0:	e4 e3       	ldi	r30, 0x34	; 52
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <DIO_TogPinVal+0x15c>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	2a 95       	dec	r18
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <DIO_TogPinVal+0x158>
    18fe:	9a 01       	movw	r18, r20
    1900:	28 23       	and	r18, r24
    1902:	39 23       	and	r19, r25
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a9 01       	movw	r20, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_TogPinVal+0x174>
    190e:	55 95       	asr	r21
    1910:	47 95       	ror	r20
    1912:	8a 95       	dec	r24
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_TogPinVal+0x170>
    1916:	ca 01       	movw	r24, r20
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	91 05       	cpc	r25, r1
    191c:	a1 f4       	brne	.+40     	; 0x1946 <DIO_TogPinVal+0x1a8>
				TOG_BIT(PORTC_Register, DIO_pin);
    191e:	a5 e3       	ldi	r26, 0x35	; 53
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e5 e3       	ldi	r30, 0x35	; 53
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_TogPinVal+0x19e>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_TogPinVal+0x19a>
    1940:	84 27       	eor	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	3e c0       	rjmp	.+124    	; 0x19c2 <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	3b c0       	rjmp	.+118    	; 0x19c2 <DIO_TogPinVal+0x224>
			}
			break;
		case PORTD:
			if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    194c:	e1 e3       	ldi	r30, 0x31	; 49
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_TogPinVal+0x1c8>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	2a 95       	dec	r18
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_TogPinVal+0x1c4>
    196a:	9a 01       	movw	r18, r20
    196c:	28 23       	and	r18, r24
    196e:	39 23       	and	r19, r25
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a9 01       	movw	r20, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_TogPinVal+0x1e0>
    197a:	55 95       	asr	r21
    197c:	47 95       	ror	r20
    197e:	8a 95       	dec	r24
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_TogPinVal+0x1dc>
    1982:	ca 01       	movw	r24, r20
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	91 05       	cpc	r25, r1
    1988:	a1 f4       	brne	.+40     	; 0x19b2 <DIO_TogPinVal+0x214>
				TOG_BIT(PORTD_Register, DIO_pin);
    198a:	a2 e3       	ldi	r26, 0x32	; 50
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_TogPinVal+0x20a>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <DIO_TogPinVal+0x206>
    19ac:	84 27       	eor	r24, r20
    19ae:	8c 93       	st	X, r24
    19b0:	08 c0       	rjmp	.+16     	; 0x19c2 <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <DIO_TogPinVal+0x224>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_TogPinVal+0x224>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <APP2_Init>:
#include "../MCAL/SPI/SPI.h"
#include "APP_2.h"

uint8_t character = 0;
uint8_t dummy = 0;
void APP2_Init() {
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	switch (SPI_Mode) {
	case Master:
		UART_Init(UARTChannel_1);
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_Init>
		SPI_Init(SPIChannel_1);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Init>
		SPI_Init(SPIChannel_1);
		DIO_PortInit(PORTD,PORT_OUTPUT);
		DIO_SetPortVal(PORTD, PORT_LOW);
		break;
	}
}
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <APP2_Start>:
void APP2_Start() {
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	switch (SPI_Mode) {
	case Master:
		while (UART_ReceiveChar(UARTChannel_1, &character) != OperationSuccess);
    19f6:	28 e6       	ldi	r18, 0x68	; 104
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	b9 01       	movw	r22, r18
    19fe:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART_ReceiveChar>
    1a02:	88 23       	and	r24, r24
    1a04:	c1 f7       	brne	.-16     	; 0x19f6 <APP2_Start+0x8>
		SPI_TransmitChar(SPIChannel_1, character, SlaveID_1);
    1a06:	90 91 68 00 	lds	r25, 0x0068
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	69 2f       	mov	r22, r25
    1a0e:	41 e0       	ldi	r20, 0x01	; 1
    1a10:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_TransmitChar>
		while(SPI_ReceiveChar(SPIChannel_1, &dummy, SlaveID_1) != OperationSuccess) ;
    1a14:	29 e6       	ldi	r18, 0x69	; 105
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	b9 01       	movw	r22, r18
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <SPI_ReceiveChar>
    1a22:	88 23       	and	r24, r24
    1a24:	b9 f7       	brne	.-18     	; 0x1a14 <APP2_Start+0x26>
		while (SPI_TransmitChar(SPIChannel_1, dummy, SlaveID_1) != OperationSuccess);
		while (SPI_ReceiveChar(SPIChannel_1, &character, SlaveID_1)	!= OperationSuccess);
		DIO_SetPortVal(PORTD, character);
		break;
	}
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <main>:
#include "MCAL/DIO/DIO_DRIVER_TypeDef.h"
#include "MCAL/DIO/DIO_DRIVER.h"
#include "MCAL/UART/UART.h"
#include "MCAL/SPI/SPI.h"
#include "APP/APP_2.h"
int main() {
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	APP2_Init();
    1a34:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <APP2_Init>
	while (1)
	{
		APP2_Start();
    1a38:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <APP2_Start>
    1a3c:	fd cf       	rjmp	.-6      	; 0x1a38 <main+0xc>

00001a3e <_exit>:
    1a3e:	f8 94       	cli

00001a40 <__stop_program>:
    1a40:	ff cf       	rjmp	.-2      	; 0x1a40 <__stop_program>
