
DesignImplementDriverForSPI_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000107  00800060  00800060  00001a50  2**0
                  ALLOC
  2 .stab         00002568  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c1f  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_12>
      34:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_13>
      38:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_14>
      3c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_15>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 36       	cpi	r26, 0x67	; 103
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <main>
      74:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_Init>:
void static (*UART_TX_Complete_callback)(void)=NULL;
void __vector_13(void)__attribute__((signal,used));//RX_complete
void __vector_14(void)__attribute__((signal,used));//UDRE Empty
void __vector_15(void)__attribute__((signal,used));//TX_complete

uint8_t UART_Init(uint8_t UartNumber) {
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <UART_Init+0x6>
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
      86:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
      88:	8f ef       	ldi	r24, 0xFF	; 255
      8a:	89 83       	std	Y+1, r24	; 0x01
	if (UartNumber > NumOfUARTChannels) {
      8c:	8a 81       	ldd	r24, Y+2	; 0x02
      8e:	82 30       	cpi	r24, 0x02	; 2
      90:	18 f0       	brcs	.+6      	; 0x98 <UART_Init+0x1c>
		//error uart channel out of range
		ErrRetVal = Unavailable_UART_Channel;
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	89 83       	std	Y+1, r24	; 0x01
      96:	67 c0       	rjmp	.+206    	; 0x166 <UART_Init+0xea>
	} else {
		/* configure control and status register A
		 * (double transmission speed & Multi-processor communication mode) */
		MODIFY_REG(UART_ControlStatusRegA, UART_DoubleTransmissionSpeed_MSK,
      98:	ab e2       	ldi	r26, 0x2B	; 43
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	eb e2       	ldi	r30, 0x2B	; 43
      9e:	f0 e0       	ldi	r31, 0x00	; 0
      a0:	80 81       	ld	r24, Z
      a2:	82 60       	ori	r24, 0x02	; 2
      a4:	8c 93       	st	X, r24
				DoubleSpeedTransmission<<UART_DoubleTransmissionSpeed_BIT);
		MODIFY_REG(UART_ControlStatusRegA,
      a6:	ab e2       	ldi	r26, 0x2B	; 43
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	eb e2       	ldi	r30, 0x2B	; 43
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	8e 7f       	andi	r24, 0xFE	; 254
      b2:	8c 93       	st	X, r24
				UART_MultiProcessorCommunicationMode_MSK,
				MultiProcessCommunicationMode<<UART_MultiProcessorCommunicationMode_BIT);

		/* Setting Uart Data Size */
		MODIFY_REG(UART_ControlStatusRegB, UART_CharacterSizeBit_2_MSK,
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	ea e2       	ldi	r30, 0x2A	; 42
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	8b 7f       	andi	r24, 0xFB	; 251
      c0:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,2)<<UART_CharacterSizeBit_2_BIT);
		SET_BIT(UART_ControlStatusRegC, UART_RegisterSelect_BIT);
      c2:	a0 e4       	ldi	r26, 0x40	; 64
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	e0 e4       	ldi	r30, 0x40	; 64
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	80 68       	ori	r24, 0x80	; 128
      ce:	8c 93       	st	X, r24
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_1_MSK,
      d0:	a0 e4       	ldi	r26, 0x40	; 64
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e0 e4       	ldi	r30, 0x40	; 64
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	84 60       	ori	r24, 0x04	; 4
      dc:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,1)<<UART_CharacterSizeBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_0_MSK,
      de:	a0 e4       	ldi	r26, 0x40	; 64
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e0 e4       	ldi	r30, 0x40	; 64
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	82 60       	ori	r24, 0x02	; 2
      ea:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,0)<<UART_CharacterSizeBit_0_BIT);

		/* setting Stop Bit */
		MODIFY_REG(UART_ControlStatusRegC, UART_StopBitSelect_MSK,
      ec:	a0 e4       	ldi	r26, 0x40	; 64
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	e0 e4       	ldi	r30, 0x40	; 64
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	87 7f       	andi	r24, 0xF7	; 247
      f8:	8c 93       	st	X, r24
				StopBitMode<<UART_StopBitSelect_BIT);

		/* Setting Parity mode */
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_1_MSK,
      fa:	a0 e4       	ldi	r26, 0x40	; 64
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	e0 e4       	ldi	r30, 0x40	; 64
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	8f 7d       	andi	r24, 0xDF	; 223
     106:	8c 93       	st	X, r24
				READ_BIT(ParityMode,1)<<UART_ParityModeSelectBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_0_MSK,
     108:	a0 e4       	ldi	r26, 0x40	; 64
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	e0 e4       	ldi	r30, 0x40	; 64
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	8c 93       	st	X, r24
				READ_BIT(ParityMode,0)<<UART_ParityModeSelectBit_0_BIT);
		/* Setting communication mode (synch. or Asynch.)*/
		MODIFY_REG(UART_ControlStatusRegC, UART_SynchAsynchModeSelect_MSK,
     116:	a0 e4       	ldi	r26, 0x40	; 64
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	e0 e4       	ldi	r30, 0x40	; 64
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8f 7b       	andi	r24, 0xBF	; 191
     122:	8c 93       	st	X, r24
				CommunicationMode<<UART_SynchAsynchModeSelect_BIT);

		/*Set Clock Poalrity*/
		// ignored as all our work is asynchronus communication mode.
		/*Set the value of baud rate register*/
		CLEAR_BIT(UART_BaudRateRegH,UART_RegisterSelect_BIT);
     124:	a0 e4       	ldi	r26, 0x40	; 64
     126:	b0 e0       	ldi	r27, 0x00	; 0
     128:	e0 e4       	ldi	r30, 0x40	; 64
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	8f 77       	andi	r24, 0x7F	; 127
     130:	8c 93       	st	X, r24
		MODIFY_REG(UART_BaudRateRegH, UART_BaudRateRegH_MSK, (BaudCalc(BaudRate)>>8)&0x0F);
     132:	a0 e4       	ldi	r26, 0x40	; 64
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e0 e4       	ldi	r30, 0x40	; 64
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 7f       	andi	r24, 0xF0	; 240
     13e:	8c 93       	st	X, r24
		WRITE_REG(UART_BaudRateRegL,BaudCalc(BaudRate)&0xFF);
     140:	e9 e2       	ldi	r30, 0x29	; 41
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	87 e6       	ldi	r24, 0x67	; 103
     146:	80 83       	st	Z, r24

		/* Enabling receiving and transmitting*/
		MODIFY_REG(UART_ControlStatusRegB, UART_ReceiveEnable_MSK,
     148:	aa e2       	ldi	r26, 0x2A	; 42
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	ea e2       	ldi	r30, 0x2A	; 42
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 61       	ori	r24, 0x10	; 16
     154:	8c 93       	st	X, r24
				UART_ReceiveEnable_MSK);
		MODIFY_REG(UART_ControlStatusRegB, UART_TransmissionEnable_MSK,
     156:	aa e2       	ldi	r26, 0x2A	; 42
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	ea e2       	ldi	r30, 0x2A	; 42
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	88 60       	ori	r24, 0x08	; 8
     162:	8c 93       	st	X, r24
				UART_TransmissionEnable_MSK);
		ErrRetVal = OperationSuccess;
     164:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrRetVal;
     166:	89 81       	ldd	r24, Y+1	; 0x01
}
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	08 95       	ret

00000172 <UART_FlushReceiveBuffer>:
uint8_t UART_FlushReceiveBuffer(void) {
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	00 d0       	rcall	.+0      	; 0x178 <UART_FlushReceiveBuffer+0x6>
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flushedCharacter;
	flushedCharacter = UART_DataReg;
     180:	ec e2       	ldi	r30, 0x2C	; 44
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = OperationSuccess;
     188:	1a 82       	std	Y+2, r1	; 0x02
	return ErrRetVal;
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	cf 91       	pop	r28
     192:	df 91       	pop	r29
     194:	08 95       	ret

00000196 <UART_TransmitChar>:

uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	00 d0       	rcall	.+0      	; 0x19c <UART_TransmitChar+0x6>
     19c:	0f 92       	push	r0
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	8a 83       	std	Y+2, r24	; 0x02
     1a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA, 5)) {
     1aa:	eb e2       	ldi	r30, 0x2B	; 43
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	88 2f       	mov	r24, r24
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	80 72       	andi	r24, 0x20	; 32
     1b6:	90 70       	andi	r25, 0x00	; 0
     1b8:	95 95       	asr	r25
     1ba:	87 95       	ror	r24
     1bc:	95 95       	asr	r25
     1be:	87 95       	ror	r24
     1c0:	95 95       	asr	r25
     1c2:	87 95       	ror	r24
     1c4:	95 95       	asr	r25
     1c6:	87 95       	ror	r24
     1c8:	95 95       	asr	r25
     1ca:	87 95       	ror	r24
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	31 f0       	breq	.+12     	; 0x1dc <UART_TransmitChar+0x46>
		UART_DataReg= TxChar;
     1d0:	ec e2       	ldi	r30, 0x2C	; 44
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     1d8:	19 82       	std	Y+1, r1	; 0x01
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <UART_TransmitChar+0x4a>
	}
	else
	{
		ErrRetVal = Transmission_Fail;
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <UART_ReceiveChar+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <UART_ReceiveChar+0x8>
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	8a 83       	std	Y+2, r24	; 0x02
     1fc:	7c 83       	std	Y+4, r23	; 0x04
     1fe:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA,7) == 1) {
     204:	eb e2       	ldi	r30, 0x2B	; 43
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 1f       	adc	r24, r24
     20c:	88 27       	eor	r24, r24
     20e:	88 1f       	adc	r24, r24
     210:	88 2f       	mov	r24, r24
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	90 70       	andi	r25, 0x00	; 0
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	91 05       	cpc	r25, r1
     21a:	41 f4       	brne	.+16     	; 0x22c <UART_ReceiveChar+0x3e>
		*RxChar = UART_DataReg;
     21c:	ec e2       	ldi	r30, 0x2C	; 44
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	eb 81       	ldd	r30, Y+3	; 0x03
     224:	fc 81       	ldd	r31, Y+4	; 0x04
     226:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     228:	19 82       	std	Y+1, r1	; 0x01
     22a:	02 c0       	rjmp	.+4      	; 0x230 <UART_ReceiveChar+0x42>
	}
	else
	{
		ErrRetVal = Receiving_Fail;
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     230:	89 81       	ldd	r24, Y+1	; 0x01
}
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	08 95       	ret

00000240 <UART_TransmitString>:

uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString)
{
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	00 d0       	rcall	.+0      	; 0x246 <UART_TransmitString+0x6>
     246:	00 d0       	rcall	.+0      	; 0x248 <UART_TransmitString+0x8>
     248:	0f 92       	push	r0
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	8b 83       	std	Y+3, r24	; 0x03
     250:	7d 83       	std	Y+5, r23	; 0x05
     252:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     258:	19 82       	std	Y+1, r1	; 0x01
	while(iterator <= 255)
	{
		if(*TxString=='\0')
     25a:	ec 81       	ldd	r30, Y+4	; 0x04
     25c:	fd 81       	ldd	r31, Y+5	; 0x05
     25e:	80 81       	ld	r24, Z
     260:	88 23       	and	r24, r24
     262:	81 f4       	brne	.+32     	; 0x284 <UART_TransmitString+0x44>
		{
			ErrRetVal=OperationSuccess;
     264:	1a 82       	std	Y+2, r1	; 0x02
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	6d e0       	ldi	r22, 0x0D	; 13
     26a:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitChar>
     26e:	88 23       	and	r24, r24
     270:	d1 f7       	brne	.-12     	; 0x266 <UART_TransmitString+0x26>
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
			iterator++;
			TxString++;
		}
	}
	return ErrRetVal;
     272:	8a 81       	ldd	r24, Y+2	; 0x02
}
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	cf 91       	pop	r28
     280:	df 91       	pop	r29
     282:	08 95       	ret
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
			break;
		}
		else
		{
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
     284:	ec 81       	ldd	r30, Y+4	; 0x04
     286:	fd 81       	ldd	r31, Y+5	; 0x05
     288:	90 81       	ld	r25, Z
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	69 2f       	mov	r22, r25
     28e:	0e 94 cb 00 	call	0x196	; 0x196 <UART_TransmitChar>
     292:	88 23       	and	r24, r24
     294:	b9 f7       	brne	.-18     	; 0x284 <UART_TransmitString+0x44>
			iterator++;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	8f 5f       	subi	r24, 0xFF	; 255
     29a:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
     29c:	8c 81       	ldd	r24, Y+4	; 0x04
     29e:	9d 81       	ldd	r25, Y+5	; 0x05
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	9d 83       	std	Y+5, r25	; 0x05
     2a4:	8c 83       	std	Y+4, r24	; 0x04
     2a6:	d9 cf       	rjmp	.-78     	; 0x25a <UART_TransmitString+0x1a>

000002a8 <UART_ReceiveString>:
		}
	}
	return ErrRetVal;
}
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <UART_ReceiveString+0x6>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <UART_ReceiveString+0x8>
     2b0:	0f 92       	push	r0
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	8b 83       	std	Y+3, r24	; 0x03
     2b8:	7d 83       	std	Y+5, r23	; 0x05
     2ba:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     2bc:	8f ef       	ldi	r24, 0xFF	; 255
     2be:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     2c0:	19 82       	std	Y+1, r1	; 0x01
	while(iterator<=255)
	{
		if(UART_ReceiveChar(UartNumber,RxString)==OperationSuccess)
     2c2:	2c 81       	ldd	r18, Y+4	; 0x04
     2c4:	3d 81       	ldd	r19, Y+5	; 0x05
     2c6:	8b 81       	ldd	r24, Y+3	; 0x03
     2c8:	b9 01       	movw	r22, r18
     2ca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART_ReceiveChar>
     2ce:	88 23       	and	r24, r24
     2d0:	c1 f7       	brne	.-16     	; 0x2c2 <UART_ReceiveString+0x1a>
		{
			if(*RxString == '\r' || *RxString == '\n')
     2d2:	ec 81       	ldd	r30, Y+4	; 0x04
     2d4:	fd 81       	ldd	r31, Y+5	; 0x05
     2d6:	80 81       	ld	r24, Z
     2d8:	8d 30       	cpi	r24, 0x0D	; 13
     2da:	29 f0       	breq	.+10     	; 0x2e6 <UART_ReceiveString+0x3e>
     2dc:	ec 81       	ldd	r30, Y+4	; 0x04
     2de:	fd 81       	ldd	r31, Y+5	; 0x05
     2e0:	80 81       	ld	r24, Z
     2e2:	8a 30       	cpi	r24, 0x0A	; 10
     2e4:	69 f4       	brne	.+26     	; 0x300 <UART_ReceiveString+0x58>
			{
				*RxString='\0';
     2e6:	ec 81       	ldd	r30, Y+4	; 0x04
     2e8:	fd 81       	ldd	r31, Y+5	; 0x05
     2ea:	10 82       	st	Z, r1
				ErrRetVal = OperationSuccess;
     2ec:	1a 82       	std	Y+2, r1	; 0x02
		else
		{
			continue;
		}
	}
	return ErrRetVal;
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	cf 91       	pop	r28
     2fc:	df 91       	pop	r29
     2fe:	08 95       	ret
				ErrRetVal = OperationSuccess;
				break;
			}
			else
			{
			RxString++;
     300:	8c 81       	ldd	r24, Y+4	; 0x04
     302:	9d 81       	ldd	r25, Y+5	; 0x05
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	9d 83       	std	Y+5, r25	; 0x05
     308:	8c 83       	std	Y+4, r24	; 0x04
			iterator++;
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	89 83       	std	Y+1, r24	; 0x01
     310:	d8 cf       	rjmp	.-80     	; 0x2c2 <UART_ReceiveString+0x1a>

00000312 <UART_EnableInterrupt>:
		}
	}
	return ErrRetVal;
}

uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	00 d0       	rcall	.+0      	; 0x318 <UART_EnableInterrupt+0x6>
     318:	00 d0       	rcall	.+0      	; 0x31a <UART_EnableInterrupt+0x8>
     31a:	0f 92       	push	r0
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	8a 83       	std	Y+2, r24	; 0x02
     322:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
     328:	af e5       	ldi	r26, 0x5F	; 95
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	ef e5       	ldi	r30, 0x5F	; 95
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	80 68       	ori	r24, 0x80	; 128
     334:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	83 30       	cpi	r24, 0x03	; 3
     33a:	88 f5       	brcc	.+98     	; 0x39e <UART_EnableInterrupt+0x8c>
	{
		switch (UartInterruptType)
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	28 2f       	mov	r18, r24
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	3d 83       	std	Y+5, r19	; 0x05
     344:	2c 83       	std	Y+4, r18	; 0x04
     346:	8c 81       	ldd	r24, Y+4	; 0x04
     348:	9d 81       	ldd	r25, Y+5	; 0x05
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	91 05       	cpc	r25, r1
     34e:	91 f0       	breq	.+36     	; 0x374 <UART_EnableInterrupt+0x62>
     350:	2c 81       	ldd	r18, Y+4	; 0x04
     352:	3d 81       	ldd	r19, Y+5	; 0x05
     354:	22 30       	cpi	r18, 0x02	; 2
     356:	31 05       	cpc	r19, r1
     358:	b1 f0       	breq	.+44     	; 0x386 <UART_EnableInterrupt+0x74>
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	9d 81       	ldd	r25, Y+5	; 0x05
     35e:	00 97       	sbiw	r24, 0x00	; 0
     360:	d9 f4       	brne	.+54     	; 0x398 <UART_EnableInterrupt+0x86>
		{
		case RxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     362:	aa e2       	ldi	r26, 0x2A	; 42
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	ea e2       	ldi	r30, 0x2A	; 42
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_MSK,
					UART_ReceiveCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     370:	19 82       	std	Y+1, r1	; 0x01
     372:	17 c0       	rjmp	.+46     	; 0x3a2 <UART_EnableInterrupt+0x90>
			break;
		case DataBufferEmptyInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     374:	aa e2       	ldi	r26, 0x2A	; 42
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	ea e2       	ldi	r30, 0x2A	; 42
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	80 62       	ori	r24, 0x20	; 32
     380:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_MSK,
					UART_DataRegisterEmptyInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     382:	19 82       	std	Y+1, r1	; 0x01
     384:	0e c0       	rjmp	.+28     	; 0x3a2 <UART_EnableInterrupt+0x90>
			break;
		case TxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     386:	aa e2       	ldi	r26, 0x2A	; 42
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	ea e2       	ldi	r30, 0x2A	; 42
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	80 64       	ori	r24, 0x40	; 64
     392:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_MSK,
					UART_TransmissionCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     394:	19 82       	std	Y+1, r1	; 0x01
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <UART_EnableInterrupt+0x90>
			break;
		default:
			ErrRetVal = Interrupt_Enabling_Fail;
     398:	89 e0       	ldi	r24, 0x09	; 9
     39a:	89 83       	std	Y+1, r24	; 0x01
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <UART_EnableInterrupt+0x90>
		}
	}
	else
	{
		ErrRetVal = Interrupt_Enabling_Fail;
     39e:	89 e0       	ldi	r24, 0x09	; 9
     3a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <UART_DisableInterrupt+0x6>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <UART_DisableInterrupt+0x8>
     3bc:	0f 92       	push	r0
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	8a 83       	std	Y+2, r24	; 0x02
     3c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     3ca:	8b 81       	ldd	r24, Y+3	; 0x03
     3cc:	83 30       	cpi	r24, 0x03	; 3
     3ce:	88 f5       	brcc	.+98     	; 0x432 <UART_DisableInterrupt+0x7e>
		{
			switch (UartInterruptType)
     3d0:	8b 81       	ldd	r24, Y+3	; 0x03
     3d2:	28 2f       	mov	r18, r24
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	3d 83       	std	Y+5, r19	; 0x05
     3d8:	2c 83       	std	Y+4, r18	; 0x04
     3da:	8c 81       	ldd	r24, Y+4	; 0x04
     3dc:	9d 81       	ldd	r25, Y+5	; 0x05
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	91 05       	cpc	r25, r1
     3e2:	91 f0       	breq	.+36     	; 0x408 <UART_DisableInterrupt+0x54>
     3e4:	2c 81       	ldd	r18, Y+4	; 0x04
     3e6:	3d 81       	ldd	r19, Y+5	; 0x05
     3e8:	22 30       	cpi	r18, 0x02	; 2
     3ea:	31 05       	cpc	r19, r1
     3ec:	b1 f0       	breq	.+44     	; 0x41a <UART_DisableInterrupt+0x66>
     3ee:	8c 81       	ldd	r24, Y+4	; 0x04
     3f0:	9d 81       	ldd	r25, Y+5	; 0x05
     3f2:	00 97       	sbiw	r24, 0x00	; 0
     3f4:	d9 f4       	brne	.+54     	; 0x42c <UART_DisableInterrupt+0x78>
			{
			case RxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     3f6:	aa e2       	ldi	r26, 0x2A	; 42
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	ea e2       	ldi	r30, 0x2A	; 42
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	8f 77       	andi	r24, 0x7F	; 127
     402:	8c 93       	st	X, r24
						UART_ReceiveCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     404:	19 82       	std	Y+1, r1	; 0x01
     406:	17 c0       	rjmp	.+46     	; 0x436 <UART_DisableInterrupt+0x82>
				break;
			case DataBufferEmptyInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     408:	aa e2       	ldi	r26, 0x2A	; 42
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	ea e2       	ldi	r30, 0x2A	; 42
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	8f 7d       	andi	r24, 0xDF	; 223
     414:	8c 93       	st	X, r24
						UART_DataRegisterEmptyInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     416:	19 82       	std	Y+1, r1	; 0x01
     418:	0e c0       	rjmp	.+28     	; 0x436 <UART_DisableInterrupt+0x82>
				break;
			case TxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     41a:	aa e2       	ldi	r26, 0x2A	; 42
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	ea e2       	ldi	r30, 0x2A	; 42
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	8f 7b       	andi	r24, 0xBF	; 191
     426:	8c 93       	st	X, r24
						UART_TransmissionCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     428:	19 82       	std	Y+1, r1	; 0x01
     42a:	05 c0       	rjmp	.+10     	; 0x436 <UART_DisableInterrupt+0x82>
				break;
			default:
				ErrRetVal = Interrupt_Disabling_Fail;
     42c:	88 e0       	ldi	r24, 0x08	; 8
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	02 c0       	rjmp	.+4      	; 0x436 <UART_DisableInterrupt+0x82>
			}
		}
		else
		{
			ErrRetVal = Interrupt_Disabling_Fail;
     432:	88 e0       	ldi	r24, 0x08	; 8
     434:	89 83       	std	Y+1, r24	; 0x01
		}
	return ErrRetVal;
     436:	89 81       	ldd	r24, Y+1	; 0x01
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <UART_Set_RX_CompleteCallback>:
uint8_t UART_Set_RX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	00 d0       	rcall	.+0      	; 0x44e <UART_Set_RX_CompleteCallback+0x6>
     44e:	00 d0       	rcall	.+0      	; 0x450 <UART_Set_RX_CompleteCallback+0x8>
     450:	0f 92       	push	r0
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	8a 83       	std	Y+2, r24	; 0x02
     458:	6b 83       	std	Y+3, r22	; 0x03
     45a:	5d 83       	std	Y+5, r21	; 0x05
     45c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     45e:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	9d 81       	ldd	r25, Y+5	; 0x05
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	31 f0       	breq	.+12     	; 0x474 <UART_Set_RX_CompleteCallback+0x2c>
		UART_RX_Complete_callback = callBack;
     468:	8c 81       	ldd	r24, Y+4	; 0x04
     46a:	9d 81       	ldd	r25, Y+5	; 0x05
     46c:	90 93 61 00 	sts	0x0061, r25
     470:	80 93 60 00 	sts	0x0060, r24
	return ErrRetVal;
     474:	89 81       	ldd	r24, Y+1	; 0x01
}
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <UART_UDRE_Empty_CompleteCallback>:
uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	00 d0       	rcall	.+0      	; 0x48c <UART_UDRE_Empty_CompleteCallback+0x6>
     48c:	00 d0       	rcall	.+0      	; 0x48e <UART_UDRE_Empty_CompleteCallback+0x8>
     48e:	0f 92       	push	r0
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	8a 83       	std	Y+2, r24	; 0x02
     496:	6b 83       	std	Y+3, r22	; 0x03
     498:	5d 83       	std	Y+5, r21	; 0x05
     49a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     49c:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     49e:	8c 81       	ldd	r24, Y+4	; 0x04
     4a0:	9d 81       	ldd	r25, Y+5	; 0x05
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	31 f0       	breq	.+12     	; 0x4b2 <UART_UDRE_Empty_CompleteCallback+0x2c>
		UART_UDRE_Empty_callback = callBack;
     4a6:	8c 81       	ldd	r24, Y+4	; 0x04
     4a8:	9d 81       	ldd	r25, Y+5	; 0x05
     4aa:	90 93 63 00 	sts	0x0063, r25
     4ae:	80 93 62 00 	sts	0x0062, r24
	return ErrRetVal;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <UART_Set_TX_CompleteCallback>:
uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <UART_Set_TX_CompleteCallback+0x6>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <UART_Set_TX_CompleteCallback+0x8>
     4cc:	0f 92       	push	r0
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	8a 83       	std	Y+2, r24	; 0x02
     4d4:	6b 83       	std	Y+3, r22	; 0x03
     4d6:	5d 83       	std	Y+5, r21	; 0x05
     4d8:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4da:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4dc:	8c 81       	ldd	r24, Y+4	; 0x04
     4de:	9d 81       	ldd	r25, Y+5	; 0x05
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	31 f0       	breq	.+12     	; 0x4f0 <UART_Set_TX_CompleteCallback+0x2c>
		UART_TX_Complete_callback = callBack;
     4e4:	8c 81       	ldd	r24, Y+4	; 0x04
     4e6:	9d 81       	ldd	r25, Y+5	; 0x05
     4e8:	90 93 65 00 	sts	0x0065, r25
     4ec:	80 93 64 00 	sts	0x0064, r24
	return ErrRetVal;
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	cf 91       	pop	r28
     4fe:	df 91       	pop	r29
     500:	08 95       	ret

00000502 <__vector_13>:
void __vector_13(void)
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	2f 93       	push	r18
     50e:	3f 93       	push	r19
     510:	4f 93       	push	r20
     512:	5f 93       	push	r21
     514:	6f 93       	push	r22
     516:	7f 93       	push	r23
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	af 93       	push	r26
     51e:	bf 93       	push	r27
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31
     524:	df 93       	push	r29
     526:	cf 93       	push	r28
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Complete_callback != NULL)
     52c:	80 91 60 00 	lds	r24, 0x0060
     530:	90 91 61 00 	lds	r25, 0x0061
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	29 f0       	breq	.+10     	; 0x542 <__vector_13+0x40>
		UART_RX_Complete_callback();
     538:	e0 91 60 00 	lds	r30, 0x0060
     53c:	f0 91 61 00 	lds	r31, 0x0061
     540:	09 95       	icall
}
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0f be       	out	0x3f, r0	; 63
     562:	0f 90       	pop	r0
     564:	1f 90       	pop	r1
     566:	18 95       	reti

00000568 <__vector_14>:
void __vector_14(void)
{
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	if (UART_UDRE_Empty_callback != NULL)
     592:	80 91 62 00 	lds	r24, 0x0062
     596:	90 91 63 00 	lds	r25, 0x0063
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	29 f0       	breq	.+10     	; 0x5a8 <__vector_14+0x40>
		UART_UDRE_Empty_callback();
     59e:	e0 91 62 00 	lds	r30, 0x0062
     5a2:	f0 91 63 00 	lds	r31, 0x0063
     5a6:	09 95       	icall
}
     5a8:	cf 91       	pop	r28
     5aa:	df 91       	pop	r29
     5ac:	ff 91       	pop	r31
     5ae:	ef 91       	pop	r30
     5b0:	bf 91       	pop	r27
     5b2:	af 91       	pop	r26
     5b4:	9f 91       	pop	r25
     5b6:	8f 91       	pop	r24
     5b8:	7f 91       	pop	r23
     5ba:	6f 91       	pop	r22
     5bc:	5f 91       	pop	r21
     5be:	4f 91       	pop	r20
     5c0:	3f 91       	pop	r19
     5c2:	2f 91       	pop	r18
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <__vector_15>:
void __vector_15(void)
{
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	2f 93       	push	r18
     5da:	3f 93       	push	r19
     5dc:	4f 93       	push	r20
     5de:	5f 93       	push	r21
     5e0:	6f 93       	push	r22
     5e2:	7f 93       	push	r23
     5e4:	8f 93       	push	r24
     5e6:	9f 93       	push	r25
     5e8:	af 93       	push	r26
     5ea:	bf 93       	push	r27
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Complete_callback != NULL)
     5f8:	80 91 64 00 	lds	r24, 0x0064
     5fc:	90 91 65 00 	lds	r25, 0x0065
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	29 f0       	breq	.+10     	; 0x60e <__vector_15+0x40>
		UART_TX_Complete_callback();
     604:	e0 91 64 00 	lds	r30, 0x0064
     608:	f0 91 65 00 	lds	r31, 0x0065
     60c:	09 95       	icall
}
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <SPI_Init>:

void static (*SPI_TX_Complete_callback)(void)=NULL;

void __vector_12(void)__attribute__((signal,used));//TX_complete

uint8_t SPI_Init(uint8_t SpiNumber) {
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	00 d0       	rcall	.+0      	; 0x63a <SPI_Init+0x6>
     63a:	0f 92       	push	r0
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Dummy = 0;
     646:	19 82       	std	Y+1, r1	; 0x01
	if (SpiNumber <= NumOfSPIChannels) {
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	08 f0       	brcs	.+2      	; 0x650 <SPI_Init+0x1c>
     64e:	4b c0       	rjmp	.+150    	; 0x6e6 <SPI_Init+0xb2>
		WRITE_REG(SPI_ControlReg, ResgisterDefaultVal);
     650:	ed e2       	ldi	r30, 0x2D	; 45
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	10 82       	st	Z, r1
			SET_BIT(SPI_ControlReg, SPIEnable_BIT);
			ErrRetVal = OperationSuccess;
			break;
		case Slave:
			/*SPI Slave Mode*/
			MODIFY_REG(SPI_ControlReg, MasterSlaveModeSelect_MSK,
     656:	ad e2       	ldi	r26, 0x2D	; 45
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	ed e2       	ldi	r30, 0x2D	; 45
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	8f 7e       	andi	r24, 0xEF	; 239
     662:	8c 93       	st	X, r24
					Slave<<MasterSlaveModeSelect_BIT);
			/*SPI PIN Initialization*/
			DIO_PinInit(SPI_PORT, SPI_MISO_PIN, PIN_OUTPUT);
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	66 e0       	ldi	r22, 0x06	; 6
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	0e 94 68 05 	call	0xad0	; 0xad0 <DIO_PinInit>
			/*selecting the clock mode*/
			MODIFY_REG(SPI_ControlReg, ClockPhase_MSK,
     66e:	ad e2       	ldi	r26, 0x2D	; 45
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e2       	ldi	r30, 0x2D	; 45
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	84 60       	ori	r24, 0x04	; 4
     67a:	8c 93       	st	X, r24
					READ_BIT(SPI_ClockMode,0)<<ClockPhase_BIT);
			MODIFY_REG(SPI_ControlReg, ClockPolarity_MSK,
     67c:	ad e2       	ldi	r26, 0x2D	; 45
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	ed e2       	ldi	r30, 0x2D	; 45
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	87 7f       	andi	r24, 0xF7	; 247
     688:	8c 93       	st	X, r24
					READ_BIT(SPI_ClockMode,1)<<ClockPolarity_BIT);
			/*Setting the Data Order*/
			MODIFY_REG(SPI_ControlReg, DataOrder_MSK,
     68a:	ad e2       	ldi	r26, 0x2D	; 45
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	ed e2       	ldi	r30, 0x2D	; 45
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	8f 7d       	andi	r24, 0xDF	; 223
     696:	8c 93       	st	X, r24
					SPI_DataOrder<<DataOrder_BIT);
			/*Set SPI Clock Frequency*/
			/*not necessary as we are in slave case*/
			/*clearing flags*/
			Dummy = READ_BIT(SPI_StatusReg, WriteCollisionFlag_BIT);
     698:	ee e2       	ldi	r30, 0x2E	; 46
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	88 2f       	mov	r24, r24
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	80 74       	andi	r24, 0x40	; 64
     6a4:	90 70       	andi	r25, 0x00	; 0
     6a6:	08 2e       	mov	r0, r24
     6a8:	89 2f       	mov	r24, r25
     6aa:	00 0c       	add	r0, r0
     6ac:	88 1f       	adc	r24, r24
     6ae:	99 0b       	sbc	r25, r25
     6b0:	00 0c       	add	r0, r0
     6b2:	88 1f       	adc	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	89 83       	std	Y+1, r24	; 0x01
			Dummy = READ_BIT(SPI_StatusReg, InterruptFlag_BIT);
     6b8:	ee e2       	ldi	r30, 0x2E	; 46
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	88 1f       	adc	r24, r24
     6c0:	88 27       	eor	r24, r24
     6c2:	88 1f       	adc	r24, r24
     6c4:	89 83       	std	Y+1, r24	; 0x01
			Dummy = READ_REG(SPI_DataReg);
     6c6:	ef e2       	ldi	r30, 0x2F	; 47
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	80 81       	ld	r24, Z
     6cc:	89 83       	std	Y+1, r24	; 0x01
			/*removing garbage from slave Data register*/
			SPI_DataReg='\0';
     6ce:	ef e2       	ldi	r30, 0x2F	; 47
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	10 82       	st	Z, r1
			/*enable SPI Module*/
			SET_BIT(SPI_ControlReg, SPIEnable_BIT);
     6d4:	ad e2       	ldi	r26, 0x2D	; 45
     6d6:	b0 e0       	ldi	r27, 0x00	; 0
     6d8:	ed e2       	ldi	r30, 0x2D	; 45
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	80 64       	ori	r24, 0x40	; 64
     6e0:	8c 93       	st	X, r24
			ErrRetVal = OperationSuccess;
     6e2:	1a 82       	std	Y+2, r1	; 0x02
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <SPI_Init+0xb6>
			/*error selected SPI mode is unavailable*/
			ErrRetVal = SelectedSPIModeUnavailable;
		}
	} else {
		/*error out of spi channels range.*/
		ErrRetVal = Unavailable_SPI_Channel;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ErrRetVal;
     6ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	cf 91       	pop	r28
     6f4:	df 91       	pop	r29
     6f6:	08 95       	ret

000006f8 <SPI_TransmitChar>:

uint8_t SPI_TransmitChar(uint8_t SpiNumber, uint8_t TxChar, uint8_t slave_CH) {
     6f8:	df 93       	push	r29
     6fa:	cf 93       	push	r28
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <SPI_TransmitChar+0x6>
     6fe:	00 d0       	rcall	.+0      	; 0x700 <SPI_TransmitChar+0x8>
     700:	0f 92       	push	r0
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	6c 83       	std	Y+4, r22	; 0x04
     70a:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t ErrRetVal = OperationStarted;
     70c:	8f ef       	ldi	r24, 0xFF	; 255
     70e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t dummy = 0;
     710:	19 82       	std	Y+1, r1	; 0x01
		} else {
			ErrRetVal = Non_Existant_Slave;
		}
		break;
	case Slave:
		if (DIO_GetPinVal(SlaveID_1_Port, SlaveID_1_Pin)) {
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	64 e0       	ldi	r22, 0x04	; 4
     716:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <DIO_GetPinVal>
     71a:	88 23       	and	r24, r24
     71c:	f1 f0       	breq	.+60     	; 0x75a <SPI_TransmitChar+0x62>
			/*making data available in the shift register*/
			WRITE_REG(SPI_DataReg, TxChar);
     71e:	ef e2       	ldi	r30, 0x2F	; 47
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	8c 81       	ldd	r24, Y+4	; 0x04
     724:	80 83       	st	Z, r24
			/*checking for write collision*/
			if (READ_BIT(SPI_StatusReg, WriteCollisionFlag_BIT)) {
     726:	ee e2       	ldi	r30, 0x2E	; 46
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	88 2f       	mov	r24, r24
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	80 74       	andi	r24, 0x40	; 64
     732:	90 70       	andi	r25, 0x00	; 0
     734:	08 2e       	mov	r0, r24
     736:	89 2f       	mov	r24, r25
     738:	00 0c       	add	r0, r0
     73a:	88 1f       	adc	r24, r24
     73c:	99 0b       	sbc	r25, r25
     73e:	00 0c       	add	r0, r0
     740:	88 1f       	adc	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	39 f0       	breq	.+14     	; 0x756 <SPI_TransmitChar+0x5e>
				ErrRetVal = WriteCollisionOccurs;
     748:	84 e0       	ldi	r24, 0x04	; 4
     74a:	8a 83       	std	Y+2, r24	; 0x02
				dummy = READ_REG(SPI_DataReg);
     74c:	ef e2       	ldi	r30, 0x2F	; 47
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	04 c0       	rjmp	.+8      	; 0x75e <SPI_TransmitChar+0x66>
				/*flag is cleared*/
			} else {
				ErrRetVal = OperationSuccess;
     756:	1a 82       	std	Y+2, r1	; 0x02
     758:	02 c0       	rjmp	.+4      	; 0x75e <SPI_TransmitChar+0x66>
			}
		} else {
			ErrRetVal = OperationFail;
     75a:	85 e0       	ldi	r24, 0x05	; 5
     75c:	8a 83       	std	Y+2, r24	; 0x02
		}
		break;
	}
	return ErrRetVal;
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	08 95       	ret

00000770 <SPI_ReceiveChar>:

uint8_t SPI_ReceiveChar(uint8_t SpiNumber, ptr_uint8_t RxData, uint8_t slave_CH) {
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	00 d0       	rcall	.+0      	; 0x776 <SPI_ReceiveChar+0x6>
     776:	00 d0       	rcall	.+0      	; 0x778 <SPI_ReceiveChar+0x8>
     778:	0f 92       	push	r0
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	8a 83       	std	Y+2, r24	; 0x02
     780:	7c 83       	std	Y+4, r23	; 0x04
     782:	6b 83       	std	Y+3, r22	; 0x03
     784:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t ErrRetVal = OperationStarted;
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	89 83       	std	Y+1, r24	; 0x01
			/*error out of spi channels range.*/
			ErrRetVal = Unavailable_SPI_Channel;
		}
		break;
	case Slave:
		if ((READ_BIT(SPI_StatusReg, InterruptFlag_BIT))) {
     78a:	ee e2       	ldi	r30, 0x2E	; 46
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	88 1f       	adc	r24, r24
     792:	88 27       	eor	r24, r24
     794:	88 1f       	adc	r24, r24
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	90 70       	andi	r25, 0x00	; 0
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	41 f0       	breq	.+16     	; 0x7b0 <SPI_ReceiveChar+0x40>
			*RxData = SPI_DataReg;
     7a0:	ef e2       	ldi	r30, 0x2F	; 47
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	eb 81       	ldd	r30, Y+3	; 0x03
     7a8:	fc 81       	ldd	r31, Y+4	; 0x04
     7aa:	80 83       	st	Z, r24
			ErrRetVal = OperationSuccess;
     7ac:	19 82       	std	Y+1, r1	; 0x01
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <SPI_ReceiveChar+0x44>
		} else {
			ErrRetVal = OperationFail;
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	return ErrRetVal;
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	cf 91       	pop	r28
     7c2:	df 91       	pop	r29
     7c4:	08 95       	ret

000007c6 <SPI_DataExchange>:

uint8_t SPI_DataExchange (uint8_t SpiNumber, uint8_t TxChar, ptr_uint8_t RxData, uint8_t slave_CH)
{
     7c6:	df 93       	push	r29
     7c8:	cf 93       	push	r28
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <SPI_DataExchange+0x6>
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <SPI_DataExchange+0x8>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <SPI_DataExchange+0xa>
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	8a 83       	std	Y+2, r24	; 0x02
     7d6:	6b 83       	std	Y+3, r22	; 0x03
     7d8:	5d 83       	std	Y+5, r21	; 0x05
     7da:	4c 83       	std	Y+4, r20	; 0x04
     7dc:	2e 83       	std	Y+6, r18	; 0x06
	uint8_t RETVAL = OperationStarted;
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	89 83       	std	Y+1, r24	; 0x01
		RETVAL = OperationSuccess;
		break;
	case Slave:
//		while (SPI_ReceiveChar(SPIChannel_1, RxData, SlaveID_1)	!= OperationSuccess);
//		while (SPI_TransmitChar(SPIChannel_1, TxChar, SlaveID_1) != OperationSuccess);
		while (SPI_TransmitChar(SPIChannel_1, TxChar, SlaveID_1) != OperationSuccess);
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	6b 81       	ldd	r22, Y+3	; 0x03
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <SPI_TransmitChar>
     7ec:	88 23       	and	r24, r24
     7ee:	c9 f7       	brne	.-14     	; 0x7e2 <SPI_DataExchange+0x1c>
		while (SPI_ReceiveChar(SPIChannel_1, RxData, SlaveID_1)	!= OperationSuccess);
     7f0:	2c 81       	ldd	r18, Y+4	; 0x04
     7f2:	3d 81       	ldd	r19, Y+5	; 0x05
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	b9 01       	movw	r22, r18
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_ReceiveChar>
     7fe:	88 23       	and	r24, r24
     800:	b9 f7       	brne	.-18     	; 0x7f0 <SPI_DataExchange+0x2a>
		RETVAL = OperationSuccess;
     802:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return RETVAL;
     804:	89 81       	ldd	r24, Y+1	; 0x01
}
     806:	26 96       	adiw	r28, 0x06	; 6
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <SPI_TransmitString>:

uint8_t SPI_TransmitString(uint8_t SpiNumber, ptr_uint8_t TxString,
		uint8_t slave_CH) {
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	27 97       	sbiw	r28, 0x07	; 7
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	8c 83       	std	Y+4, r24	; 0x04
     82e:	7e 83       	std	Y+6, r23	; 0x06
     830:	6d 83       	std	Y+5, r22	; 0x05
     832:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t ErrRetVal = OperationStarted;
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     838:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Dummy = 0;
     83a:	1b 82       	std	Y+3, r1	; 0x03
	while(iterator <= 255)
	{
		if (*TxString == '\0') {
     83c:	ed 81       	ldd	r30, Y+5	; 0x05
     83e:	fe 81       	ldd	r31, Y+6	; 0x06
     840:	80 81       	ld	r24, Z
     842:	88 23       	and	r24, r24
     844:	b1 f4       	brne	.+44     	; 0x872 <__stack+0x13>
			ErrRetVal = OperationSuccess;
     846:	1a 82       	std	Y+2, r1	; 0x02
			while (SPI_DataExchange(SpiNumber, '\0', &Dummy, slave_CH) != OperationSuccess);
     848:	9e 01       	movw	r18, r28
     84a:	2d 5f       	subi	r18, 0xFD	; 253
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
     84e:	8c 81       	ldd	r24, Y+4	; 0x04
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	a9 01       	movw	r20, r18
     854:	2f 81       	ldd	r18, Y+7	; 0x07
     856:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <SPI_DataExchange>
     85a:	88 23       	and	r24, r24
     85c:	a9 f7       	brne	.-22     	; 0x848 <SPI_TransmitString+0x30>
			while (SPI_DataExchange(SpiNumber, *TxString, &Dummy, slave_CH) != OperationSuccess);
			iterator++;
			TxString++;
		}
	}
return ErrRetVal;
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     860:	27 96       	adiw	r28, 0x07	; 7
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	08 95       	ret
		if (*TxString == '\0') {
			ErrRetVal = OperationSuccess;
			while (SPI_DataExchange(SpiNumber, '\0', &Dummy, slave_CH) != OperationSuccess);
			break;
		} else {
			while (SPI_DataExchange(SpiNumber, *TxString, &Dummy, slave_CH) != OperationSuccess);
     872:	ed 81       	ldd	r30, Y+5	; 0x05
     874:	fe 81       	ldd	r31, Y+6	; 0x06
     876:	90 81       	ld	r25, Z
     878:	9e 01       	movw	r18, r28
     87a:	2d 5f       	subi	r18, 0xFD	; 253
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	8c 81       	ldd	r24, Y+4	; 0x04
     880:	69 2f       	mov	r22, r25
     882:	a9 01       	movw	r20, r18
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <SPI_DataExchange>
     88a:	88 23       	and	r24, r24
     88c:	91 f7       	brne	.-28     	; 0x872 <__stack+0x13>
			iterator++;
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	8f 5f       	subi	r24, 0xFF	; 255
     892:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
     894:	8d 81       	ldd	r24, Y+5	; 0x05
     896:	9e 81       	ldd	r25, Y+6	; 0x06
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	9e 83       	std	Y+6, r25	; 0x06
     89c:	8d 83       	std	Y+5, r24	; 0x05
     89e:	ce cf       	rjmp	.-100    	; 0x83c <SPI_TransmitString+0x24>

000008a0 <SPI_ReceiveString>:
	}
return ErrRetVal;
}

uint8_t SPI_ReceiveString(uint8_t SpiNumber, ptr_uint8_t RxString,
		uint8_t slave_CH) {
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	29 97       	sbiw	r28, 0x09	; 9
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	8e 83       	std	Y+6, r24	; 0x06
     8b6:	78 87       	std	Y+8, r23	; 0x08
     8b8:	6f 83       	std	Y+7, r22	; 0x07
     8ba:	49 87       	std	Y+9, r20	; 0x09
	uint8_t ErrRetVal = OperationStarted;
     8bc:	8f ef       	ldi	r24, 0xFF	; 255
     8be:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t* RxStringAddress=RxString;
     8c0:	8f 81       	ldd	r24, Y+7	; 0x07
     8c2:	98 85       	ldd	r25, Y+8	; 0x08
     8c4:	9c 83       	std	Y+4, r25	; 0x04
     8c6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t iterator = 0;
     8c8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Dummy = 0;
     8ca:	19 82       	std	Y+1, r1	; 0x01
	while (iterator <= 255) {
		if (SPI_DataExchange(SpiNumber, Dummy, RxString,
     8cc:	2f 81       	ldd	r18, Y+7	; 0x07
     8ce:	38 85       	ldd	r19, Y+8	; 0x08
     8d0:	8e 81       	ldd	r24, Y+6	; 0x06
     8d2:	69 81       	ldd	r22, Y+1	; 0x01
     8d4:	a9 01       	movw	r20, r18
     8d6:	29 85       	ldd	r18, Y+9	; 0x09
     8d8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <SPI_DataExchange>
     8dc:	88 23       	and	r24, r24
     8de:	b1 f7       	brne	.-20     	; 0x8cc <SPI_ReceiveString+0x2c>
				slave_CH)==OperationSuccess) {
			if (*RxString == '\0') {
     8e0:	ef 81       	ldd	r30, Y+7	; 0x07
     8e2:	f8 85       	ldd	r31, Y+8	; 0x08
     8e4:	80 81       	ld	r24, Z
     8e6:	88 23       	and	r24, r24
     8e8:	91 f4       	brne	.+36     	; 0x90e <SPI_ReceiveString+0x6e>
				if (RxString == RxStringAddress) {
     8ea:	2f 81       	ldd	r18, Y+7	; 0x07
     8ec:	38 85       	ldd	r19, Y+8	; 0x08
     8ee:	8b 81       	ldd	r24, Y+3	; 0x03
     8f0:	9c 81       	ldd	r25, Y+4	; 0x04
     8f2:	28 17       	cp	r18, r24
     8f4:	39 07       	cpc	r19, r25
     8f6:	51 f3       	breq	.-44     	; 0x8cc <SPI_ReceiveString+0x2c>
					continue;
				} else {
					ErrRetVal = OperationSuccess;
     8f8:	1d 82       	std	Y+5, r1	; 0x05
			}
		} else {
			continue;
		}
	}
	return ErrRetVal;
     8fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
     8fc:	29 96       	adiw	r28, 0x09	; 9
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	cf 91       	pop	r28
     90a:	df 91       	pop	r29
     90c:	08 95       	ret
				} else {
					ErrRetVal = OperationSuccess;
					break;
				}
			} else {
				RxString++;
     90e:	8f 81       	ldd	r24, Y+7	; 0x07
     910:	98 85       	ldd	r25, Y+8	; 0x08
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	98 87       	std	Y+8, r25	; 0x08
     916:	8f 83       	std	Y+7, r24	; 0x07
				iterator++;
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	8a 83       	std	Y+2, r24	; 0x02
     91e:	d6 cf       	rjmp	.-84     	; 0x8cc <SPI_ReceiveString+0x2c>

00000920 <SPI_EnableInterrupt>:
	}
	return ErrRetVal;
}

uint8_t SPI_EnableInterrupt(uint8_t SpiNumber)
{
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	00 d0       	rcall	.+0      	; 0x926 <SPI_EnableInterrupt+0x6>
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
     930:	af e5       	ldi	r26, 0x5F	; 95
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	ef e5       	ldi	r30, 0x5F	; 95
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	80 68       	ori	r24, 0x80	; 128
     93c:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	MODIFY_REG(SPI_ControlReg,
     93e:	ad e2       	ldi	r26, 0x2D	; 45
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	ed e2       	ldi	r30, 0x2D	; 45
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	80 68       	ori	r24, 0x80	; 128
     94a:	8c 93       	st	X, r24
			InterruptEnable_MSK,
			InterruptEnable_MSK);
	ErrRetVal = OperationSuccess;
     94c:	19 82       	std	Y+1, r1	; 0x01
	return ErrRetVal;
     94e:	89 81       	ldd	r24, Y+1	; 0x01
}
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	cf 91       	pop	r28
     956:	df 91       	pop	r29
     958:	08 95       	ret

0000095a <SPI_DisableInterrupt>:

uint8_t SPI_DisableInterrupt(uint8_t SpiNumber)
{
     95a:	df 93       	push	r29
     95c:	cf 93       	push	r28
     95e:	00 d0       	rcall	.+0      	; 0x960 <SPI_DisableInterrupt+0x6>
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(SPI_ControlReg, InterruptEnable_BIT);
     96a:	ad e2       	ldi	r26, 0x2D	; 45
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	ed e2       	ldi	r30, 0x2D	; 45
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	8f 77       	andi	r24, 0x7F	; 127
     976:	8c 93       	st	X, r24
	ErrRetVal = OperationSuccess;
     978:	19 82       	std	Y+1, r1	; 0x01
	return ErrRetVal;
     97a:	89 81       	ldd	r24, Y+1	; 0x01
}
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	cf 91       	pop	r28
     982:	df 91       	pop	r29
     984:	08 95       	ret

00000986 <SPI_Set_TX_CompleteCallback>:

uint8_t SPI_Set_TX_CompleteCallback(uint8_t SpiNumber,void(*callBack)(void))
{
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	00 d0       	rcall	.+0      	; 0x98c <SPI_Set_TX_CompleteCallback+0x6>
     98c:	00 d0       	rcall	.+0      	; 0x98e <SPI_Set_TX_CompleteCallback+0x8>
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	8a 83       	std	Y+2, r24	; 0x02
     994:	7c 83       	std	Y+4, r23	; 0x04
     996:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = 0;
     998:	19 82       	std	Y+1, r1	; 0x01
		if (callBack != NULL)
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	31 f0       	breq	.+12     	; 0x9ae <SPI_Set_TX_CompleteCallback+0x28>
			SPI_TX_Complete_callback = callBack;
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	90 93 67 00 	sts	0x0067, r25
     9aa:	80 93 66 00 	sts	0x0066, r24
		return ErrRetVal;
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
}
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	cf 91       	pop	r28
     9ba:	df 91       	pop	r29
     9bc:	08 95       	ret

000009be <__vector_12>:

void __vector_12(void)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	2f 93       	push	r18
     9ca:	3f 93       	push	r19
     9cc:	4f 93       	push	r20
     9ce:	5f 93       	push	r21
     9d0:	6f 93       	push	r22
     9d2:	7f 93       	push	r23
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
	if (SPI_TX_Complete_callback != NULL)
     9e8:	80 91 66 00 	lds	r24, 0x0066
     9ec:	90 91 67 00 	lds	r25, 0x0067
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	29 f0       	breq	.+10     	; 0x9fe <__vector_12+0x40>
		SPI_TX_Complete_callback();
     9f4:	e0 91 66 00 	lds	r30, 0x0066
     9f8:	f0 91 67 00 	lds	r31, 0x0067
     9fc:	09 95       	icall
}
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	ff 91       	pop	r31
     a04:	ef 91       	pop	r30
     a06:	bf 91       	pop	r27
     a08:	af 91       	pop	r26
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	7f 91       	pop	r23
     a10:	6f 91       	pop	r22
     a12:	5f 91       	pop	r21
     a14:	4f 91       	pop	r20
     a16:	3f 91       	pop	r19
     a18:	2f 91       	pop	r18
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <DIO_PortInit>:
#include "../DIO/DIO_DRIVER_TypeDef.h"
#include "../DIO/DIO_DRIVER.h"
#include "../DIO/DIO_DRIVER_Priv.h"

DIO_ERROR_RETVAL_t DIO_PortInit(DIO_PORT_ID_t DIO_port,
		DIO_DIRECTION_t DIO_direction) {
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	00 d0       	rcall	.+0      	; 0xa2a <DIO_PortInit+0x6>
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <DIO_PortInit+0x8>
     a2c:	0f 92       	push	r0
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
     a32:	8a 83       	std	Y+2, r24	; 0x02
     a34:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     a36:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD)
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	85 30       	cpi	r24, 0x05	; 5
     a3c:	08 f0       	brcs	.+2      	; 0xa40 <DIO_PortInit+0x1c>
     a3e:	3d c0       	rjmp	.+122    	; 0xaba <DIO_PortInit+0x96>
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	88 23       	and	r24, r24
     a44:	19 f0       	breq	.+6      	; 0xa4c <DIO_PortInit+0x28>
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	8f 3f       	cpi	r24, 0xFF	; 255
     a4a:	b9 f5       	brne	.+110    	; 0xaba <DIO_PortInit+0x96>
			&& (DIO_direction == PORT_INPUT || DIO_direction == PORT_OUTPUT)) {
		switch (DIO_port) {
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	28 2f       	mov	r18, r24
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	3d 83       	std	Y+5, r19	; 0x05
     a54:	2c 83       	std	Y+4, r18	; 0x04
     a56:	8c 81       	ldd	r24, Y+4	; 0x04
     a58:	9d 81       	ldd	r25, Y+5	; 0x05
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	91 05       	cpc	r25, r1
     a5e:	d9 f0       	breq	.+54     	; 0xa96 <DIO_PortInit+0x72>
     a60:	2c 81       	ldd	r18, Y+4	; 0x04
     a62:	3d 81       	ldd	r19, Y+5	; 0x05
     a64:	23 30       	cpi	r18, 0x03	; 3
     a66:	31 05       	cpc	r19, r1
     a68:	34 f4       	brge	.+12     	; 0xa76 <DIO_PortInit+0x52>
     a6a:	8c 81       	ldd	r24, Y+4	; 0x04
     a6c:	9d 81       	ldd	r25, Y+5	; 0x05
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	91 05       	cpc	r25, r1
     a72:	61 f0       	breq	.+24     	; 0xa8c <DIO_PortInit+0x68>
     a74:	1f c0       	rjmp	.+62     	; 0xab4 <DIO_PortInit+0x90>
     a76:	2c 81       	ldd	r18, Y+4	; 0x04
     a78:	3d 81       	ldd	r19, Y+5	; 0x05
     a7a:	23 30       	cpi	r18, 0x03	; 3
     a7c:	31 05       	cpc	r19, r1
     a7e:	81 f0       	breq	.+32     	; 0xaa0 <DIO_PortInit+0x7c>
     a80:	8c 81       	ldd	r24, Y+4	; 0x04
     a82:	9d 81       	ldd	r25, Y+5	; 0x05
     a84:	84 30       	cpi	r24, 0x04	; 4
     a86:	91 05       	cpc	r25, r1
     a88:	81 f0       	breq	.+32     	; 0xaaa <DIO_PortInit+0x86>
     a8a:	14 c0       	rjmp	.+40     	; 0xab4 <DIO_PortInit+0x90>
		case PORTA:
			WRITE_REG(DDRA_Register, DIO_direction);
     a8c:	ea e3       	ldi	r30, 0x3A	; 58
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	80 83       	st	Z, r24
     a94:	14 c0       	rjmp	.+40     	; 0xabe <DIO_PortInit+0x9a>
			break;
		case PORTB:
			WRITE_REG(DDRB_Register, DIO_direction);
     a96:	e7 e3       	ldi	r30, 0x37	; 55
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	80 83       	st	Z, r24
     a9e:	0f c0       	rjmp	.+30     	; 0xabe <DIO_PortInit+0x9a>
			break;
		case PORTC:
			WRITE_REG(DDRC_Register, DIO_direction);
     aa0:	e4 e3       	ldi	r30, 0x34	; 52
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	80 83       	st	Z, r24
     aa8:	0a c0       	rjmp	.+20     	; 0xabe <DIO_PortInit+0x9a>
			break;
		case PORTD:
			WRITE_REG(DDRD_Register, DIO_direction);
     aaa:	e1 e3       	ldi	r30, 0x31	; 49
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	80 83       	st	Z, r24
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <DIO_PortInit+0x9a>
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	89 83       	std	Y+1, r24	; 0x01
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <DIO_PortInit+0x9a>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     abe:	89 81       	ldd	r24, Y+1	; 0x01
}
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	08 95       	ret

00000ad0 <DIO_PinInit>:

DIO_ERROR_RETVAL_t DIO_PinInit(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin,
		DIO_DIRECTION_t DIO_direction) {
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	28 97       	sbiw	r28, 0x08	; 8
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	8a 83       	std	Y+2, r24	; 0x02
     ae6:	6b 83       	std	Y+3, r22	; 0x03
     ae8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     aea:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	85 30       	cpi	r24, 0x05	; 5
     af0:	08 f0       	brcs	.+2      	; 0xaf4 <DIO_PinInit+0x24>
     af2:	fa c0       	rjmp	.+500    	; 0xce8 <DIO_PinInit+0x218>
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	88 30       	cpi	r24, 0x08	; 8
     af8:	08 f0       	brcs	.+2      	; 0xafc <DIO_PinInit+0x2c>
     afa:	f6 c0       	rjmp	.+492    	; 0xce8 <DIO_PinInit+0x218>
		if (DIO_direction == PIN_OUTPUT) {
     afc:	8c 81       	ldd	r24, Y+4	; 0x04
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	09 f0       	breq	.+2      	; 0xb04 <DIO_PinInit+0x34>
     b02:	73 c0       	rjmp	.+230    	; 0xbea <DIO_PinInit+0x11a>

			switch (DIO_port) {
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	28 2f       	mov	r18, r24
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	38 87       	std	Y+8, r19	; 0x08
     b0c:	2f 83       	std	Y+7, r18	; 0x07
     b0e:	8f 81       	ldd	r24, Y+7	; 0x07
     b10:	98 85       	ldd	r25, Y+8	; 0x08
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	91 05       	cpc	r25, r1
     b16:	51 f1       	breq	.+84     	; 0xb6c <DIO_PinInit+0x9c>
     b18:	2f 81       	ldd	r18, Y+7	; 0x07
     b1a:	38 85       	ldd	r19, Y+8	; 0x08
     b1c:	23 30       	cpi	r18, 0x03	; 3
     b1e:	31 05       	cpc	r19, r1
     b20:	34 f4       	brge	.+12     	; 0xb2e <DIO_PinInit+0x5e>
     b22:	8f 81       	ldd	r24, Y+7	; 0x07
     b24:	98 85       	ldd	r25, Y+8	; 0x08
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	91 05       	cpc	r25, r1
     b2a:	61 f0       	breq	.+24     	; 0xb44 <DIO_PinInit+0x74>
     b2c:	5b c0       	rjmp	.+182    	; 0xbe4 <DIO_PinInit+0x114>
     b2e:	2f 81       	ldd	r18, Y+7	; 0x07
     b30:	38 85       	ldd	r19, Y+8	; 0x08
     b32:	23 30       	cpi	r18, 0x03	; 3
     b34:	31 05       	cpc	r19, r1
     b36:	71 f1       	breq	.+92     	; 0xb94 <DIO_PinInit+0xc4>
     b38:	8f 81       	ldd	r24, Y+7	; 0x07
     b3a:	98 85       	ldd	r25, Y+8	; 0x08
     b3c:	84 30       	cpi	r24, 0x04	; 4
     b3e:	91 05       	cpc	r25, r1
     b40:	e9 f1       	breq	.+122    	; 0xbbc <DIO_PinInit+0xec>
     b42:	50 c0       	rjmp	.+160    	; 0xbe4 <DIO_PinInit+0x114>
			case PORTA:
				SET_BIT(DDRA_Register, DIO_pin);
     b44:	aa e3       	ldi	r26, 0x3A	; 58
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	ea e3       	ldi	r30, 0x3A	; 58
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	48 2f       	mov	r20, r24
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	02 2e       	mov	r0, r18
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <DIO_PinInit+0x92>
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	0a 94       	dec	r0
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <DIO_PinInit+0x8e>
     b66:	84 2b       	or	r24, r20
     b68:	8c 93       	st	X, r24
     b6a:	c0 c0       	rjmp	.+384    	; 0xcec <DIO_PinInit+0x21c>
				break;
			case PORTB:
				SET_BIT(DDRB_Register, DIO_pin);
     b6c:	a7 e3       	ldi	r26, 0x37	; 55
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e7 e3       	ldi	r30, 0x37	; 55
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	48 2f       	mov	r20, r24
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 2e       	mov	r0, r18
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <DIO_PinInit+0xba>
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <DIO_PinInit+0xb6>
     b8e:	84 2b       	or	r24, r20
     b90:	8c 93       	st	X, r24
     b92:	ac c0       	rjmp	.+344    	; 0xcec <DIO_PinInit+0x21c>
				break;
			case PORTC:
				SET_BIT(DDRC_Register, DIO_pin);
     b94:	a4 e3       	ldi	r26, 0x34	; 52
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e4 e3       	ldi	r30, 0x34	; 52
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_PinInit+0xe2>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_PinInit+0xde>
     bb6:	84 2b       	or	r24, r20
     bb8:	8c 93       	st	X, r24
     bba:	98 c0       	rjmp	.+304    	; 0xcec <DIO_PinInit+0x21c>
				break;
			case PORTD:
				SET_BIT(DDRD_Register, DIO_pin);
     bbc:	a1 e3       	ldi	r26, 0x31	; 49
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e1 e3       	ldi	r30, 0x31	; 49
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_PinInit+0x10a>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_PinInit+0x106>
     bde:	84 2b       	or	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	84 c0       	rjmp	.+264    	; 0xcec <DIO_PinInit+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	81 c0       	rjmp	.+258    	; 0xcec <DIO_PinInit+0x21c>
				break;
			}
		} else if (DIO_direction == PIN_INPUT) {
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	88 23       	and	r24, r24
     bee:	09 f0       	breq	.+2      	; 0xbf2 <DIO_PinInit+0x122>
     bf0:	78 c0       	rjmp	.+240    	; 0xce2 <DIO_PinInit+0x212>

			switch (DIO_port) {
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	3e 83       	std	Y+6, r19	; 0x06
     bfa:	2d 83       	std	Y+5, r18	; 0x05
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	9e 81       	ldd	r25, Y+6	; 0x06
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	91 05       	cpc	r25, r1
     c04:	61 f1       	breq	.+88     	; 0xc5e <DIO_PinInit+0x18e>
     c06:	2d 81       	ldd	r18, Y+5	; 0x05
     c08:	3e 81       	ldd	r19, Y+6	; 0x06
     c0a:	23 30       	cpi	r18, 0x03	; 3
     c0c:	31 05       	cpc	r19, r1
     c0e:	34 f4       	brge	.+12     	; 0xc1c <DIO_PinInit+0x14c>
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	91 05       	cpc	r25, r1
     c18:	69 f0       	breq	.+26     	; 0xc34 <DIO_PinInit+0x164>
     c1a:	60 c0       	rjmp	.+192    	; 0xcdc <DIO_PinInit+0x20c>
     c1c:	2d 81       	ldd	r18, Y+5	; 0x05
     c1e:	3e 81       	ldd	r19, Y+6	; 0x06
     c20:	23 30       	cpi	r18, 0x03	; 3
     c22:	31 05       	cpc	r19, r1
     c24:	89 f1       	breq	.+98     	; 0xc88 <DIO_PinInit+0x1b8>
     c26:	8d 81       	ldd	r24, Y+5	; 0x05
     c28:	9e 81       	ldd	r25, Y+6	; 0x06
     c2a:	84 30       	cpi	r24, 0x04	; 4
     c2c:	91 05       	cpc	r25, r1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <DIO_PinInit+0x162>
     c30:	40 c0       	rjmp	.+128    	; 0xcb2 <DIO_PinInit+0x1e2>
     c32:	54 c0       	rjmp	.+168    	; 0xcdc <DIO_PinInit+0x20c>
			case PORTA:
				CLEAR_BIT(DDRA_Register, DIO_pin);
     c34:	aa e3       	ldi	r26, 0x3A	; 58
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	ea e3       	ldi	r30, 0x3A	; 58
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_PinInit+0x182>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_PinInit+0x17e>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	47 c0       	rjmp	.+142    	; 0xcec <DIO_PinInit+0x21c>
				break;
			case PORTB:
				CLEAR_BIT(DDRB_Register, DIO_pin);
     c5e:	a7 e3       	ldi	r26, 0x37	; 55
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e7 e3       	ldi	r30, 0x37	; 55
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_PinInit+0x1ac>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <DIO_PinInit+0x1a8>
     c80:	80 95       	com	r24
     c82:	84 23       	and	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	32 c0       	rjmp	.+100    	; 0xcec <DIO_PinInit+0x21c>
				break;
			case PORTC:
				CLEAR_BIT(DDRC_Register, DIO_pin);
     c88:	a4 e3       	ldi	r26, 0x34	; 52
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e4 e3       	ldi	r30, 0x34	; 52
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO_PinInit+0x1d6>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO_PinInit+0x1d2>
     caa:	80 95       	com	r24
     cac:	84 23       	and	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	1d c0       	rjmp	.+58     	; 0xcec <DIO_PinInit+0x21c>
				break;
			case PORTD:
				CLEAR_BIT(DDRD_Register, DIO_pin);
     cb2:	a1 e3       	ldi	r26, 0x31	; 49
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e1 e3       	ldi	r30, 0x31	; 49
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_PinInit+0x200>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_PinInit+0x1fc>
     cd4:	80 95       	com	r24
     cd6:	84 23       	and	r24, r20
     cd8:	8c 93       	st	X, r24
     cda:	08 c0       	rjmp	.+16     	; 0xcec <DIO_PinInit+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <DIO_PinInit+0x21c>
				break;
			}
		}

		else {
			ErrorValue = EXIT_FAILURE;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_PinInit+0x21c>
		}
	}

	else {
		ErrorValue = EXIT_FAILURE;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     cec:	89 81       	ldd	r24, Y+1	; 0x01
}
     cee:	28 96       	adiw	r28, 0x08	; 8
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <DIO_PinEnablePullUp>:

DIO_ERROR_RETVAL_t DIO_PinEnablePullUp(DIO_PORT_ID_t DIO_port,
		DIO_PIN_ID_t DIO_pin) {
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	00 d0       	rcall	.+0      	; 0xd06 <DIO_PinEnablePullUp+0x6>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <DIO_PinEnablePullUp+0x8>
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	8a 83       	std	Y+2, r24	; 0x02
     d10:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     d12:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	85 30       	cpi	r24, 0x05	; 5
     d18:	08 f0       	brcs	.+2      	; 0xd1c <DIO_PinEnablePullUp+0x1c>
     d1a:	99 c0       	rjmp	.+306    	; 0xe4e <DIO_PinEnablePullUp+0x14e>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	88 30       	cpi	r24, 0x08	; 8
     d20:	08 f0       	brcs	.+2      	; 0xd24 <DIO_PinEnablePullUp+0x24>
     d22:	95 c0       	rjmp	.+298    	; 0xe4e <DIO_PinEnablePullUp+0x14e>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3d 83       	std	Y+5, r19	; 0x05
     d2c:	2c 83       	std	Y+4, r18	; 0x04
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	9d 81       	ldd	r25, Y+5	; 0x05
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	91 05       	cpc	r25, r1
     d36:	a1 f1       	breq	.+104    	; 0xda0 <DIO_PinEnablePullUp+0xa0>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 30       	cpi	r18, 0x03	; 3
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <DIO_PinEnablePullUp+0x4e>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_PinEnablePullUp+0x68>
     d4c:	7d c0       	rjmp	.+250    	; 0xe48 <DIO_PinEnablePullUp+0x148>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 30       	cpi	r18, 0x03	; 3
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_PinEnablePullUp+0x5a>
     d58:	3f c0       	rjmp	.+126    	; 0xdd8 <DIO_PinEnablePullUp+0xd8>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_PinEnablePullUp+0x66>
     d64:	55 c0       	rjmp	.+170    	; 0xe10 <DIO_PinEnablePullUp+0x110>
     d66:	70 c0       	rjmp	.+224    	; 0xe48 <DIO_PinEnablePullUp+0x148>
		case PORTA:
			if (READ_REG(DDRA_Register) == PIN_INPUT) {
     d68:	ea e3       	ldi	r30, 0x3A	; 58
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	88 23       	and	r24, r24
     d70:	a1 f4       	brne	.+40     	; 0xd9a <DIO_PinEnablePullUp+0x9a>
				SET_BIT(PORTA_Register, DIO_pin);
     d72:	ab e3       	ldi	r26, 0x3B	; 59
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	eb e3       	ldi	r30, 0x3B	; 59
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_PinEnablePullUp+0x90>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_PinEnablePullUp+0x8c>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	5c c0       	rjmp	.+184    	; 0xe52 <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	59 c0       	rjmp	.+178    	; 0xe52 <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PIN_INPUT) {
     da0:	e7 e3       	ldi	r30, 0x37	; 55
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	a1 f4       	brne	.+40     	; 0xdd2 <DIO_PinEnablePullUp+0xd2>
				SET_BIT(PORTB_Register, DIO_pin);
     daa:	a8 e3       	ldi	r26, 0x38	; 56
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e8 e3       	ldi	r30, 0x38	; 56
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_PinEnablePullUp+0xc8>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_PinEnablePullUp+0xc4>
     dcc:	84 2b       	or	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	40 c0       	rjmp	.+128    	; 0xe52 <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	3d c0       	rjmp	.+122    	; 0xe52 <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PIN_INPUT) {
     dd8:	e4 e3       	ldi	r30, 0x34	; 52
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 23       	and	r24, r24
     de0:	a1 f4       	brne	.+40     	; 0xe0a <DIO_PinEnablePullUp+0x10a>
				SET_BIT(PORTC_Register, DIO_pin);
     de2:	a5 e3       	ldi	r26, 0x35	; 53
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e3       	ldi	r30, 0x35	; 53
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_PinEnablePullUp+0x100>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_PinEnablePullUp+0xfc>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	24 c0       	rjmp	.+72     	; 0xe52 <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	21 c0       	rjmp	.+66     	; 0xe52 <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PIN_INPUT) {
     e10:	e1 e3       	ldi	r30, 0x31	; 49
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	88 23       	and	r24, r24
     e18:	a1 f4       	brne	.+40     	; 0xe42 <DIO_PinEnablePullUp+0x142>
				SET_BIT(PORTD_Register, DIO_pin);
     e1a:	a2 e3       	ldi	r26, 0x32	; 50
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e2 e3       	ldi	r30, 0x32	; 50
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_PinEnablePullUp+0x138>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_PinEnablePullUp+0x134>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	08 c0       	rjmp	.+16     	; 0xe52 <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <DIO_PinEnablePullUp+0x152>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_PinEnablePullUp+0x152>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <DIO_SetPortVal>:

DIO_ERROR_RETVAL_t DIO_SetPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <DIO_SetPortVal+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_SetPortVal+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	8a 83       	std	Y+2, r24	; 0x02
     e74:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     e76:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	85 30       	cpi	r24, 0x05	; 5
     e7c:	b8 f5       	brcc	.+110    	; 0xeec <DIO_SetPortVal+0x88>
		switch (DIO_port) {
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	3d 83       	std	Y+5, r19	; 0x05
     e86:	2c 83       	std	Y+4, r18	; 0x04
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	91 05       	cpc	r25, r1
     e90:	d9 f0       	breq	.+54     	; 0xec8 <DIO_SetPortVal+0x64>
     e92:	2c 81       	ldd	r18, Y+4	; 0x04
     e94:	3d 81       	ldd	r19, Y+5	; 0x05
     e96:	23 30       	cpi	r18, 0x03	; 3
     e98:	31 05       	cpc	r19, r1
     e9a:	34 f4       	brge	.+12     	; 0xea8 <DIO_SetPortVal+0x44>
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	91 05       	cpc	r25, r1
     ea4:	61 f0       	breq	.+24     	; 0xebe <DIO_SetPortVal+0x5a>
     ea6:	1f c0       	rjmp	.+62     	; 0xee6 <DIO_SetPortVal+0x82>
     ea8:	2c 81       	ldd	r18, Y+4	; 0x04
     eaa:	3d 81       	ldd	r19, Y+5	; 0x05
     eac:	23 30       	cpi	r18, 0x03	; 3
     eae:	31 05       	cpc	r19, r1
     eb0:	81 f0       	breq	.+32     	; 0xed2 <DIO_SetPortVal+0x6e>
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	91 05       	cpc	r25, r1
     eba:	81 f0       	breq	.+32     	; 0xedc <DIO_SetPortVal+0x78>
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <DIO_SetPortVal+0x82>
		case PORTA:

			WRITE_REG(PORTA_Register, value);
     ebe:	eb e3       	ldi	r30, 0x3B	; 59
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	80 83       	st	Z, r24
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <DIO_SetPortVal+0x8c>

			break;
		case PORTB:

			WRITE_REG(PORTB_Register, value);
     ec8:	e8 e3       	ldi	r30, 0x38	; 56
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	80 83       	st	Z, r24
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <DIO_SetPortVal+0x8c>

			break;
		case PORTC:

			WRITE_REG(PORTC_Register, value);
     ed2:	e5 e3       	ldi	r30, 0x35	; 53
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	80 83       	st	Z, r24
     eda:	0a c0       	rjmp	.+20     	; 0xef0 <DIO_SetPortVal+0x8c>

			break;
		case PORTD:

			WRITE_REG(PORTD_Register, value);
     edc:	e2 e3       	ldi	r30, 0x32	; 50
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	80 83       	st	Z, r24
     ee4:	05 c0       	rjmp	.+10     	; 0xef0 <DIO_SetPortVal+0x8c>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_SetPortVal+0x8c>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <DIO_ClrPortVal>:

DIO_ERROR_RETVAL_t DIO_ClrPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	29 97       	sbiw	r28, 0x09	; 9
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	8a 83       	std	Y+2, r24	; 0x02
     f18:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     f1a:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	85 30       	cpi	r24, 0x05	; 5
     f20:	08 f0       	brcs	.+2      	; 0xf24 <DIO_ClrPortVal+0x22>
     f22:	53 c0       	rjmp	.+166    	; 0xfca <DIO_ClrPortVal+0xc8>
		switch (DIO_port) {
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	39 87       	std	Y+9, r19	; 0x09
     f2c:	28 87       	std	Y+8, r18	; 0x08
     f2e:	88 85       	ldd	r24, Y+8	; 0x08
     f30:	99 85       	ldd	r25, Y+9	; 0x09
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	91 05       	cpc	r25, r1
     f36:	11 f1       	breq	.+68     	; 0xf7c <DIO_ClrPortVal+0x7a>
     f38:	28 85       	ldd	r18, Y+8	; 0x08
     f3a:	39 85       	ldd	r19, Y+9	; 0x09
     f3c:	23 30       	cpi	r18, 0x03	; 3
     f3e:	31 05       	cpc	r19, r1
     f40:	34 f4       	brge	.+12     	; 0xf4e <DIO_ClrPortVal+0x4c>
     f42:	88 85       	ldd	r24, Y+8	; 0x08
     f44:	99 85       	ldd	r25, Y+9	; 0x09
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 05       	cpc	r25, r1
     f4a:	61 f0       	breq	.+24     	; 0xf64 <DIO_ClrPortVal+0x62>
     f4c:	3b c0       	rjmp	.+118    	; 0xfc4 <DIO_ClrPortVal+0xc2>
     f4e:	28 85       	ldd	r18, Y+8	; 0x08
     f50:	39 85       	ldd	r19, Y+9	; 0x09
     f52:	23 30       	cpi	r18, 0x03	; 3
     f54:	31 05       	cpc	r19, r1
     f56:	f1 f0       	breq	.+60     	; 0xf94 <DIO_ClrPortVal+0x92>
     f58:	88 85       	ldd	r24, Y+8	; 0x08
     f5a:	99 85       	ldd	r25, Y+9	; 0x09
     f5c:	84 30       	cpi	r24, 0x04	; 4
     f5e:	91 05       	cpc	r25, r1
     f60:	29 f1       	breq	.+74     	; 0xfac <DIO_ClrPortVal+0xaa>
     f62:	30 c0       	rjmp	.+96     	; 0xfc4 <DIO_ClrPortVal+0xc2>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, ~value);
     f64:	eb e3       	ldi	r30, 0x3B	; 59
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	90 81       	ld	r25, Z
     f6a:	eb e3       	ldi	r30, 0x3B	; 59
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	80 95       	com	r24
     f76:	90 95       	com	r25
     f78:	80 83       	st	Z, r24
     f7a:	29 c0       	rjmp	.+82     	; 0xfce <DIO_ClrPortVal+0xcc>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, ~value);
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	20 81       	ld	r18, Z
     f82:	e8 e3       	ldi	r30, 0x38	; 56
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	80 95       	com	r24
     f8e:	90 95       	com	r25
     f90:	80 83       	st	Z, r24
     f92:	1d c0       	rjmp	.+58     	; 0xfce <DIO_ClrPortVal+0xcc>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, ~value);
     f94:	e5 e3       	ldi	r30, 0x35	; 53
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	30 81       	ld	r19, Z
     f9a:	e5 e3       	ldi	r30, 0x35	; 53
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	80 95       	com	r24
     fa6:	90 95       	com	r25
     fa8:	80 83       	st	Z, r24
     faa:	11 c0       	rjmp	.+34     	; 0xfce <DIO_ClrPortVal+0xcc>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, ~value);
     fac:	e2 e3       	ldi	r30, 0x32	; 50
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	e2 e3       	ldi	r30, 0x32	; 50
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	80 95       	com	r24
     fbe:	90 95       	com	r25
     fc0:	80 83       	st	Z, r24
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <DIO_ClrPortVal+0xcc>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_ClrPortVal+0xcc>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd0:	29 96       	adiw	r28, 0x09	; 9
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <DIO_SetPinVal>:

DIO_ERROR_RETVAL_t DIO_SetPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin,
		Byte value) {
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	28 97       	sbiw	r28, 0x08	; 8
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	8a 83       	std	Y+2, r24	; 0x02
     ff8:	6b 83       	std	Y+3, r22	; 0x03
     ffa:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     ffc:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	85 30       	cpi	r24, 0x05	; 5
    1002:	08 f0       	brcs	.+2      	; 0x1006 <DIO_SetPinVal+0x24>
    1004:	0f c2       	rjmp	.+1054   	; 0x1424 <DIO_SetPinVal+0x442>
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	88 30       	cpi	r24, 0x08	; 8
    100a:	08 f0       	brcs	.+2      	; 0x100e <DIO_SetPinVal+0x2c>
    100c:	0b c2       	rjmp	.+1046   	; 0x1424 <DIO_SetPinVal+0x442>
		if (value == PIN_HIGH) {
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	09 f0       	breq	.+2      	; 0x1016 <DIO_SetPinVal+0x34>
    1014:	fe c0       	rjmp	.+508    	; 0x1212 <DIO_SetPinVal+0x230>

			switch (DIO_port) {
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	38 87       	std	Y+8, r19	; 0x08
    101e:	2f 83       	std	Y+7, r18	; 0x07
    1020:	4f 81       	ldd	r20, Y+7	; 0x07
    1022:	58 85       	ldd	r21, Y+8	; 0x08
    1024:	42 30       	cpi	r20, 0x02	; 2
    1026:	51 05       	cpc	r21, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <DIO_SetPinVal+0x4a>
    102a:	4e c0       	rjmp	.+156    	; 0x10c8 <DIO_SetPinVal+0xe6>
    102c:	8f 81       	ldd	r24, Y+7	; 0x07
    102e:	98 85       	ldd	r25, Y+8	; 0x08
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	34 f4       	brge	.+12     	; 0x1042 <DIO_SetPinVal+0x60>
    1036:	2f 81       	ldd	r18, Y+7	; 0x07
    1038:	38 85       	ldd	r19, Y+8	; 0x08
    103a:	21 30       	cpi	r18, 0x01	; 1
    103c:	31 05       	cpc	r19, r1
    103e:	71 f0       	breq	.+28     	; 0x105c <DIO_SetPinVal+0x7a>
    1040:	e5 c0       	rjmp	.+458    	; 0x120c <DIO_SetPinVal+0x22a>
    1042:	4f 81       	ldd	r20, Y+7	; 0x07
    1044:	58 85       	ldd	r21, Y+8	; 0x08
    1046:	43 30       	cpi	r20, 0x03	; 3
    1048:	51 05       	cpc	r21, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <DIO_SetPinVal+0x6c>
    104c:	73 c0       	rjmp	.+230    	; 0x1134 <DIO_SetPinVal+0x152>
    104e:	8f 81       	ldd	r24, Y+7	; 0x07
    1050:	98 85       	ldd	r25, Y+8	; 0x08
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <DIO_SetPinVal+0x78>
    1058:	a3 c0       	rjmp	.+326    	; 0x11a0 <DIO_SetPinVal+0x1be>
    105a:	d8 c0       	rjmp	.+432    	; 0x120c <DIO_SetPinVal+0x22a>
			case PORTA:
				if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_SetPinVal+0x94>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	2a 95       	dec	r18
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_SetPinVal+0x90>
    107a:	9a 01       	movw	r18, r20
    107c:	28 23       	and	r18, r24
    107e:	39 23       	and	r19, r25
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_SetPinVal+0xac>
    108a:	55 95       	asr	r21
    108c:	47 95       	ror	r20
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_SetPinVal+0xa8>
    1092:	ca 01       	movw	r24, r20
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	a1 f4       	brne	.+40     	; 0x10c2 <DIO_SetPinVal+0xe0>
					SET_BIT(PORTA_Register, DIO_pin);
    109a:	ab e3       	ldi	r26, 0x3B	; 59
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	eb e3       	ldi	r30, 0x3B	; 59
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_SetPinVal+0xd6>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_SetPinVal+0xd2>
    10bc:	84 2b       	or	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	b3 c1       	rjmp	.+870    	; 0x1428 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	b0 c1       	rjmp	.+864    	; 0x1428 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    10c8:	e7 e3       	ldi	r30, 0x37	; 55
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_SetPinVal+0x100>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	2a 95       	dec	r18
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_SetPinVal+0xfc>
    10e6:	9a 01       	movw	r18, r20
    10e8:	28 23       	and	r18, r24
    10ea:	39 23       	and	r19, r25
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a9 01       	movw	r20, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_SetPinVal+0x118>
    10f6:	55 95       	asr	r21
    10f8:	47 95       	ror	r20
    10fa:	8a 95       	dec	r24
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_SetPinVal+0x114>
    10fe:	ca 01       	movw	r24, r20
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	91 05       	cpc	r25, r1
    1104:	a1 f4       	brne	.+40     	; 0x112e <DIO_SetPinVal+0x14c>
					SET_BIT(PORTB_Register, DIO_pin);
    1106:	a8 e3       	ldi	r26, 0x38	; 56
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e8 e3       	ldi	r30, 0x38	; 56
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_SetPinVal+0x142>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_SetPinVal+0x13e>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	7d c1       	rjmp	.+762    	; 0x1428 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	7a c1       	rjmp	.+756    	; 0x1428 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    1134:	e4 e3       	ldi	r30, 0x34	; 52
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_SetPinVal+0x16c>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	2a 95       	dec	r18
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_SetPinVal+0x168>
    1152:	9a 01       	movw	r18, r20
    1154:	28 23       	and	r18, r24
    1156:	39 23       	and	r19, r25
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_SetPinVal+0x184>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_SetPinVal+0x180>
    116a:	ca 01       	movw	r24, r20
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	a1 f4       	brne	.+40     	; 0x119a <DIO_SetPinVal+0x1b8>
					SET_BIT(PORTC_Register, DIO_pin);
    1172:	a5 e3       	ldi	r26, 0x35	; 53
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e3       	ldi	r30, 0x35	; 53
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_SetPinVal+0x1ae>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_SetPinVal+0x1aa>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	47 c1       	rjmp	.+654    	; 0x1428 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	44 c1       	rjmp	.+648    	; 0x1428 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    11a0:	e1 e3       	ldi	r30, 0x31	; 49
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_SetPinVal+0x1d8>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	2a 95       	dec	r18
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_SetPinVal+0x1d4>
    11be:	9a 01       	movw	r18, r20
    11c0:	28 23       	and	r18, r24
    11c2:	39 23       	and	r19, r25
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_SetPinVal+0x1f0>
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_SetPinVal+0x1ec>
    11d6:	ca 01       	movw	r24, r20
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	a1 f4       	brne	.+40     	; 0x1206 <DIO_SetPinVal+0x224>
					SET_BIT(PORTD_Register, DIO_pin);
    11de:	a2 e3       	ldi	r26, 0x32	; 50
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e2 e3       	ldi	r30, 0x32	; 50
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_SetPinVal+0x21a>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_SetPinVal+0x216>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	11 c1       	rjmp	.+546    	; 0x1428 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	0e c1       	rjmp	.+540    	; 0x1428 <DIO_SetPinVal+0x446>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	0b c1       	rjmp	.+534    	; 0x1428 <DIO_SetPinVal+0x446>
				break;
			}
		} else if (value == PIN_LOW) {
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	88 23       	and	r24, r24
    1216:	09 f0       	breq	.+2      	; 0x121a <DIO_SetPinVal+0x238>
    1218:	02 c1       	rjmp	.+516    	; 0x141e <DIO_SetPinVal+0x43c>

			switch (DIO_port) {
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3e 83       	std	Y+6, r19	; 0x06
    1222:	2d 83       	std	Y+5, r18	; 0x05
    1224:	4d 81       	ldd	r20, Y+5	; 0x05
    1226:	5e 81       	ldd	r21, Y+6	; 0x06
    1228:	42 30       	cpi	r20, 0x02	; 2
    122a:	51 05       	cpc	r21, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <DIO_SetPinVal+0x24e>
    122e:	4f c0       	rjmp	.+158    	; 0x12ce <DIO_SetPinVal+0x2ec>
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	34 f4       	brge	.+12     	; 0x1246 <DIO_SetPinVal+0x264>
    123a:	2d 81       	ldd	r18, Y+5	; 0x05
    123c:	3e 81       	ldd	r19, Y+6	; 0x06
    123e:	21 30       	cpi	r18, 0x01	; 1
    1240:	31 05       	cpc	r19, r1
    1242:	71 f0       	breq	.+28     	; 0x1260 <DIO_SetPinVal+0x27e>
    1244:	e9 c0       	rjmp	.+466    	; 0x1418 <DIO_SetPinVal+0x436>
    1246:	4d 81       	ldd	r20, Y+5	; 0x05
    1248:	5e 81       	ldd	r21, Y+6	; 0x06
    124a:	43 30       	cpi	r20, 0x03	; 3
    124c:	51 05       	cpc	r21, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <DIO_SetPinVal+0x270>
    1250:	75 c0       	rjmp	.+234    	; 0x133c <DIO_SetPinVal+0x35a>
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	91 05       	cpc	r25, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <DIO_SetPinVal+0x27c>
    125c:	a6 c0       	rjmp	.+332    	; 0x13aa <DIO_SetPinVal+0x3c8>
    125e:	dc c0       	rjmp	.+440    	; 0x1418 <DIO_SetPinVal+0x436>
			case PORTA:
				if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    1260:	ea e3       	ldi	r30, 0x3A	; 58
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_SetPinVal+0x298>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	2a 95       	dec	r18
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_SetPinVal+0x294>
    127e:	9a 01       	movw	r18, r20
    1280:	28 23       	and	r18, r24
    1282:	39 23       	and	r19, r25
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a9 01       	movw	r20, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_SetPinVal+0x2b0>
    128e:	55 95       	asr	r21
    1290:	47 95       	ror	r20
    1292:	8a 95       	dec	r24
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_SetPinVal+0x2ac>
    1296:	ca 01       	movw	r24, r20
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	a9 f4       	brne	.+42     	; 0x12c8 <DIO_SetPinVal+0x2e6>
					CLEAR_BIT(PORTA_Register, DIO_pin);
    129e:	ab e3       	ldi	r26, 0x3B	; 59
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	eb e3       	ldi	r30, 0x3B	; 59
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_SetPinVal+0x2da>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_SetPinVal+0x2d6>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	b0 c0       	rjmp	.+352    	; 0x1428 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	ad c0       	rjmp	.+346    	; 0x1428 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    12ce:	e7 e3       	ldi	r30, 0x37	; 55
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_SetPinVal+0x306>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	2a 95       	dec	r18
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_SetPinVal+0x302>
    12ec:	9a 01       	movw	r18, r20
    12ee:	28 23       	and	r18, r24
    12f0:	39 23       	and	r19, r25
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a9 01       	movw	r20, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_SetPinVal+0x31e>
    12fc:	55 95       	asr	r21
    12fe:	47 95       	ror	r20
    1300:	8a 95       	dec	r24
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_SetPinVal+0x31a>
    1304:	ca 01       	movw	r24, r20
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	91 05       	cpc	r25, r1
    130a:	a9 f4       	brne	.+42     	; 0x1336 <DIO_SetPinVal+0x354>
					CLEAR_BIT(PORTB_Register, DIO_pin);
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_SetPinVal+0x348>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_SetPinVal+0x344>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	79 c0       	rjmp	.+242    	; 0x1428 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	76 c0       	rjmp	.+236    	; 0x1428 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    133c:	e4 e3       	ldi	r30, 0x34	; 52
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_SetPinVal+0x374>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	2a 95       	dec	r18
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_SetPinVal+0x370>
    135a:	9a 01       	movw	r18, r20
    135c:	28 23       	and	r18, r24
    135e:	39 23       	and	r19, r25
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_SetPinVal+0x38c>
    136a:	55 95       	asr	r21
    136c:	47 95       	ror	r20
    136e:	8a 95       	dec	r24
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_SetPinVal+0x388>
    1372:	ca 01       	movw	r24, r20
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	a9 f4       	brne	.+42     	; 0x13a4 <DIO_SetPinVal+0x3c2>
					CLEAR_BIT(PORTC_Register, DIO_pin);
    137a:	a5 e3       	ldi	r26, 0x35	; 53
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e5 e3       	ldi	r30, 0x35	; 53
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_SetPinVal+0x3b6>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_SetPinVal+0x3b2>
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	42 c0       	rjmp	.+132    	; 0x1428 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	3f c0       	rjmp	.+126    	; 0x1428 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    13aa:	e1 e3       	ldi	r30, 0x31	; 49
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_SetPinVal+0x3e2>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	2a 95       	dec	r18
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_SetPinVal+0x3de>
    13c8:	9a 01       	movw	r18, r20
    13ca:	28 23       	and	r18, r24
    13cc:	39 23       	and	r19, r25
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_SetPinVal+0x3fa>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_SetPinVal+0x3f6>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	a9 f4       	brne	.+42     	; 0x1412 <DIO_SetPinVal+0x430>
					CLEAR_BIT(PORTD_Register, DIO_pin);
    13e8:	a2 e3       	ldi	r26, 0x32	; 50
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_SetPinVal+0x424>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_SetPinVal+0x420>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	0b c0       	rjmp	.+22     	; 0x1428 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	08 c0       	rjmp	.+16     	; 0x1428 <DIO_SetPinVal+0x446>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <DIO_SetPinVal+0x446>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_SetPinVal+0x446>
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
}
    142a:	28 96       	adiw	r28, 0x08	; 8
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <DIO_GetPortVal>:

Byte DIO_GetPortVal(DIO_PORT_ID_t DIO_port) {
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_GetPortVal+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_GetPortVal+0x8>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	8a 83       	std	Y+2, r24	; 0x02
	Byte RETVAL = EXIT_FAILURE;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD)) {
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	85 30       	cpi	r24, 0x05	; 5
    1452:	b8 f5       	brcc	.+110    	; 0x14c2 <DIO_GetPortVal+0x86>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	3c 83       	std	Y+4, r19	; 0x04
    145c:	2b 83       	std	Y+3, r18	; 0x03
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	91 05       	cpc	r25, r1
    1466:	d9 f0       	breq	.+54     	; 0x149e <DIO_GetPortVal+0x62>
    1468:	2b 81       	ldd	r18, Y+3	; 0x03
    146a:	3c 81       	ldd	r19, Y+4	; 0x04
    146c:	23 30       	cpi	r18, 0x03	; 3
    146e:	31 05       	cpc	r19, r1
    1470:	34 f4       	brge	.+12     	; 0x147e <DIO_GetPortVal+0x42>
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	91 05       	cpc	r25, r1
    147a:	61 f0       	breq	.+24     	; 0x1494 <DIO_GetPortVal+0x58>
    147c:	1f c0       	rjmp	.+62     	; 0x14bc <DIO_GetPortVal+0x80>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	23 30       	cpi	r18, 0x03	; 3
    1484:	31 05       	cpc	r19, r1
    1486:	81 f0       	breq	.+32     	; 0x14a8 <DIO_GetPortVal+0x6c>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	91 05       	cpc	r25, r1
    1490:	81 f0       	breq	.+32     	; 0x14b2 <DIO_GetPortVal+0x76>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <DIO_GetPortVal+0x80>
		case PORTA:
			RETVAL = READ_REG(PINA_Register);
    1494:	e9 e3       	ldi	r30, 0x39	; 57
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	14 c0       	rjmp	.+40     	; 0x14c6 <DIO_GetPortVal+0x8a>
			break;
		case PORTB:
			RETVAL = READ_REG(PINB_Register);
    149e:	e6 e3       	ldi	r30, 0x36	; 54
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <DIO_GetPortVal+0x8a>
			break;
		case PORTC:
			RETVAL = READ_REG(PINC_Register);
    14a8:	e3 e3       	ldi	r30, 0x33	; 51
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	0a c0       	rjmp	.+20     	; 0x14c6 <DIO_GetPortVal+0x8a>
			break;
		case PORTD:
			RETVAL = READ_REG(PIND_Register);
    14b2:	e0 e3       	ldi	r30, 0x30	; 48
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <DIO_GetPortVal+0x8a>
			break;
		default:
			RETVAL = EXIT_FAILURE;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_GetPortVal+0x8a>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return RETVAL;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <DIO_GetPinVal>:

Byte DIO_GetPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin) {
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <DIO_GetPinVal+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <DIO_GetPinVal+0x8>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	6b 83       	std	Y+3, r22	; 0x03

	Byte RETVAL = EXIT_FAILURE;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	85 30       	cpi	r24, 0x05	; 5
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <DIO_GetPinVal+0x1e>
    14f2:	9e c0       	rjmp	.+316    	; 0x1630 <DIO_GetPinVal+0x15a>
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 30       	cpi	r24, 0x08	; 8
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <DIO_GetPinVal+0x26>
    14fa:	9a c0       	rjmp	.+308    	; 0x1630 <DIO_GetPinVal+0x15a>

		switch (DIO_port) {
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	3d 83       	std	Y+5, r19	; 0x05
    1504:	2c 83       	std	Y+4, r18	; 0x04
    1506:	4c 81       	ldd	r20, Y+4	; 0x04
    1508:	5d 81       	ldd	r21, Y+5	; 0x05
    150a:	42 30       	cpi	r20, 0x02	; 2
    150c:	51 05       	cpc	r21, r1
    150e:	b1 f1       	breq	.+108    	; 0x157c <DIO_GetPinVal+0xa6>
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	34 f4       	brge	.+12     	; 0x1526 <DIO_GetPinVal+0x50>
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	3d 81       	ldd	r19, Y+5	; 0x05
    151e:	21 30       	cpi	r18, 0x01	; 1
    1520:	31 05       	cpc	r19, r1
    1522:	71 f0       	breq	.+28     	; 0x1540 <DIO_GetPinVal+0x6a>
    1524:	87 c0       	rjmp	.+270    	; 0x1634 <DIO_GetPinVal+0x15e>
    1526:	4c 81       	ldd	r20, Y+4	; 0x04
    1528:	5d 81       	ldd	r21, Y+5	; 0x05
    152a:	43 30       	cpi	r20, 0x03	; 3
    152c:	51 05       	cpc	r21, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <DIO_GetPinVal+0x5c>
    1530:	43 c0       	rjmp	.+134    	; 0x15b8 <DIO_GetPinVal+0xe2>
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <DIO_GetPinVal+0x68>
    153c:	5b c0       	rjmp	.+182    	; 0x15f4 <DIO_GetPinVal+0x11e>
    153e:	7a c0       	rjmp	.+244    	; 0x1634 <DIO_GetPinVal+0x15e>
		case PORTA:
			RETVAL = READ_BIT(PINA_Register, DIO_pin);
    1540:	e9 e3       	ldi	r30, 0x39	; 57
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_GetPinVal+0x84>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	2a 95       	dec	r18
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_GetPinVal+0x80>
    155e:	9a 01       	movw	r18, r20
    1560:	28 23       	and	r18, r24
    1562:	39 23       	and	r19, r25
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a9 01       	movw	r20, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_GetPinVal+0x9c>
    156e:	55 95       	asr	r21
    1570:	47 95       	ror	r20
    1572:	8a 95       	dec	r24
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_GetPinVal+0x98>
    1576:	ca 01       	movw	r24, r20
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	5c c0       	rjmp	.+184    	; 0x1634 <DIO_GetPinVal+0x15e>
			break;
		case PORTB:
			RETVAL = READ_BIT(PINB_Register, DIO_pin);
    157c:	e6 e3       	ldi	r30, 0x36	; 54
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_GetPinVal+0xc0>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	2a 95       	dec	r18
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_GetPinVal+0xbc>
    159a:	9a 01       	movw	r18, r20
    159c:	28 23       	and	r18, r24
    159e:	39 23       	and	r19, r25
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_GetPinVal+0xd8>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_GetPinVal+0xd4>
    15b2:	ca 01       	movw	r24, r20
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	3e c0       	rjmp	.+124    	; 0x1634 <DIO_GetPinVal+0x15e>
			break;
		case PORTC:
			RETVAL = READ_BIT(PINC_Register, DIO_pin);
    15b8:	e3 e3       	ldi	r30, 0x33	; 51
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_GetPinVal+0xfc>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	2a 95       	dec	r18
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_GetPinVal+0xf8>
    15d6:	9a 01       	movw	r18, r20
    15d8:	28 23       	and	r18, r24
    15da:	39 23       	and	r19, r25
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	a9 01       	movw	r20, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_GetPinVal+0x114>
    15e6:	55 95       	asr	r21
    15e8:	47 95       	ror	r20
    15ea:	8a 95       	dec	r24
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_GetPinVal+0x110>
    15ee:	ca 01       	movw	r24, r20
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	20 c0       	rjmp	.+64     	; 0x1634 <DIO_GetPinVal+0x15e>
			break;
		case PORTD:
			RETVAL = READ_BIT(PIND_Register, DIO_pin);
    15f4:	e0 e3       	ldi	r30, 0x30	; 48
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_GetPinVal+0x138>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	2a 95       	dec	r18
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_GetPinVal+0x134>
    1612:	9a 01       	movw	r18, r20
    1614:	28 23       	and	r18, r24
    1616:	39 23       	and	r19, r25
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_GetPinVal+0x150>
    1622:	55 95       	asr	r21
    1624:	47 95       	ror	r20
    1626:	8a 95       	dec	r24
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_GetPinVal+0x14c>
    162a:	ca 01       	movw	r24, r20
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_GetPinVal+0x15e>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
	}

	return RETVAL;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <DIO_TogPortVal>:

DIO_ERROR_RETVAL_t DIO_TogPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <DIO_TogPortVal+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <DIO_TogPortVal+0x8>
    164e:	0f 92       	push	r0
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1658:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	85 30       	cpi	r24, 0x05	; 5
    165e:	08 f0       	brcs	.+2      	; 0x1662 <DIO_TogPortVal+0x1c>
    1660:	67 c0       	rjmp	.+206    	; 0x1730 <DIO_TogPortVal+0xea>
		switch (DIO_port) {
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3d 83       	std	Y+5, r19	; 0x05
    166a:	2c 83       	std	Y+4, r18	; 0x04
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	82 30       	cpi	r24, 0x02	; 2
    1672:	91 05       	cpc	r25, r1
    1674:	39 f1       	breq	.+78     	; 0x16c4 <DIO_TogPortVal+0x7e>
    1676:	2c 81       	ldd	r18, Y+4	; 0x04
    1678:	3d 81       	ldd	r19, Y+5	; 0x05
    167a:	23 30       	cpi	r18, 0x03	; 3
    167c:	31 05       	cpc	r19, r1
    167e:	34 f4       	brge	.+12     	; 0x168c <DIO_TogPortVal+0x46>
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	9d 81       	ldd	r25, Y+5	; 0x05
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	61 f0       	breq	.+24     	; 0x16a2 <DIO_TogPortVal+0x5c>
    168a:	4f c0       	rjmp	.+158    	; 0x172a <DIO_TogPortVal+0xe4>
    168c:	2c 81       	ldd	r18, Y+4	; 0x04
    168e:	3d 81       	ldd	r19, Y+5	; 0x05
    1690:	23 30       	cpi	r18, 0x03	; 3
    1692:	31 05       	cpc	r19, r1
    1694:	41 f1       	breq	.+80     	; 0x16e6 <DIO_TogPortVal+0xa0>
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	84 30       	cpi	r24, 0x04	; 4
    169c:	91 05       	cpc	r25, r1
    169e:	a1 f1       	breq	.+104    	; 0x1708 <DIO_TogPortVal+0xc2>
    16a0:	44 c0       	rjmp	.+136    	; 0x172a <DIO_TogPortVal+0xe4>
		case PORTA:
			if (READ_REG(DDRA_Register) == PORT_OUTPUT) {
    16a2:	ea e3       	ldi	r30, 0x3A	; 58
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8f 3f       	cpi	r24, 0xFF	; 255
    16aa:	49 f4       	brne	.+18     	; 0x16be <DIO_TogPortVal+0x78>
				TOG_REG(PORTA_Register, value);
    16ac:	ab e3       	ldi	r26, 0x3B	; 59
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	90 81       	ld	r25, Z
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	89 27       	eor	r24, r25
    16ba:	8c 93       	st	X, r24
    16bc:	3b c0       	rjmp	.+118    	; 0x1734 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	38 c0       	rjmp	.+112    	; 0x1734 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PORT_OUTPUT) {
    16c4:	e7 e3       	ldi	r30, 0x37	; 55
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 3f       	cpi	r24, 0xFF	; 255
    16cc:	49 f4       	brne	.+18     	; 0x16e0 <DIO_TogPortVal+0x9a>
				TOG_REG(PORTB_Register, value);
    16ce:	a8 e3       	ldi	r26, 0x38	; 56
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e8 e3       	ldi	r30, 0x38	; 56
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	90 81       	ld	r25, Z
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	89 27       	eor	r24, r25
    16dc:	8c 93       	st	X, r24
    16de:	2a c0       	rjmp	.+84     	; 0x1734 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	27 c0       	rjmp	.+78     	; 0x1734 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PORT_OUTPUT) {
    16e6:	e4 e3       	ldi	r30, 0x34	; 52
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8f 3f       	cpi	r24, 0xFF	; 255
    16ee:	49 f4       	brne	.+18     	; 0x1702 <DIO_TogPortVal+0xbc>
				TOG_REG(PORTC_Register, value);
    16f0:	a5 e3       	ldi	r26, 0x35	; 53
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e3       	ldi	r30, 0x35	; 53
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	90 81       	ld	r25, Z
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	89 27       	eor	r24, r25
    16fe:	8c 93       	st	X, r24
    1700:	19 c0       	rjmp	.+50     	; 0x1734 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	16 c0       	rjmp	.+44     	; 0x1734 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PORT_OUTPUT) {
    1708:	e1 e3       	ldi	r30, 0x31	; 49
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8f 3f       	cpi	r24, 0xFF	; 255
    1710:	49 f4       	brne	.+18     	; 0x1724 <DIO_TogPortVal+0xde>
				TOG_REG(PORTD_Register, value);
    1712:	a2 e3       	ldi	r26, 0x32	; 50
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e2 e3       	ldi	r30, 0x32	; 50
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	90 81       	ld	r25, Z
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	89 27       	eor	r24, r25
    1720:	8c 93       	st	X, r24
    1722:	08 c0       	rjmp	.+16     	; 0x1734 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <DIO_TogPortVal+0xee>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_TogPortVal+0xee>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1734:	89 81       	ldd	r24, Y+1	; 0x01
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <DIO_TogPinVal>:

DIO_ERROR_RETVAL_t DIO_TogPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin) {
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <DIO_TogPinVal+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <DIO_TogPinVal+0x8>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	8a 83       	std	Y+2, r24	; 0x02
    1756:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1758:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	85 30       	cpi	r24, 0x05	; 5
    175e:	08 f0       	brcs	.+2      	; 0x1762 <DIO_TogPinVal+0x1c>
    1760:	02 c1       	rjmp	.+516    	; 0x1966 <DIO_TogPinVal+0x220>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	08 f0       	brcs	.+2      	; 0x176a <DIO_TogPinVal+0x24>
    1768:	fe c0       	rjmp	.+508    	; 0x1966 <DIO_TogPinVal+0x220>
		switch (DIO_port) {
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	3d 83       	std	Y+5, r19	; 0x05
    1772:	2c 83       	std	Y+4, r18	; 0x04
    1774:	4c 81       	ldd	r20, Y+4	; 0x04
    1776:	5d 81       	ldd	r21, Y+5	; 0x05
    1778:	42 30       	cpi	r20, 0x02	; 2
    177a:	51 05       	cpc	r21, r1
    177c:	09 f4       	brne	.+2      	; 0x1780 <DIO_TogPinVal+0x3a>
    177e:	4e c0       	rjmp	.+156    	; 0x181c <DIO_TogPinVal+0xd6>
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	9d 81       	ldd	r25, Y+5	; 0x05
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	91 05       	cpc	r25, r1
    1788:	34 f4       	brge	.+12     	; 0x1796 <DIO_TogPinVal+0x50>
    178a:	2c 81       	ldd	r18, Y+4	; 0x04
    178c:	3d 81       	ldd	r19, Y+5	; 0x05
    178e:	21 30       	cpi	r18, 0x01	; 1
    1790:	31 05       	cpc	r19, r1
    1792:	71 f0       	breq	.+28     	; 0x17b0 <DIO_TogPinVal+0x6a>
    1794:	e5 c0       	rjmp	.+458    	; 0x1960 <DIO_TogPinVal+0x21a>
    1796:	4c 81       	ldd	r20, Y+4	; 0x04
    1798:	5d 81       	ldd	r21, Y+5	; 0x05
    179a:	43 30       	cpi	r20, 0x03	; 3
    179c:	51 05       	cpc	r21, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <DIO_TogPinVal+0x5c>
    17a0:	73 c0       	rjmp	.+230    	; 0x1888 <DIO_TogPinVal+0x142>
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <DIO_TogPinVal+0x68>
    17ac:	a3 c0       	rjmp	.+326    	; 0x18f4 <DIO_TogPinVal+0x1ae>
    17ae:	d8 c0       	rjmp	.+432    	; 0x1960 <DIO_TogPinVal+0x21a>
		case PORTA:
			if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    17b0:	ea e3       	ldi	r30, 0x3A	; 58
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_TogPinVal+0x84>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	2a 95       	dec	r18
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_TogPinVal+0x80>
    17ce:	9a 01       	movw	r18, r20
    17d0:	28 23       	and	r18, r24
    17d2:	39 23       	and	r19, r25
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a9 01       	movw	r20, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_TogPinVal+0x9c>
    17de:	55 95       	asr	r21
    17e0:	47 95       	ror	r20
    17e2:	8a 95       	dec	r24
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_TogPinVal+0x98>
    17e6:	ca 01       	movw	r24, r20
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	a1 f4       	brne	.+40     	; 0x1816 <DIO_TogPinVal+0xd0>
				TOG_BIT(PORTA_Register, DIO_pin);
    17ee:	ab e3       	ldi	r26, 0x3B	; 59
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	eb e3       	ldi	r30, 0x3B	; 59
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <DIO_TogPinVal+0xc6>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <DIO_TogPinVal+0xc2>
    1810:	84 27       	eor	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	aa c0       	rjmp	.+340    	; 0x196a <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	a7 c0       	rjmp	.+334    	; 0x196a <DIO_TogPinVal+0x224>
			}
			break;
		case PORTB:
			if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    181c:	e7 e3       	ldi	r30, 0x37	; 55
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_TogPinVal+0xf0>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	2a 95       	dec	r18
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_TogPinVal+0xec>
    183a:	9a 01       	movw	r18, r20
    183c:	28 23       	and	r18, r24
    183e:	39 23       	and	r19, r25
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	88 2f       	mov	r24, r24
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a9 01       	movw	r20, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_TogPinVal+0x108>
    184a:	55 95       	asr	r21
    184c:	47 95       	ror	r20
    184e:	8a 95       	dec	r24
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_TogPinVal+0x104>
    1852:	ca 01       	movw	r24, r20
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	91 05       	cpc	r25, r1
    1858:	a1 f4       	brne	.+40     	; 0x1882 <DIO_TogPinVal+0x13c>
				TOG_BIT(PORTB_Register, DIO_pin);
    185a:	a8 e3       	ldi	r26, 0x38	; 56
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <DIO_TogPinVal+0x132>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <DIO_TogPinVal+0x12e>
    187c:	84 27       	eor	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	74 c0       	rjmp	.+232    	; 0x196a <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	71 c0       	rjmp	.+226    	; 0x196a <DIO_TogPinVal+0x224>
			}
			break;
		case PORTC:
			if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_TogPinVal+0x15c>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	2a 95       	dec	r18
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_TogPinVal+0x158>
    18a6:	9a 01       	movw	r18, r20
    18a8:	28 23       	and	r18, r24
    18aa:	39 23       	and	r19, r25
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a9 01       	movw	r20, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_TogPinVal+0x174>
    18b6:	55 95       	asr	r21
    18b8:	47 95       	ror	r20
    18ba:	8a 95       	dec	r24
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_TogPinVal+0x170>
    18be:	ca 01       	movw	r24, r20
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	91 05       	cpc	r25, r1
    18c4:	a1 f4       	brne	.+40     	; 0x18ee <DIO_TogPinVal+0x1a8>
				TOG_BIT(PORTC_Register, DIO_pin);
    18c6:	a5 e3       	ldi	r26, 0x35	; 53
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e5 e3       	ldi	r30, 0x35	; 53
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_TogPinVal+0x19e>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_TogPinVal+0x19a>
    18e8:	84 27       	eor	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	3e c0       	rjmp	.+124    	; 0x196a <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	3b c0       	rjmp	.+118    	; 0x196a <DIO_TogPinVal+0x224>
			}
			break;
		case PORTD:
			if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    18f4:	e1 e3       	ldi	r30, 0x31	; 49
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_TogPinVal+0x1c8>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	2a 95       	dec	r18
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_TogPinVal+0x1c4>
    1912:	9a 01       	movw	r18, r20
    1914:	28 23       	and	r18, r24
    1916:	39 23       	and	r19, r25
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a9 01       	movw	r20, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <DIO_TogPinVal+0x1e0>
    1922:	55 95       	asr	r21
    1924:	47 95       	ror	r20
    1926:	8a 95       	dec	r24
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <DIO_TogPinVal+0x1dc>
    192a:	ca 01       	movw	r24, r20
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	91 05       	cpc	r25, r1
    1930:	a1 f4       	brne	.+40     	; 0x195a <DIO_TogPinVal+0x214>
				TOG_BIT(PORTD_Register, DIO_pin);
    1932:	a2 e3       	ldi	r26, 0x32	; 50
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e2 e3       	ldi	r30, 0x32	; 50
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <DIO_TogPinVal+0x20a>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <DIO_TogPinVal+0x206>
    1954:	84 27       	eor	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	08 c0       	rjmp	.+16     	; 0x196a <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	05 c0       	rjmp	.+10     	; 0x196a <DIO_TogPinVal+0x224>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_TogPinVal+0x224>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <APP2_Init>:
#include "../MCAL/UART/UART.h"
#include "../MCAL/SPI/SPI.h"
#include "APP_2.h"

uint8_t character[255];
void APP2_Init() {
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	case Master:
		UART_Init(UARTChannel_1);
		SPI_Init(SPIChannel_1);
		break;
	case Slave:
		UART_Init(UARTChannel_1);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_Init>
		SPI_Init(SPIChannel_1);
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Init>
		break;
	}
}
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <APP2_Start>:
void APP2_Start() {
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
					!= OperationSuccess)
				;
		}
		break;
	case Slave:
		if (SPI_ReceiveString(SPIChannel_1, character,
    199e:	28 e6       	ldi	r18, 0x68	; 104
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	b9 01       	movw	r22, r18
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <SPI_ReceiveString>
    19ac:	88 23       	and	r24, r24
    19ae:	41 f4       	brne	.+16     	; 0x19c0 <APP2_Start+0x2a>
				SlaveID_1) == OperationSuccess) {
			while(UART_TransmitString(1, character)!= OperationSuccess);
    19b0:	28 e6       	ldi	r18, 0x68	; 104
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	b9 01       	movw	r22, r18
    19b8:	0e 94 20 01 	call	0x240	; 0x240 <UART_TransmitString>
    19bc:	88 23       	and	r24, r24
    19be:	c1 f7       	brne	.-16     	; 0x19b0 <APP2_Start+0x1a>
		}
		break;
	}
}
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <main>:
#include "MCAL/DIO/DIO_DRIVER_TypeDef.h"
#include "MCAL/DIO/DIO_DRIVER.h"
#include "MCAL/UART/UART.h"
#include "MCAL/SPI/SPI.h"
#include "APP/APP_2.h"
int main() {
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
	APP2_Init();
    19ce:	0e 94 be 0c 	call	0x197c	; 0x197c <APP2_Init>
	while (1)
	{
		APP2_Start();
    19d2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <APP2_Start>
    19d6:	fd cf       	rjmp	.-6      	; 0x19d2 <main+0xc>

000019d8 <_exit>:
    19d8:	f8 94       	cli

000019da <__stop_program>:
    19da:	ff cf       	rjmp	.-2      	; 0x19da <__stop_program>
