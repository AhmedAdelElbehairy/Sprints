
DesignImplementDriverForTWI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001bc8  00001c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800066  00800066  00001c62  2**0
                  ALLOC
  3 .stab         00002574  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c20  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_13>
      38:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_14>
      3c:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <main>
      8a:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
void static (*UART_TX_Complete_callback)(void)=NULL;
void __vector_13(void)__attribute__((signal,used));//RX_complete
void __vector_14(void)__attribute__((signal,used));//UDRE Empty
void __vector_15(void)__attribute__((signal,used));//TX_complete
//void static (*PtrToFunction)(void);
uint8_t UART_Init(uint8_t UartNumber) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_Init+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
      9e:	8f ef       	ldi	r24, 0xFF	; 255
      a0:	89 83       	std	Y+1, r24	; 0x01
	if (UartNumber > NumOfUARTChannels) {
      a2:	8a 81       	ldd	r24, Y+2	; 0x02
      a4:	82 30       	cpi	r24, 0x02	; 2
      a6:	18 f0       	brcs	.+6      	; 0xae <UART_Init+0x1c>
		//error uart channel out of range
		ErrRetVal = Unavailable_UART_Channel;
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	89 83       	std	Y+1, r24	; 0x01
      ac:	67 c0       	rjmp	.+206    	; 0x17c <UART_Init+0xea>
	} else {
		/* configure control and status register A
		 * (double transmission speed & Multi-processor communication mode) */
		MODIFY_REG(UART_ControlStatusRegA, UART_DoubleTransmissionSpeed_MSK,
      ae:	ab e2       	ldi	r26, 0x2B	; 43
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	eb e2       	ldi	r30, 0x2B	; 43
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	82 60       	ori	r24, 0x02	; 2
      ba:	8c 93       	st	X, r24
				DoubleSpeedTransmission<<UART_DoubleTransmissionSpeed_BIT);
		MODIFY_REG(UART_ControlStatusRegA,
      bc:	ab e2       	ldi	r26, 0x2B	; 43
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	eb e2       	ldi	r30, 0x2B	; 43
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	8e 7f       	andi	r24, 0xFE	; 254
      c8:	8c 93       	st	X, r24
				UART_MultiProcessorCommunicationMode_MSK,
				MultiProcessCommunicationMode<<UART_MultiProcessorCommunicationMode_BIT);

		/* Setting Uart Data Size */
		MODIFY_REG(UART_ControlStatusRegB, UART_CharacterSizeBit_2_MSK,
      ca:	aa e2       	ldi	r26, 0x2A	; 42
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	ea e2       	ldi	r30, 0x2A	; 42
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8b 7f       	andi	r24, 0xFB	; 251
      d6:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,2)<<UART_CharacterSizeBit_2_BIT);
		SET_BIT(UART_ControlStatusRegC, UART_RegisterSelect_BIT);
      d8:	a0 e4       	ldi	r26, 0x40	; 64
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e0 e4       	ldi	r30, 0x40	; 64
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	8c 93       	st	X, r24
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_1_MSK,
      e6:	a0 e4       	ldi	r26, 0x40	; 64
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e0 e4       	ldi	r30, 0x40	; 64
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,1)<<UART_CharacterSizeBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_0_MSK,
      f4:	a0 e4       	ldi	r26, 0x40	; 64
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e0 e4       	ldi	r30, 0x40	; 64
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	82 60       	ori	r24, 0x02	; 2
     100:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,0)<<UART_CharacterSizeBit_0_BIT);

		/* setting Stop Bit */
		MODIFY_REG(UART_ControlStatusRegC, UART_StopBitSelect_MSK,
     102:	a0 e4       	ldi	r26, 0x40	; 64
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	e0 e4       	ldi	r30, 0x40	; 64
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	87 7f       	andi	r24, 0xF7	; 247
     10e:	8c 93       	st	X, r24
				StopBitMode<<UART_StopBitSelect_BIT);

		/* Setting Parity mode */
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_1_MSK,
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e0 e4       	ldi	r30, 0x40	; 64
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8f 7d       	andi	r24, 0xDF	; 223
     11c:	8c 93       	st	X, r24
				READ_BIT(ParityMode,1)<<UART_ParityModeSelectBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_0_MSK,
     11e:	a0 e4       	ldi	r26, 0x40	; 64
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e0 e4       	ldi	r30, 0x40	; 64
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8f 7e       	andi	r24, 0xEF	; 239
     12a:	8c 93       	st	X, r24
				READ_BIT(ParityMode,0)<<UART_ParityModeSelectBit_0_BIT);
		/* Setting communication mode (synch. or Asynch.)*/
		MODIFY_REG(UART_ControlStatusRegC, UART_SynchAsynchModeSelect_MSK,
     12c:	a0 e4       	ldi	r26, 0x40	; 64
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	e0 e4       	ldi	r30, 0x40	; 64
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8f 7b       	andi	r24, 0xBF	; 191
     138:	8c 93       	st	X, r24
				CommunicationMode<<UART_SynchAsynchModeSelect_BIT);

		/*Set Clock Poalrity*/
		// ignored as all our work is asynchronus communication mode.
		/*Set the value of baud rate register*/
		CLEAR_BIT(UART_BaudRateRegH,UART_RegisterSelect_BIT);
     13a:	a0 e4       	ldi	r26, 0x40	; 64
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	e0 e4       	ldi	r30, 0x40	; 64
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	8f 77       	andi	r24, 0x7F	; 127
     146:	8c 93       	st	X, r24
		MODIFY_REG(UART_BaudRateRegH, UART_BaudRateRegH_MSK, (BaudCalc(BaudRate)>>8)&0x0F);
     148:	a0 e4       	ldi	r26, 0x40	; 64
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e0 e4       	ldi	r30, 0x40	; 64
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	8c 93       	st	X, r24
		WRITE_REG(UART_BaudRateRegL,BaudCalc(BaudRate)&0xFF);
     156:	e9 e2       	ldi	r30, 0x29	; 41
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	87 e6       	ldi	r24, 0x67	; 103
     15c:	80 83       	st	Z, r24

		/* Enabling receiving and transmitting*/
		MODIFY_REG(UART_ControlStatusRegB, UART_ReceiveEnable_MSK,
     15e:	aa e2       	ldi	r26, 0x2A	; 42
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ea e2       	ldi	r30, 0x2A	; 42
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	80 61       	ori	r24, 0x10	; 16
     16a:	8c 93       	st	X, r24
				UART_ReceiveEnable_MSK);
		MODIFY_REG(UART_ControlStatusRegB, UART_TransmissionEnable_MSK,
     16c:	aa e2       	ldi	r26, 0x2A	; 42
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ea e2       	ldi	r30, 0x2A	; 42
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	88 60       	ori	r24, 0x08	; 8
     178:	8c 93       	st	X, r24
				UART_TransmissionEnable_MSK);
		ErrRetVal = OperationSuccess;
     17a:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrRetVal;
     17c:	89 81       	ldd	r24, Y+1	; 0x01
}
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <UART_FlushReceiveBuffer>:
uint8_t UART_FlushReceiveBuffer(void) {
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	00 d0       	rcall	.+0      	; 0x18e <UART_FlushReceiveBuffer+0x6>
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
     192:	8f ef       	ldi	r24, 0xFF	; 255
     194:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flushedCharacter;
	flushedCharacter = UART_DataReg;
     196:	ec e2       	ldi	r30, 0x2C	; 44
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = OperationSuccess;
     19e:	1a 82       	std	Y+2, r1	; 0x02
	return ErrRetVal;
     1a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	cf 91       	pop	r28
     1a8:	df 91       	pop	r29
     1aa:	08 95       	ret

000001ac <UART_TransmitChar>:

uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <UART_TransmitChar+0x6>
     1b2:	0f 92       	push	r0
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	8a 83       	std	Y+2, r24	; 0x02
     1ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     1bc:	8f ef       	ldi	r24, 0xFF	; 255
     1be:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA, 5)) {
     1c0:	eb e2       	ldi	r30, 0x2B	; 43
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	88 2f       	mov	r24, r24
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	80 72       	andi	r24, 0x20	; 32
     1cc:	90 70       	andi	r25, 0x00	; 0
     1ce:	95 95       	asr	r25
     1d0:	87 95       	ror	r24
     1d2:	95 95       	asr	r25
     1d4:	87 95       	ror	r24
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	95 95       	asr	r25
     1dc:	87 95       	ror	r24
     1de:	95 95       	asr	r25
     1e0:	87 95       	ror	r24
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	31 f0       	breq	.+12     	; 0x1f2 <UART_TransmitChar+0x46>
		UART_DataReg= TxChar;
     1e6:	ec e2       	ldi	r30, 0x2C	; 44
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	8b 81       	ldd	r24, Y+3	; 0x03
     1ec:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     1ee:	19 82       	std	Y+1, r1	; 0x01
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <UART_TransmitChar+0x4a>
	}
	else
	{
		ErrRetVal = Transmission_Fail;
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	08 95       	ret

00000204 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	00 d0       	rcall	.+0      	; 0x20a <UART_ReceiveChar+0x6>
     20a:	00 d0       	rcall	.+0      	; 0x20c <UART_ReceiveChar+0x8>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	8a 83       	std	Y+2, r24	; 0x02
     212:	7c 83       	std	Y+4, r23	; 0x04
     214:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     216:	8f ef       	ldi	r24, 0xFF	; 255
     218:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA,7) == 1) {
     21a:	eb e2       	ldi	r30, 0x2B	; 43
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	88 1f       	adc	r24, r24
     222:	88 27       	eor	r24, r24
     224:	88 1f       	adc	r24, r24
     226:	88 2f       	mov	r24, r24
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 70       	andi	r25, 0x00	; 0
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	91 05       	cpc	r25, r1
     230:	41 f4       	brne	.+16     	; 0x242 <UART_ReceiveChar+0x3e>
		*RxChar = UART_DataReg;
     232:	ec e2       	ldi	r30, 0x2C	; 44
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	eb 81       	ldd	r30, Y+3	; 0x03
     23a:	fc 81       	ldd	r31, Y+4	; 0x04
     23c:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     23e:	19 82       	std	Y+1, r1	; 0x01
     240:	02 c0       	rjmp	.+4      	; 0x246 <UART_ReceiveChar+0x42>
	}
	else
	{
		ErrRetVal = Receiving_Fail;
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     246:	89 81       	ldd	r24, Y+1	; 0x01
}
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	08 95       	ret

00000256 <UART_TransmitString>:

uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString)
{
     256:	df 93       	push	r29
     258:	cf 93       	push	r28
     25a:	00 d0       	rcall	.+0      	; 0x25c <UART_TransmitString+0x6>
     25c:	00 d0       	rcall	.+0      	; 0x25e <UART_TransmitString+0x8>
     25e:	0f 92       	push	r0
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	8b 83       	std	Y+3, r24	; 0x03
     266:	7d 83       	std	Y+5, r23	; 0x05
     268:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     26e:	19 82       	std	Y+1, r1	; 0x01
	while(iterator <= 255)
	{
		if(*TxString=='\0')
     270:	ec 81       	ldd	r30, Y+4	; 0x04
     272:	fd 81       	ldd	r31, Y+5	; 0x05
     274:	80 81       	ld	r24, Z
     276:	88 23       	and	r24, r24
     278:	81 f4       	brne	.+32     	; 0x29a <UART_TransmitString+0x44>
		{
			ErrRetVal=OperationSuccess;
     27a:	1a 82       	std	Y+2, r1	; 0x02
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	6d e0       	ldi	r22, 0x0D	; 13
     280:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
     284:	88 23       	and	r24, r24
     286:	d1 f7       	brne	.-12     	; 0x27c <UART_TransmitString+0x26>
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
			iterator++;
			TxString++;
		}
	}
	return ErrRetVal;
     288:	8a 81       	ldd	r24, Y+2	; 0x02
}
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
			break;
		}
		else
		{
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
     29a:	ec 81       	ldd	r30, Y+4	; 0x04
     29c:	fd 81       	ldd	r31, Y+5	; 0x05
     29e:	90 81       	ld	r25, Z
     2a0:	8b 81       	ldd	r24, Y+3	; 0x03
     2a2:	69 2f       	mov	r22, r25
     2a4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
     2a8:	88 23       	and	r24, r24
     2aa:	b9 f7       	brne	.-18     	; 0x29a <UART_TransmitString+0x44>
			iterator++;
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	8f 5f       	subi	r24, 0xFF	; 255
     2b0:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
     2b2:	8c 81       	ldd	r24, Y+4	; 0x04
     2b4:	9d 81       	ldd	r25, Y+5	; 0x05
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	9d 83       	std	Y+5, r25	; 0x05
     2ba:	8c 83       	std	Y+4, r24	; 0x04
     2bc:	d9 cf       	rjmp	.-78     	; 0x270 <UART_TransmitString+0x1a>

000002be <UART_ReceiveString>:
		}
	}
	return ErrRetVal;
}
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <UART_ReceiveString+0x6>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <UART_ReceiveString+0x8>
     2c6:	0f 92       	push	r0
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	8b 83       	std	Y+3, r24	; 0x03
     2ce:	7d 83       	std	Y+5, r23	; 0x05
     2d0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     2d6:	19 82       	std	Y+1, r1	; 0x01
	while(iterator<=255)
	{
		if(UART_ReceiveChar(UartNumber,RxString)==OperationSuccess)
     2d8:	2c 81       	ldd	r18, Y+4	; 0x04
     2da:	3d 81       	ldd	r19, Y+5	; 0x05
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	b9 01       	movw	r22, r18
     2e0:	0e 94 02 01 	call	0x204	; 0x204 <UART_ReceiveChar>
     2e4:	88 23       	and	r24, r24
     2e6:	c1 f7       	brne	.-16     	; 0x2d8 <UART_ReceiveString+0x1a>
		{
			if(*RxString == '\r' || *RxString == '\n')
     2e8:	ec 81       	ldd	r30, Y+4	; 0x04
     2ea:	fd 81       	ldd	r31, Y+5	; 0x05
     2ec:	80 81       	ld	r24, Z
     2ee:	8d 30       	cpi	r24, 0x0D	; 13
     2f0:	29 f0       	breq	.+10     	; 0x2fc <UART_ReceiveString+0x3e>
     2f2:	ec 81       	ldd	r30, Y+4	; 0x04
     2f4:	fd 81       	ldd	r31, Y+5	; 0x05
     2f6:	80 81       	ld	r24, Z
     2f8:	8a 30       	cpi	r24, 0x0A	; 10
     2fa:	69 f4       	brne	.+26     	; 0x316 <UART_ReceiveString+0x58>
			{
				*RxString='\0';
     2fc:	ec 81       	ldd	r30, Y+4	; 0x04
     2fe:	fd 81       	ldd	r31, Y+5	; 0x05
     300:	10 82       	st	Z, r1
				ErrRetVal = OperationSuccess;
     302:	1a 82       	std	Y+2, r1	; 0x02
//		} else {
//			continue;
//		}
//	} while (iterator < 255);
////	*RxString='\0';
	return ErrRetVal;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
}
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	08 95       	ret
				ErrRetVal = OperationSuccess;
				break;
			}
			else
			{
			RxString++;
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	9d 81       	ldd	r25, Y+5	; 0x05
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	9d 83       	std	Y+5, r25	; 0x05
     31e:	8c 83       	std	Y+4, r24	; 0x04
			iterator++;
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	d8 cf       	rjmp	.-80     	; 0x2d8 <UART_ReceiveString+0x1a>

00000328 <UART_EnableInterrupt>:
//	} while (iterator < 255);
////	*RxString='\0';
	return ErrRetVal;
}

uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	00 d0       	rcall	.+0      	; 0x32e <UART_EnableInterrupt+0x6>
     32e:	00 d0       	rcall	.+0      	; 0x330 <UART_EnableInterrupt+0x8>
     330:	0f 92       	push	r0
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	8a 83       	std	Y+2, r24	; 0x02
     338:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
     33e:	af e5       	ldi	r26, 0x5F	; 95
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	ef e5       	ldi	r30, 0x5F	; 95
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	80 68       	ori	r24, 0x80	; 128
     34a:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	88 f5       	brcc	.+98     	; 0x3b4 <UART_EnableInterrupt+0x8c>
	{
		switch (UartInterruptType)
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	3d 83       	std	Y+5, r19	; 0x05
     35a:	2c 83       	std	Y+4, r18	; 0x04
     35c:	8c 81       	ldd	r24, Y+4	; 0x04
     35e:	9d 81       	ldd	r25, Y+5	; 0x05
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	91 05       	cpc	r25, r1
     364:	91 f0       	breq	.+36     	; 0x38a <UART_EnableInterrupt+0x62>
     366:	2c 81       	ldd	r18, Y+4	; 0x04
     368:	3d 81       	ldd	r19, Y+5	; 0x05
     36a:	22 30       	cpi	r18, 0x02	; 2
     36c:	31 05       	cpc	r19, r1
     36e:	b1 f0       	breq	.+44     	; 0x39c <UART_EnableInterrupt+0x74>
     370:	8c 81       	ldd	r24, Y+4	; 0x04
     372:	9d 81       	ldd	r25, Y+5	; 0x05
     374:	00 97       	sbiw	r24, 0x00	; 0
     376:	d9 f4       	brne	.+54     	; 0x3ae <UART_EnableInterrupt+0x86>
		{
		case RxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     378:	aa e2       	ldi	r26, 0x2A	; 42
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	ea e2       	ldi	r30, 0x2A	; 42
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	80 68       	ori	r24, 0x80	; 128
     384:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_MSK,
					UART_ReceiveCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     386:	19 82       	std	Y+1, r1	; 0x01
     388:	17 c0       	rjmp	.+46     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		case DataBufferEmptyInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     38a:	aa e2       	ldi	r26, 0x2A	; 42
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	ea e2       	ldi	r30, 0x2A	; 42
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	80 62       	ori	r24, 0x20	; 32
     396:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_MSK,
					UART_DataRegisterEmptyInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     398:	19 82       	std	Y+1, r1	; 0x01
     39a:	0e c0       	rjmp	.+28     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		case TxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     39c:	aa e2       	ldi	r26, 0x2A	; 42
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	ea e2       	ldi	r30, 0x2A	; 42
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	80 64       	ori	r24, 0x40	; 64
     3a8:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_MSK,
					UART_TransmissionCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     3aa:	19 82       	std	Y+1, r1	; 0x01
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		default:
			ErrRetVal = Interrupt_Enabling_Fail;
     3ae:	89 e0       	ldi	r24, 0x09	; 9
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <UART_EnableInterrupt+0x90>
		}
	}
	else
	{
		ErrRetVal = Interrupt_Enabling_Fail;
     3b4:	89 e0       	ldi	r24, 0x09	; 9
     3b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	08 95       	ret

000003ca <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     3ca:	df 93       	push	r29
     3cc:	cf 93       	push	r28
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <UART_DisableInterrupt+0x6>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <UART_DisableInterrupt+0x8>
     3d2:	0f 92       	push	r0
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	8a 83       	std	Y+2, r24	; 0x02
     3da:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	83 30       	cpi	r24, 0x03	; 3
     3e4:	88 f5       	brcc	.+98     	; 0x448 <UART_DisableInterrupt+0x7e>
		{
			switch (UartInterruptType)
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	3d 83       	std	Y+5, r19	; 0x05
     3ee:	2c 83       	std	Y+4, r18	; 0x04
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	9d 81       	ldd	r25, Y+5	; 0x05
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	91 05       	cpc	r25, r1
     3f8:	91 f0       	breq	.+36     	; 0x41e <UART_DisableInterrupt+0x54>
     3fa:	2c 81       	ldd	r18, Y+4	; 0x04
     3fc:	3d 81       	ldd	r19, Y+5	; 0x05
     3fe:	22 30       	cpi	r18, 0x02	; 2
     400:	31 05       	cpc	r19, r1
     402:	b1 f0       	breq	.+44     	; 0x430 <UART_DisableInterrupt+0x66>
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	9d 81       	ldd	r25, Y+5	; 0x05
     408:	00 97       	sbiw	r24, 0x00	; 0
     40a:	d9 f4       	brne	.+54     	; 0x442 <UART_DisableInterrupt+0x78>
			{
			case RxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     40c:	aa e2       	ldi	r26, 0x2A	; 42
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	ea e2       	ldi	r30, 0x2A	; 42
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	8f 77       	andi	r24, 0x7F	; 127
     418:	8c 93       	st	X, r24
						UART_ReceiveCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     41a:	19 82       	std	Y+1, r1	; 0x01
     41c:	17 c0       	rjmp	.+46     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			case DataBufferEmptyInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     41e:	aa e2       	ldi	r26, 0x2A	; 42
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	ea e2       	ldi	r30, 0x2A	; 42
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	8f 7d       	andi	r24, 0xDF	; 223
     42a:	8c 93       	st	X, r24
						UART_DataRegisterEmptyInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     42c:	19 82       	std	Y+1, r1	; 0x01
     42e:	0e c0       	rjmp	.+28     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			case TxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     430:	aa e2       	ldi	r26, 0x2A	; 42
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	ea e2       	ldi	r30, 0x2A	; 42
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	8f 7b       	andi	r24, 0xBF	; 191
     43c:	8c 93       	st	X, r24
						UART_TransmissionCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     43e:	19 82       	std	Y+1, r1	; 0x01
     440:	05 c0       	rjmp	.+10     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			default:
				ErrRetVal = Interrupt_Disabling_Fail;
     442:	88 e0       	ldi	r24, 0x08	; 8
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	02 c0       	rjmp	.+4      	; 0x44c <UART_DisableInterrupt+0x82>
			}
		}
		else
		{
			ErrRetVal = Interrupt_Disabling_Fail;
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	89 83       	std	Y+1, r24	; 0x01
		}
	return ErrRetVal;
     44c:	89 81       	ldd	r24, Y+1	; 0x01
}
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	cf 91       	pop	r28
     45a:	df 91       	pop	r29
     45c:	08 95       	ret

0000045e <UART_Set_RX_CompleteCallback>:

uint8_t UART_Set_RX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	00 d0       	rcall	.+0      	; 0x464 <UART_Set_RX_CompleteCallback+0x6>
     464:	00 d0       	rcall	.+0      	; 0x466 <UART_Set_RX_CompleteCallback+0x8>
     466:	0f 92       	push	r0
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	8a 83       	std	Y+2, r24	; 0x02
     46e:	6b 83       	std	Y+3, r22	; 0x03
     470:	5d 83       	std	Y+5, r21	; 0x05
     472:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     474:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     476:	8c 81       	ldd	r24, Y+4	; 0x04
     478:	9d 81       	ldd	r25, Y+5	; 0x05
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	31 f0       	breq	.+12     	; 0x48a <UART_Set_RX_CompleteCallback+0x2c>
		UART_RX_Complete_callback = callBack;
     47e:	8c 81       	ldd	r24, Y+4	; 0x04
     480:	9d 81       	ldd	r25, Y+5	; 0x05
     482:	90 93 67 00 	sts	0x0067, r25
     486:	80 93 66 00 	sts	0x0066, r24
	return ErrRetVal;
     48a:	89 81       	ldd	r24, Y+1	; 0x01
}
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	cf 91       	pop	r28
     498:	df 91       	pop	r29
     49a:	08 95       	ret

0000049c <UART_UDRE_Empty_CompleteCallback>:
uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <UART_UDRE_Empty_CompleteCallback+0x6>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <UART_UDRE_Empty_CompleteCallback+0x8>
     4a4:	0f 92       	push	r0
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	8a 83       	std	Y+2, r24	; 0x02
     4ac:	6b 83       	std	Y+3, r22	; 0x03
     4ae:	5d 83       	std	Y+5, r21	; 0x05
     4b0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4b2:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4b4:	8c 81       	ldd	r24, Y+4	; 0x04
     4b6:	9d 81       	ldd	r25, Y+5	; 0x05
     4b8:	00 97       	sbiw	r24, 0x00	; 0
     4ba:	31 f0       	breq	.+12     	; 0x4c8 <UART_UDRE_Empty_CompleteCallback+0x2c>
		UART_UDRE_Empty_callback = callBack;
     4bc:	8c 81       	ldd	r24, Y+4	; 0x04
     4be:	9d 81       	ldd	r25, Y+5	; 0x05
     4c0:	90 93 69 00 	sts	0x0069, r25
     4c4:	80 93 68 00 	sts	0x0068, r24
	return ErrRetVal;
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	08 95       	ret

000004da <UART_Set_TX_CompleteCallback>:
uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     4da:	df 93       	push	r29
     4dc:	cf 93       	push	r28
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <UART_Set_TX_CompleteCallback+0x6>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <UART_Set_TX_CompleteCallback+0x8>
     4e2:	0f 92       	push	r0
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	8a 83       	std	Y+2, r24	; 0x02
     4ea:	6b 83       	std	Y+3, r22	; 0x03
     4ec:	5d 83       	std	Y+5, r21	; 0x05
     4ee:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4f0:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4f2:	8c 81       	ldd	r24, Y+4	; 0x04
     4f4:	9d 81       	ldd	r25, Y+5	; 0x05
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	31 f0       	breq	.+12     	; 0x506 <UART_Set_TX_CompleteCallback+0x2c>
		UART_TX_Complete_callback = callBack;
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	9d 81       	ldd	r25, Y+5	; 0x05
     4fe:	90 93 6b 00 	sts	0x006B, r25
     502:	80 93 6a 00 	sts	0x006A, r24
	return ErrRetVal;
     506:	89 81       	ldd	r24, Y+1	; 0x01
}
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <__vector_13>:

void __vector_13(void)
{
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Complete_callback != NULL)
     542:	80 91 66 00 	lds	r24, 0x0066
     546:	90 91 67 00 	lds	r25, 0x0067
     54a:	00 97       	sbiw	r24, 0x00	; 0
     54c:	29 f0       	breq	.+10     	; 0x558 <__vector_13+0x40>
		UART_RX_Complete_callback();
     54e:	e0 91 66 00 	lds	r30, 0x0066
     552:	f0 91 67 00 	lds	r31, 0x0067
     556:	09 95       	icall
}
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <__vector_14>:
void __vector_14(void)
{
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
	if (UART_UDRE_Empty_callback != NULL)
     5a8:	80 91 68 00 	lds	r24, 0x0068
     5ac:	90 91 69 00 	lds	r25, 0x0069
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	29 f0       	breq	.+10     	; 0x5be <__vector_14+0x40>
		UART_UDRE_Empty_callback();
     5b4:	e0 91 68 00 	lds	r30, 0x0068
     5b8:	f0 91 69 00 	lds	r31, 0x0069
     5bc:	09 95       	icall
}
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	0f 90       	pop	r0
     5e0:	1f 90       	pop	r1
     5e2:	18 95       	reti

000005e4 <__vector_15>:
void __vector_15(void)
{
     5e4:	1f 92       	push	r1
     5e6:	0f 92       	push	r0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
     5ee:	2f 93       	push	r18
     5f0:	3f 93       	push	r19
     5f2:	4f 93       	push	r20
     5f4:	5f 93       	push	r21
     5f6:	6f 93       	push	r22
     5f8:	7f 93       	push	r23
     5fa:	8f 93       	push	r24
     5fc:	9f 93       	push	r25
     5fe:	af 93       	push	r26
     600:	bf 93       	push	r27
     602:	ef 93       	push	r30
     604:	ff 93       	push	r31
     606:	df 93       	push	r29
     608:	cf 93       	push	r28
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Complete_callback != NULL)
     60e:	80 91 6a 00 	lds	r24, 0x006A
     612:	90 91 6b 00 	lds	r25, 0x006B
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	29 f0       	breq	.+10     	; 0x624 <__vector_15+0x40>
		UART_TX_Complete_callback();
     61a:	e0 91 6a 00 	lds	r30, 0x006A
     61e:	f0 91 6b 00 	lds	r31, 0x006B
     622:	09 95       	icall
}
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	0f be       	out	0x3f, r0	; 63
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <TWI_Init>:
/*static functions*/
static void TWI_SetClk(void);


uint8_t TWI_Init(uint8_t TWI_channel)
{
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <TWI_Init+0x6>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	89 83       	std	Y+1, r24	; 0x01

	/*setting control register to default value*/
	WRITE_REG(TWI_ControlRegister, ResgisterDefaultVal);
     65a:	e6 e5       	ldi	r30, 0x56	; 86
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	10 82       	st	Z, r1

	/*Set TWI CLK (SCL)*/
	TWI_SetClk();
     660:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <TWI_SetClk>

	/*Set the Device Address*/
	TWI_AddressRegister = (deviceAddress<<1);
     664:	e2 e2       	ldi	r30, 0x22	; 34
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	8c ea       	ldi	r24, 0xAC	; 172
     66a:	80 83       	st	Z, r24

	/*Enable or Disable general call*/
	if(GeneralCallRecognition==Enabled)
	{
		SET_BIT(TWI_AddressRegister,TWI_GeneralCallRecognitionEnable_BIT);
     66c:	a2 e2       	ldi	r26, 0x22	; 34
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	e2 e2       	ldi	r30, 0x22	; 34
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	81 60       	ori	r24, 0x01	; 1
     678:	8c 93       	st	X, r24
	{
		CLEAR_BIT(TWI_AddressRegister,TWI_GeneralCallRecognitionEnable_BIT);
	}

	/*clear the interrupt flag*/
	SET_BIT(TWI_ControlRegister,TWI_InterruptFlag_BIT);
     67a:	a6 e5       	ldi	r26, 0x56	; 86
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	e6 e5       	ldi	r30, 0x56	; 86
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	80 68       	ori	r24, 0x80	; 128
     686:	8c 93       	st	X, r24

	/*Enable TWI_Module*/
	SET_BIT(TWI_ControlRegister,TWI_ModuleEnable_BIT);
     688:	a6 e5       	ldi	r26, 0x56	; 86
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	e6 e5       	ldi	r30, 0x56	; 86
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	84 60       	ori	r24, 0x04	; 4
     694:	8c 93       	st	X, r24

	return ErrRetVal;
     696:	89 81       	ldd	r24, Y+1	; 0x01
}
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	cf 91       	pop	r28
     69e:	df 91       	pop	r29
     6a0:	08 95       	ret

000006a2 <TWI_ReadDataWithACK>:

uint8_t TWI_ReadDataWithACK(uint8_t TWI_channel, ptr_uint8_t Data)
{
     6a2:	df 93       	push	r29
     6a4:	cf 93       	push	r28
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <TWI_ReadDataWithACK+0x6>
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <TWI_ReadDataWithACK+0x8>
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <TWI_ReadDataWithACK+0xa>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	8a 83       	std	Y+2, r24	; 0x02
     6b2:	7c 83       	std	Y+4, r23	; 0x04
     6b4:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch(State)
     6ba:	80 91 60 00 	lds	r24, 0x0060
     6be:	28 2f       	mov	r18, r24
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	3e 83       	std	Y+6, r19	; 0x06
     6c4:	2d 83       	std	Y+5, r18	; 0x05
     6c6:	8d 81       	ldd	r24, Y+5	; 0x05
     6c8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	91 05       	cpc	r25, r1
     6ce:	c1 f0       	breq	.+48     	; 0x700 <TWI_ReadDataWithACK+0x5e>
     6d0:	2d 81       	ldd	r18, Y+5	; 0x05
     6d2:	3e 81       	ldd	r19, Y+6	; 0x06
     6d4:	2f 3f       	cpi	r18, 0xFF	; 255
     6d6:	31 05       	cpc	r19, r1
     6d8:	19 f5       	brne	.+70     	; 0x720 <TWI_ReadDataWithACK+0x7e>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &=0x07;
     6da:	a6 e5       	ldi	r26, 0x56	; 86
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	e6 e5       	ldi	r30, 0x56	; 86
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	87 70       	andi	r24, 0x07	; 7
     6e6:	8c 93       	st	X, r24

		/*Set enable_acknowledgement bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
     6e8:	a6 e5       	ldi	r26, 0x56	; 86
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	e6 e5       	ldi	r30, 0x56	; 86
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	80 6c       	ori	r24, 0xC0	; 192
     6f6:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_EnableAcknowledge_MSK|TWI_InterruptFlag_MSK);

		/*changing the function state*/
		State = FlagLowForReadDataWithACK;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 60 00 	sts	0x0060, r24
     6fe:	12 c0       	rjmp	.+36     	; 0x724 <TWI_ReadDataWithACK+0x82>
		break;
	/*Function's Ending State*/
	case FlagLowForReadDataWithACK:
		/*Checking if TWI-interrupt Flag is raised for Data Reading event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
     700:	e6 e5       	ldi	r30, 0x56	; 86
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	88 23       	and	r24, r24
     708:	6c f4       	brge	.+26     	; 0x724 <TWI_ReadDataWithACK+0x82>
		{
			/*Submit DATA received to the argument used for data return*/
			*Data=TWI_DataRegister;
     70a:	e3 e2       	ldi	r30, 0x23	; 35
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	eb 81       	ldd	r30, Y+3	; 0x03
     712:	fc 81       	ldd	r31, Y+4	; 0x04
     714:	80 83       	st	Z, r24

			/*reseting the Functions State*/
			State=OperationStarted;
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	80 93 60 00 	sts	0x0060, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	02 c0       	rjmp	.+4      	; 0x724 <TWI_ReadDataWithACK+0x82>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     724:	89 81       	ldd	r24, Y+1	; 0x01
}
     726:	26 96       	adiw	r28, 0x06	; 6
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	08 95       	ret

00000738 <TWI_ReadDataWithNACK>:

uint8_t TWI_ReadDataWithNACK(uint8_t TWI_channel, ptr_uint8_t Data)
{
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	00 d0       	rcall	.+0      	; 0x73e <TWI_ReadDataWithNACK+0x6>
     73e:	00 d0       	rcall	.+0      	; 0x740 <TWI_ReadDataWithNACK+0x8>
     740:	00 d0       	rcall	.+0      	; 0x742 <TWI_ReadDataWithNACK+0xa>
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	8a 83       	std	Y+2, r24	; 0x02
     748:	7c 83       	std	Y+4, r23	; 0x04
     74a:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch(State)
     750:	80 91 61 00 	lds	r24, 0x0061
     754:	28 2f       	mov	r18, r24
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	2d 83       	std	Y+5, r18	; 0x05
     75c:	8d 81       	ldd	r24, Y+5	; 0x05
     75e:	9e 81       	ldd	r25, Y+6	; 0x06
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	91 05       	cpc	r25, r1
     764:	b9 f0       	breq	.+46     	; 0x794 <TWI_ReadDataWithNACK+0x5c>
     766:	2d 81       	ldd	r18, Y+5	; 0x05
     768:	3e 81       	ldd	r19, Y+6	; 0x06
     76a:	2f 3f       	cpi	r18, 0xFF	; 255
     76c:	31 05       	cpc	r19, r1
     76e:	11 f5       	brne	.+68     	; 0x7b4 <TWI_ReadDataWithNACK+0x7c>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &=0x07;
     770:	a6 e5       	ldi	r26, 0x56	; 86
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	e6 e5       	ldi	r30, 0x56	; 86
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	87 70       	andi	r24, 0x07	; 7
     77c:	8c 93       	st	X, r24

		/*Clear interrupt flag manually*/
		SET_BIT(TWI_ControlRegister, TWI_InterruptFlag_BIT);
     77e:	a6 e5       	ldi	r26, 0x56	; 86
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	e6 e5       	ldi	r30, 0x56	; 86
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	80 68       	ori	r24, 0x80	; 128
     78a:	8c 93       	st	X, r24

		/*changing the function state*/
		State = FlagLowForReadDataWithNACK;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 61 00 	sts	0x0061, r24
     792:	12 c0       	rjmp	.+36     	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		break;
	/*Function's Ending State*/
	case FlagLowForReadDataWithNACK:
		/*Checking if TWI-interrupt Flag is raised for Data Reading event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
     794:	e6 e5       	ldi	r30, 0x56	; 86
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	88 23       	and	r24, r24
     79c:	6c f4       	brge	.+26     	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		{
			/*Submit DATA received to the argument used for data return*/
			*Data=TWI_DataRegister;
     79e:	e3 e2       	ldi	r30, 0x23	; 35
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	eb 81       	ldd	r30, Y+3	; 0x03
     7a6:	fc 81       	ldd	r31, Y+4	; 0x04
     7a8:	80 83       	st	Z, r24

			/*reseting the Functions State*/
			State=OperationStarted;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	80 93 61 00 	sts	0x0061, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
     7b0:	19 82       	std	Y+1, r1	; 0x01
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ba:	26 96       	adiw	r28, 0x06	; 6
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <TWI_WriteData>:

uint8_t TWI_WriteData(uint8_t TWI_channel, uint8_t Data)
{
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <TWI_WriteData+0x6>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <TWI_WriteData+0x8>
     7d4:	0f 92       	push	r0
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State)
     7e2:	80 91 62 00 	lds	r24, 0x0062
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	3d 83       	std	Y+5, r19	; 0x05
     7ec:	2c 83       	std	Y+4, r18	; 0x04
     7ee:	8c 81       	ldd	r24, Y+4	; 0x04
     7f0:	9d 81       	ldd	r25, Y+5	; 0x05
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	91 05       	cpc	r25, r1
     7f6:	d9 f0       	breq	.+54     	; 0x82e <TWI_WriteData+0x62>
     7f8:	2c 81       	ldd	r18, Y+4	; 0x04
     7fa:	3d 81       	ldd	r19, Y+5	; 0x05
     7fc:	2f 3f       	cpi	r18, 0xFF	; 255
     7fe:	31 05       	cpc	r19, r1
     800:	01 f5       	brne	.+64     	; 0x842 <TWI_WriteData+0x76>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &= 0x07;
     802:	a6 e5       	ldi	r26, 0x56	; 86
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	e6 e5       	ldi	r30, 0x56	; 86
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	87 70       	andi	r24, 0x07	; 7
     80e:	8c 93       	st	X, r24

		/*set the data register*/
		TWI_DataRegister = Data;
     810:	e3 e2       	ldi	r30, 0x23	; 35
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	8b 81       	ldd	r24, Y+3	; 0x03
     816:	80 83       	st	Z, r24

		/*Clear interrupt flag manually*/
		SET_BIT(TWI_ControlRegister, TWI_InterruptFlag_BIT);
     818:	a6 e5       	ldi	r26, 0x56	; 86
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e6 e5       	ldi	r30, 0x56	; 86
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	80 68       	ori	r24, 0x80	; 128
     824:	8c 93       	st	X, r24

		/*changing the function state*/
		State = FlagLowForWritingDataRegister;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 62 00 	sts	0x0062, r24
     82c:	0c c0       	rjmp	.+24     	; 0x846 <TWI_WriteData+0x7a>
		break;
	/*Function's Ending State*/
	case FlagLowForWritingDataRegister:
		/*Checking if TWI-interrupt Flag is raised for Data Writing event*/
		if ((TWI_ControlRegister & TWI_InterruptFlag_MSK)) {
     82e:	e6 e5       	ldi	r30, 0x56	; 86
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	88 23       	and	r24, r24
     836:	3c f4       	brge	.+14     	; 0x846 <TWI_WriteData+0x7a>
			/*reseting the Functions State*/
			State = OperationStarted;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	80 93 62 00 	sts	0x0062, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal = OperationSuccess;
     83e:	19 82       	std	Y+1, r1	; 0x01
     840:	02 c0       	rjmp	.+4      	; 0x846 <TWI_WriteData+0x7a>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal = OperationFail;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     846:	89 81       	ldd	r24, Y+1	; 0x01
}
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	cf 91       	pop	r28
     854:	df 91       	pop	r29
     856:	08 95       	ret

00000858 <TWI_SendStartCondition>:

uint8_t TWI_SendStartCondition(uint8_t TWI_channel)
{
     858:	df 93       	push	r29
     85a:	cf 93       	push	r28
     85c:	00 d0       	rcall	.+0      	; 0x85e <TWI_SendStartCondition+0x6>
     85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State)
     86a:	80 91 63 00 	lds	r24, 0x0063
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	3c 83       	std	Y+4, r19	; 0x04
     874:	2b 83       	std	Y+3, r18	; 0x03
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	91 05       	cpc	r25, r1
     87e:	a9 f0       	breq	.+42     	; 0x8aa <__stack+0x4b>
     880:	2b 81       	ldd	r18, Y+3	; 0x03
     882:	3c 81       	ldd	r19, Y+4	; 0x04
     884:	2f 3f       	cpi	r18, 0xFF	; 255
     886:	31 05       	cpc	r19, r1
     888:	d1 f4       	brne	.+52     	; 0x8be <__stack+0x5f>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*Clearing bits of control register except TWI_Enable and TWI_Interrupt Bits*/
		TWI_ControlRegister=0x07;
     88a:	e6 e5       	ldi	r30, 0x56	; 86
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	87 e0       	ldi	r24, 0x07	; 7
     890:	80 83       	st	Z, r24

		/*Set start_condition bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
     892:	a6 e5       	ldi	r26, 0x56	; 86
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	e6 e5       	ldi	r30, 0x56	; 86
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	80 6a       	ori	r24, 0xA0	; 160
     8a0:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_StartCondition_MSK|TWI_InterruptFlag_MSK);

		/*changing the function state*/
		State = StartConditionFiredInterruptFlagLow;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 63 00 	sts	0x0063, r24
     8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <__stack+0x63>
		break;
	/*Function's Ending State*/
	case StartConditionFiredInterruptFlagLow:
		/*Checking if TWI-interrupt Flag is raised for Starting event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
     8aa:	e6 e5       	ldi	r30, 0x56	; 86
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	88 23       	and	r24, r24
     8b2:	3c f4       	brge	.+14     	; 0x8c2 <__stack+0x63>
		{
			/*reseting the Functions State*/
			State=OperationStarted;
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	80 93 63 00 	sts	0x0063, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
     8ba:	19 82       	std	Y+1, r1	; 0x01
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	cf 91       	pop	r28
     8ce:	df 91       	pop	r29
     8d0:	08 95       	ret

000008d2 <TWI_SendStopCondition>:

uint8_t TWI_SendStopCondition(uint8_t TWI_channel)
{
     8d2:	df 93       	push	r29
     8d4:	cf 93       	push	r28
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <TWI_SendStopCondition+0x6>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <TWI_SendStopCondition+0x8>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State) {
     8e4:	80 91 64 00 	lds	r24, 0x0064
     8e8:	28 2f       	mov	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	3c 83       	std	Y+4, r19	; 0x04
     8ee:	2b 83       	std	Y+3, r18	; 0x03
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	9c 81       	ldd	r25, Y+4	; 0x04
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	91 05       	cpc	r25, r1
     8f8:	a9 f0       	breq	.+42     	; 0x924 <TWI_SendStopCondition+0x52>
     8fa:	2b 81       	ldd	r18, Y+3	; 0x03
     8fc:	3c 81       	ldd	r19, Y+4	; 0x04
     8fe:	2f 3f       	cpi	r18, 0xFF	; 255
     900:	31 05       	cpc	r19, r1
     902:	f1 f4       	brne	.+60     	; 0x940 <TWI_SendStopCondition+0x6e>
	/*Function's Starting State*/
	case OperationStarted:
		/*Clearing bits of control register except TWI_Enable and TWI_Interrupt Bits*/
		TWI_ControlRegister = 0x07;
     904:	e6 e5       	ldi	r30, 0x56	; 86
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	87 e0       	ldi	r24, 0x07	; 7
     90a:	80 83       	st	Z, r24

		/*Setting The stop_condition bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
     90c:	a6 e5       	ldi	r26, 0x56	; 86
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	e6 e5       	ldi	r30, 0x56	; 86
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	8f 70       	andi	r24, 0x0F	; 15
     918:	80 69       	ori	r24, 0x90	; 144
     91a:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_StopCondition_MSK|TWI_InterruptFlag_MSK);

		/*Changing the State of the Function*/
		State=StopConditionFired;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 64 00 	sts	0x0064, r24
     922:	10 c0       	rjmp	.+32     	; 0x944 <TWI_SendStopCondition+0x72>
		break;
	/*Function's Ending State*/
	case StopConditionFired:
		/*checking if the Stop-condition Bit is reseted to zero or not*/
		if (!(TWI_ControlRegister & TWI_StopCondition_MSK)) {
     924:	e6 e5       	ldi	r30, 0x56	; 86
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	80 71       	andi	r24, 0x10	; 16
     930:	90 70       	andi	r25, 0x00	; 0
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	39 f4       	brne	.+14     	; 0x944 <TWI_SendStopCondition+0x72>
			/*reseting the Functions State*/
			State = OperationStarted;
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	80 93 64 00 	sts	0x0064, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal = OperationSuccess;
     93c:	19 82       	std	Y+1, r1	; 0x01
     93e:	02 c0       	rjmp	.+4      	; 0x944 <TWI_SendStopCondition+0x72>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal = OperationFail;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     944:	89 81       	ldd	r24, Y+1	; 0x01
}
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	08 95       	ret

00000954 <TWI_GetStatus>:

uint8_t TWI_GetStatus()
{
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	0f 92       	push	r0
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
	uint8_t statusRegVal=0;
     95e:	19 82       	std	Y+1, r1	; 0x01
	statusRegVal = TWI_StatusRegister & TWI_Status_MSK;
     960:	e1 e2       	ldi	r30, 0x21	; 33
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	88 7f       	andi	r24, 0xF8	; 248
     968:	89 83       	std	Y+1, r24	; 0x01
	return	statusRegVal;
     96a:	89 81       	ldd	r24, Y+1	; 0x01
}
     96c:	0f 90       	pop	r0
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	08 95       	ret

00000974 <TWI_EnableACK>:

void TWI_EnableACK()
{
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
	TWI_ControlRegister &=0x07;
     97c:	a6 e5       	ldi	r26, 0x56	; 86
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e6 e5       	ldi	r30, 0x56	; 86
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	87 70       	andi	r24, 0x07	; 7
     988:	8c 93       	st	X, r24

	/*Set enable_acknowledgement bit and Clearing the interrupt flag*/
	MODIFY_REG(TWI_ControlRegister,
     98a:	a6 e5       	ldi	r26, 0x56	; 86
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	e6 e5       	ldi	r30, 0x56	; 86
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	8f 70       	andi	r24, 0x0F	; 15
     996:	80 6c       	ori	r24, 0xC0	; 192
     998:	8c 93       	st	X, r24
			TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
			TWI_EnableAcknowledge_MSK|TWI_InterruptFlag_MSK);
}
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	08 95       	ret

000009a0 <TWI_SetClk>:

static void TWI_SetClk(void)
{
     9a0:	df 93       	push	r29
     9a2:	cf 93       	push	r28
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <TWI_SetClk+0x6>
     9a6:	0f 92       	push	r0
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
     9ac:	19 82       	std	Y+1, r1	; 0x01
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	8a 83       	std	Y+2, r24	; 0x02
     9b2:	46 c0       	rjmp	.+140    	; 0xa40 <TWI_SetClk+0xa0>
	{
		for(TWBR=1; TWBR<=255; TWBR++)
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	8b 83       	std	Y+3, r24	; 0x03
		{
			if((TWBR*Prescalar)==ClockRatio)
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	ac 01       	movw	r20, r24
     9c6:	24 9f       	mul	r18, r20
     9c8:	c0 01       	movw	r24, r0
     9ca:	25 9f       	mul	r18, r21
     9cc:	90 0d       	add	r25, r0
     9ce:	34 9f       	mul	r19, r20
     9d0:	90 0d       	add	r25, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	80 32       	cpi	r24, 0x20	; 32
     9d6:	91 05       	cpc	r25, r1
     9d8:	31 f4       	brne	.+12     	; 0x9e6 <TWI_SetClk+0x46>
			{
				Flag=1;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				continue;
			}
		}
		if(Flag==1)
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	29 f0       	breq	.+10     	; 0x9ee <TWI_SetClk+0x4e>
     9e4:	15 c0       	rjmp	.+42     	; 0xa10 <TWI_SetClk+0x70>
{
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
	{
		for(TWBR=1; TWBR<=255; TWBR++)
     9e6:	8b 81       	ldd	r24, Y+3	; 0x03
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	8b 83       	std	Y+3, r24	; 0x03
     9ec:	e5 cf       	rjmp	.-54     	; 0x9b8 <TWI_SetClk+0x18>
				continue;
			}
		}
		if(Flag==1)
		{
			TWI_BaudRateRegister=TWBR;
     9ee:	e0 e2       	ldi	r30, 0x20	; 32
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	80 83       	st	Z, r24
			MODIFY_REG(TWI_StatusRegister,TWI_Prescalar_MSK,Prescalar/4);
     9f6:	a1 e2       	ldi	r26, 0x21	; 33
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	e1 e2       	ldi	r30, 0x21	; 33
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	98 2f       	mov	r25, r24
     a02:	9c 7f       	andi	r25, 0xFC	; 252
     a04:	8a 81       	ldd	r24, Y+2	; 0x02
     a06:	86 95       	lsr	r24
     a08:	86 95       	lsr	r24
     a0a:	89 2b       	or	r24, r25
     a0c:	8c 93       	st	X, r24
     a0e:	1c c0       	rjmp	.+56     	; 0xa48 <TWI_SetClk+0xa8>
			break;
		}
		else if(TWBR==255 && Prescalar==64)
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	69 f4       	brne	.+26     	; 0xa30 <TWI_SetClk+0x90>
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	51 f4       	brne	.+20     	; 0xa30 <TWI_SetClk+0x90>
		{
			//required SCL isn't available.
			TWI_BaudRateRegister=0;
     a1c:	e0 e2       	ldi	r30, 0x20	; 32
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	10 82       	st	Z, r1
			MODIFY_REG(TWI_StatusRegister,TWI_Prescalar_MSK,0);
     a22:	a1 e2       	ldi	r26, 0x21	; 33
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e1 e2       	ldi	r30, 0x21	; 33
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	8c 7f       	andi	r24, 0xFC	; 252
     a2e:	8c 93       	st	X, r24

static void TWI_SetClk(void)
{
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	88 2f       	mov	r24, r24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	8a 83       	std	Y+2, r24	; 0x02
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	81 34       	cpi	r24, 0x41	; 65
     a44:	08 f4       	brcc	.+2      	; 0xa48 <TWI_SetClk+0xa8>
     a46:	b6 cf       	rjmp	.-148    	; 0x9b4 <TWI_SetClk+0x14>
		else
		{
			continue;
		}
	}
}
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	cf 91       	pop	r28
     a50:	df 91       	pop	r29
     a52:	08 95       	ret

00000a54 <DIO_PortInit>:
#include "../DIO/DIO_DRIVER_TypeDef.h"
#include "../DIO/DIO_DRIVER.h"
#include "../DIO/DIO_DRIVER_Priv.h"

DIO_ERROR_RETVAL_t DIO_PortInit(DIO_PORT_ID_t DIO_port,
		DIO_DIRECTION_t DIO_direction) {
     a54:	df 93       	push	r29
     a56:	cf 93       	push	r28
     a58:	00 d0       	rcall	.+0      	; 0xa5a <DIO_PortInit+0x6>
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <DIO_PortInit+0x8>
     a5c:	0f 92       	push	r0
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	8a 83       	std	Y+2, r24	; 0x02
     a64:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     a66:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD)
     a68:	8a 81       	ldd	r24, Y+2	; 0x02
     a6a:	85 30       	cpi	r24, 0x05	; 5
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <DIO_PortInit+0x1c>
     a6e:	3d c0       	rjmp	.+122    	; 0xaea <DIO_PortInit+0x96>
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	88 23       	and	r24, r24
     a74:	19 f0       	breq	.+6      	; 0xa7c <DIO_PortInit+0x28>
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	b9 f5       	brne	.+110    	; 0xaea <DIO_PortInit+0x96>
			&& (DIO_direction == PORT_INPUT || DIO_direction == PORT_OUTPUT)) {
		switch (DIO_port) {
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	3d 83       	std	Y+5, r19	; 0x05
     a84:	2c 83       	std	Y+4, r18	; 0x04
     a86:	8c 81       	ldd	r24, Y+4	; 0x04
     a88:	9d 81       	ldd	r25, Y+5	; 0x05
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	91 05       	cpc	r25, r1
     a8e:	d9 f0       	breq	.+54     	; 0xac6 <DIO_PortInit+0x72>
     a90:	2c 81       	ldd	r18, Y+4	; 0x04
     a92:	3d 81       	ldd	r19, Y+5	; 0x05
     a94:	23 30       	cpi	r18, 0x03	; 3
     a96:	31 05       	cpc	r19, r1
     a98:	34 f4       	brge	.+12     	; 0xaa6 <DIO_PortInit+0x52>
     a9a:	8c 81       	ldd	r24, Y+4	; 0x04
     a9c:	9d 81       	ldd	r25, Y+5	; 0x05
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	91 05       	cpc	r25, r1
     aa2:	61 f0       	breq	.+24     	; 0xabc <DIO_PortInit+0x68>
     aa4:	1f c0       	rjmp	.+62     	; 0xae4 <DIO_PortInit+0x90>
     aa6:	2c 81       	ldd	r18, Y+4	; 0x04
     aa8:	3d 81       	ldd	r19, Y+5	; 0x05
     aaa:	23 30       	cpi	r18, 0x03	; 3
     aac:	31 05       	cpc	r19, r1
     aae:	81 f0       	breq	.+32     	; 0xad0 <DIO_PortInit+0x7c>
     ab0:	8c 81       	ldd	r24, Y+4	; 0x04
     ab2:	9d 81       	ldd	r25, Y+5	; 0x05
     ab4:	84 30       	cpi	r24, 0x04	; 4
     ab6:	91 05       	cpc	r25, r1
     ab8:	81 f0       	breq	.+32     	; 0xada <DIO_PortInit+0x86>
     aba:	14 c0       	rjmp	.+40     	; 0xae4 <DIO_PortInit+0x90>
		case PORTA:
			WRITE_REG(DDRA_Register, DIO_direction);
     abc:	ea e3       	ldi	r30, 0x3A	; 58
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	80 83       	st	Z, r24
     ac4:	14 c0       	rjmp	.+40     	; 0xaee <DIO_PortInit+0x9a>
			break;
		case PORTB:
			WRITE_REG(DDRB_Register, DIO_direction);
     ac6:	e7 e3       	ldi	r30, 0x37	; 55
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	80 83       	st	Z, r24
     ace:	0f c0       	rjmp	.+30     	; 0xaee <DIO_PortInit+0x9a>
			break;
		case PORTC:
			WRITE_REG(DDRC_Register, DIO_direction);
     ad0:	e4 e3       	ldi	r30, 0x34	; 52
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	80 83       	st	Z, r24
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <DIO_PortInit+0x9a>
			break;
		case PORTD:
			WRITE_REG(DDRD_Register, DIO_direction);
     ada:	e1 e3       	ldi	r30, 0x31	; 49
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	80 83       	st	Z, r24
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <DIO_PortInit+0x9a>
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <DIO_PortInit+0x9a>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     aee:	89 81       	ldd	r24, Y+1	; 0x01
}
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	08 95       	ret

00000b00 <DIO_SetPortVal>:
DIO_ERROR_RETVAL_t DIO_SetPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     b00:	df 93       	push	r29
     b02:	cf 93       	push	r28
     b04:	00 d0       	rcall	.+0      	; 0xb06 <DIO_SetPortVal+0x6>
     b06:	00 d0       	rcall	.+0      	; 0xb08 <DIO_SetPortVal+0x8>
     b08:	0f 92       	push	r0
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	8a 83       	std	Y+2, r24	; 0x02
     b10:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     b12:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     b14:	8a 81       	ldd	r24, Y+2	; 0x02
     b16:	85 30       	cpi	r24, 0x05	; 5
     b18:	08 f0       	brcs	.+2      	; 0xb1c <DIO_SetPortVal+0x1c>
     b1a:	57 c0       	rjmp	.+174    	; 0xbca <DIO_SetPortVal+0xca>
		switch (DIO_port) {
     b1c:	8a 81       	ldd	r24, Y+2	; 0x02
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	3d 83       	std	Y+5, r19	; 0x05
     b24:	2c 83       	std	Y+4, r18	; 0x04
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	9d 81       	ldd	r25, Y+5	; 0x05
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	91 05       	cpc	r25, r1
     b2e:	19 f1       	breq	.+70     	; 0xb76 <DIO_SetPortVal+0x76>
     b30:	2c 81       	ldd	r18, Y+4	; 0x04
     b32:	3d 81       	ldd	r19, Y+5	; 0x05
     b34:	23 30       	cpi	r18, 0x03	; 3
     b36:	31 05       	cpc	r19, r1
     b38:	34 f4       	brge	.+12     	; 0xb46 <DIO_SetPortVal+0x46>
     b3a:	8c 81       	ldd	r24, Y+4	; 0x04
     b3c:	9d 81       	ldd	r25, Y+5	; 0x05
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	91 05       	cpc	r25, r1
     b42:	61 f0       	breq	.+24     	; 0xb5c <DIO_SetPortVal+0x5c>
     b44:	3f c0       	rjmp	.+126    	; 0xbc4 <DIO_SetPortVal+0xc4>
     b46:	2c 81       	ldd	r18, Y+4	; 0x04
     b48:	3d 81       	ldd	r19, Y+5	; 0x05
     b4a:	23 30       	cpi	r18, 0x03	; 3
     b4c:	31 05       	cpc	r19, r1
     b4e:	01 f1       	breq	.+64     	; 0xb90 <DIO_SetPortVal+0x90>
     b50:	8c 81       	ldd	r24, Y+4	; 0x04
     b52:	9d 81       	ldd	r25, Y+5	; 0x05
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	91 05       	cpc	r25, r1
     b58:	41 f1       	breq	.+80     	; 0xbaa <DIO_SetPortVal+0xaa>
     b5a:	34 c0       	rjmp	.+104    	; 0xbc4 <DIO_SetPortVal+0xc4>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, value);
     b5c:	ab e3       	ldi	r26, 0x3B	; 59
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	eb e3       	ldi	r30, 0x3B	; 59
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	98 2f       	mov	r25, r24
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	80 95       	com	r24
     b6c:	98 23       	and	r25, r24
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	89 2b       	or	r24, r25
     b72:	8c 93       	st	X, r24
     b74:	2c c0       	rjmp	.+88     	; 0xbce <DIO_SetPortVal+0xce>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, value);
     b76:	a8 e3       	ldi	r26, 0x38	; 56
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e8 e3       	ldi	r30, 0x38	; 56
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	98 2f       	mov	r25, r24
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	80 95       	com	r24
     b86:	98 23       	and	r25, r24
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	89 2b       	or	r24, r25
     b8c:	8c 93       	st	X, r24
     b8e:	1f c0       	rjmp	.+62     	; 0xbce <DIO_SetPortVal+0xce>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, value);
     b90:	a5 e3       	ldi	r26, 0x35	; 53
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e5 e3       	ldi	r30, 0x35	; 53
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	98 2f       	mov	r25, r24
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	80 95       	com	r24
     ba0:	98 23       	and	r25, r24
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <DIO_SetPortVal+0xce>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, value);
     baa:	a2 e3       	ldi	r26, 0x32	; 50
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e2 e3       	ldi	r30, 0x32	; 50
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	98 2f       	mov	r25, r24
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	80 95       	com	r24
     bba:	98 23       	and	r25, r24
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	89 2b       	or	r24, r25
     bc0:	8c 93       	st	X, r24
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <DIO_SetPortVal+0xce>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	89 83       	std	Y+1, r24	; 0x01
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_SetPortVal+0xce>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     bce:	89 81       	ldd	r24, Y+1	; 0x01
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <DIO_ClrPortVal>:
DIO_ERROR_RETVAL_t DIO_ClrPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	29 97       	sbiw	r28, 0x09	; 9
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	8a 83       	std	Y+2, r24	; 0x02
     bf6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     bf8:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	85 30       	cpi	r24, 0x05	; 5
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <DIO_ClrPortVal+0x22>
     c00:	53 c0       	rjmp	.+166    	; 0xca8 <DIO_ClrPortVal+0xc8>
		switch (DIO_port) {
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	39 87       	std	Y+9, r19	; 0x09
     c0a:	28 87       	std	Y+8, r18	; 0x08
     c0c:	88 85       	ldd	r24, Y+8	; 0x08
     c0e:	99 85       	ldd	r25, Y+9	; 0x09
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	91 05       	cpc	r25, r1
     c14:	11 f1       	breq	.+68     	; 0xc5a <DIO_ClrPortVal+0x7a>
     c16:	28 85       	ldd	r18, Y+8	; 0x08
     c18:	39 85       	ldd	r19, Y+9	; 0x09
     c1a:	23 30       	cpi	r18, 0x03	; 3
     c1c:	31 05       	cpc	r19, r1
     c1e:	34 f4       	brge	.+12     	; 0xc2c <DIO_ClrPortVal+0x4c>
     c20:	88 85       	ldd	r24, Y+8	; 0x08
     c22:	99 85       	ldd	r25, Y+9	; 0x09
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	91 05       	cpc	r25, r1
     c28:	61 f0       	breq	.+24     	; 0xc42 <DIO_ClrPortVal+0x62>
     c2a:	3b c0       	rjmp	.+118    	; 0xca2 <DIO_ClrPortVal+0xc2>
     c2c:	28 85       	ldd	r18, Y+8	; 0x08
     c2e:	39 85       	ldd	r19, Y+9	; 0x09
     c30:	23 30       	cpi	r18, 0x03	; 3
     c32:	31 05       	cpc	r19, r1
     c34:	f1 f0       	breq	.+60     	; 0xc72 <DIO_ClrPortVal+0x92>
     c36:	88 85       	ldd	r24, Y+8	; 0x08
     c38:	99 85       	ldd	r25, Y+9	; 0x09
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	91 05       	cpc	r25, r1
     c3e:	29 f1       	breq	.+74     	; 0xc8a <DIO_ClrPortVal+0xaa>
     c40:	30 c0       	rjmp	.+96     	; 0xca2 <DIO_ClrPortVal+0xc2>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, ~value);
     c42:	eb e3       	ldi	r30, 0x3B	; 59
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	90 81       	ld	r25, Z
     c48:	eb e3       	ldi	r30, 0x3B	; 59
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	80 95       	com	r24
     c54:	90 95       	com	r25
     c56:	80 83       	st	Z, r24
     c58:	29 c0       	rjmp	.+82     	; 0xcac <DIO_ClrPortVal+0xcc>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, ~value);
     c5a:	e8 e3       	ldi	r30, 0x38	; 56
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	20 81       	ld	r18, Z
     c60:	e8 e3       	ldi	r30, 0x38	; 56
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	80 95       	com	r24
     c6c:	90 95       	com	r25
     c6e:	80 83       	st	Z, r24
     c70:	1d c0       	rjmp	.+58     	; 0xcac <DIO_ClrPortVal+0xcc>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, ~value);
     c72:	e5 e3       	ldi	r30, 0x35	; 53
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	30 81       	ld	r19, Z
     c78:	e5 e3       	ldi	r30, 0x35	; 53
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	80 95       	com	r24
     c84:	90 95       	com	r25
     c86:	80 83       	st	Z, r24
     c88:	11 c0       	rjmp	.+34     	; 0xcac <DIO_ClrPortVal+0xcc>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, ~value);
     c8a:	e2 e3       	ldi	r30, 0x32	; 50
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	e2 e3       	ldi	r30, 0x32	; 50
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	80 95       	com	r24
     c9c:	90 95       	com	r25
     c9e:	80 83       	st	Z, r24
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <DIO_ClrPortVal+0xcc>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_ClrPortVal+0xcc>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
}
     cae:	29 96       	adiw	r28, 0x09	; 9
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <DIO_GetPortVal>:
Byte DIO_GetPortVal(DIO_PORT_ID_t DIO_port) {
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <DIO_GetPortVal+0x6>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <DIO_GetPortVal+0x8>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	8a 83       	std	Y+2, r24	; 0x02
	Byte RETVAL = EXIT_FAILURE;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD)) {
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	85 30       	cpi	r24, 0x05	; 5
     cd6:	b8 f5       	brcc	.+110    	; 0xd46 <DIO_GetPortVal+0x86>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	3c 83       	std	Y+4, r19	; 0x04
     ce0:	2b 83       	std	Y+3, r18	; 0x03
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	82 30       	cpi	r24, 0x02	; 2
     ce8:	91 05       	cpc	r25, r1
     cea:	d9 f0       	breq	.+54     	; 0xd22 <DIO_GetPortVal+0x62>
     cec:	2b 81       	ldd	r18, Y+3	; 0x03
     cee:	3c 81       	ldd	r19, Y+4	; 0x04
     cf0:	23 30       	cpi	r18, 0x03	; 3
     cf2:	31 05       	cpc	r19, r1
     cf4:	34 f4       	brge	.+12     	; 0xd02 <DIO_GetPortVal+0x42>
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	91 05       	cpc	r25, r1
     cfe:	61 f0       	breq	.+24     	; 0xd18 <DIO_GetPortVal+0x58>
     d00:	1f c0       	rjmp	.+62     	; 0xd40 <DIO_GetPortVal+0x80>
     d02:	2b 81       	ldd	r18, Y+3	; 0x03
     d04:	3c 81       	ldd	r19, Y+4	; 0x04
     d06:	23 30       	cpi	r18, 0x03	; 3
     d08:	31 05       	cpc	r19, r1
     d0a:	81 f0       	breq	.+32     	; 0xd2c <DIO_GetPortVal+0x6c>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	9c 81       	ldd	r25, Y+4	; 0x04
     d10:	84 30       	cpi	r24, 0x04	; 4
     d12:	91 05       	cpc	r25, r1
     d14:	81 f0       	breq	.+32     	; 0xd36 <DIO_GetPortVal+0x76>
     d16:	14 c0       	rjmp	.+40     	; 0xd40 <DIO_GetPortVal+0x80>
		case PORTA:
			RETVAL = READ_REG(PINA_Register);
     d18:	e9 e3       	ldi	r30, 0x39	; 57
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	14 c0       	rjmp	.+40     	; 0xd4a <DIO_GetPortVal+0x8a>
			break;
		case PORTB:
			RETVAL = READ_REG(PINB_Register);
     d22:	e6 e3       	ldi	r30, 0x36	; 54
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	0f c0       	rjmp	.+30     	; 0xd4a <DIO_GetPortVal+0x8a>
			break;
		case PORTC:
			RETVAL = READ_REG(PINC_Register);
     d2c:	e3 e3       	ldi	r30, 0x33	; 51
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <DIO_GetPortVal+0x8a>
			break;
		case PORTD:
			RETVAL = READ_REG(PIND_Register);
     d36:	e0 e3       	ldi	r30, 0x30	; 48
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <DIO_GetPortVal+0x8a>
			break;
		default:
			RETVAL = EXIT_FAILURE;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_GetPortVal+0x8a>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	89 83       	std	Y+1, r24	; 0x01
	}
	return RETVAL;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <DIO_TogPortVal>:
DIO_ERROR_RETVAL_t DIO_TogPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <DIO_TogPortVal+0x6>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <DIO_TogPortVal+0x8>
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     d6c:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	85 30       	cpi	r24, 0x05	; 5
     d72:	08 f0       	brcs	.+2      	; 0xd76 <DIO_TogPortVal+0x1c>
     d74:	67 c0       	rjmp	.+206    	; 0xe44 <DIO_TogPortVal+0xea>
		switch (DIO_port) {
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	3d 83       	std	Y+5, r19	; 0x05
     d7e:	2c 83       	std	Y+4, r18	; 0x04
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	91 05       	cpc	r25, r1
     d88:	39 f1       	breq	.+78     	; 0xdd8 <DIO_TogPortVal+0x7e>
     d8a:	2c 81       	ldd	r18, Y+4	; 0x04
     d8c:	3d 81       	ldd	r19, Y+5	; 0x05
     d8e:	23 30       	cpi	r18, 0x03	; 3
     d90:	31 05       	cpc	r19, r1
     d92:	34 f4       	brge	.+12     	; 0xda0 <DIO_TogPortVal+0x46>
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	9d 81       	ldd	r25, Y+5	; 0x05
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	91 05       	cpc	r25, r1
     d9c:	61 f0       	breq	.+24     	; 0xdb6 <DIO_TogPortVal+0x5c>
     d9e:	4f c0       	rjmp	.+158    	; 0xe3e <DIO_TogPortVal+0xe4>
     da0:	2c 81       	ldd	r18, Y+4	; 0x04
     da2:	3d 81       	ldd	r19, Y+5	; 0x05
     da4:	23 30       	cpi	r18, 0x03	; 3
     da6:	31 05       	cpc	r19, r1
     da8:	41 f1       	breq	.+80     	; 0xdfa <DIO_TogPortVal+0xa0>
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	9d 81       	ldd	r25, Y+5	; 0x05
     dae:	84 30       	cpi	r24, 0x04	; 4
     db0:	91 05       	cpc	r25, r1
     db2:	a1 f1       	breq	.+104    	; 0xe1c <DIO_TogPortVal+0xc2>
     db4:	44 c0       	rjmp	.+136    	; 0xe3e <DIO_TogPortVal+0xe4>
		case PORTA:
			if (READ_REG(DDRA_Register) == PORT_OUTPUT) {
     db6:	ea e3       	ldi	r30, 0x3A	; 58
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8f 3f       	cpi	r24, 0xFF	; 255
     dbe:	49 f4       	brne	.+18     	; 0xdd2 <DIO_TogPortVal+0x78>
				TOG_REG(PORTA_Register, value);
     dc0:	ab e3       	ldi	r26, 0x3B	; 59
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	eb e3       	ldi	r30, 0x3B	; 59
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	90 81       	ld	r25, Z
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	89 27       	eor	r24, r25
     dce:	8c 93       	st	X, r24
     dd0:	3b c0       	rjmp	.+118    	; 0xe48 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	38 c0       	rjmp	.+112    	; 0xe48 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PORT_OUTPUT) {
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	8f 3f       	cpi	r24, 0xFF	; 255
     de0:	49 f4       	brne	.+18     	; 0xdf4 <DIO_TogPortVal+0x9a>
				TOG_REG(PORTB_Register, value);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	90 81       	ld	r25, Z
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	89 27       	eor	r24, r25
     df0:	8c 93       	st	X, r24
     df2:	2a c0       	rjmp	.+84     	; 0xe48 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	27 c0       	rjmp	.+78     	; 0xe48 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PORT_OUTPUT) {
     dfa:	e4 e3       	ldi	r30, 0x34	; 52
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	49 f4       	brne	.+18     	; 0xe16 <DIO_TogPortVal+0xbc>
				TOG_REG(PORTC_Register, value);
     e04:	a5 e3       	ldi	r26, 0x35	; 53
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e5 e3       	ldi	r30, 0x35	; 53
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	90 81       	ld	r25, Z
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	89 27       	eor	r24, r25
     e12:	8c 93       	st	X, r24
     e14:	19 c0       	rjmp	.+50     	; 0xe48 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	16 c0       	rjmp	.+44     	; 0xe48 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PORT_OUTPUT) {
     e1c:	e1 e3       	ldi	r30, 0x31	; 49
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8f 3f       	cpi	r24, 0xFF	; 255
     e24:	49 f4       	brne	.+18     	; 0xe38 <DIO_TogPortVal+0xde>
				TOG_REG(PORTD_Register, value);
     e26:	a2 e3       	ldi	r26, 0x32	; 50
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e2 e3       	ldi	r30, 0x32	; 50
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	90 81       	ld	r25, Z
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	89 27       	eor	r24, r25
     e34:	8c 93       	st	X, r24
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <DIO_TogPortVal+0xee>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_TogPortVal+0xee>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <DIO_SetPinDirection>:
/*main APIs*/
uint8_t DIO_SetPinDirection(uint8_t PortName, uint8_t PinNo,
		uint8_t PinDirection) {
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	28 97       	sbiw	r28, 0x08	; 8
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	8a 83       	std	Y+2, r24	; 0x02
     e70:	6b 83       	std	Y+3, r22	; 0x03
     e72:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     e74:	19 82       	std	Y+1, r1	; 0x01

	if ((PortName <= PORTD) && (PinNo <= PIN7)) {
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	85 30       	cpi	r24, 0x05	; 5
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <DIO_SetPinDirection+0x24>
     e7c:	fa c0       	rjmp	.+500    	; 0x1072 <DIO_SetPinDirection+0x218>
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	08 f0       	brcs	.+2      	; 0xe86 <DIO_SetPinDirection+0x2c>
     e84:	f6 c0       	rjmp	.+492    	; 0x1072 <DIO_SetPinDirection+0x218>
		if (PinDirection == PIN_OUTPUT) {
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	09 f0       	breq	.+2      	; 0xe8e <DIO_SetPinDirection+0x34>
     e8c:	73 c0       	rjmp	.+230    	; 0xf74 <DIO_SetPinDirection+0x11a>

			switch (PortName) {
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	38 87       	std	Y+8, r19	; 0x08
     e96:	2f 83       	std	Y+7, r18	; 0x07
     e98:	8f 81       	ldd	r24, Y+7	; 0x07
     e9a:	98 85       	ldd	r25, Y+8	; 0x08
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	91 05       	cpc	r25, r1
     ea0:	51 f1       	breq	.+84     	; 0xef6 <DIO_SetPinDirection+0x9c>
     ea2:	2f 81       	ldd	r18, Y+7	; 0x07
     ea4:	38 85       	ldd	r19, Y+8	; 0x08
     ea6:	23 30       	cpi	r18, 0x03	; 3
     ea8:	31 05       	cpc	r19, r1
     eaa:	34 f4       	brge	.+12     	; 0xeb8 <DIO_SetPinDirection+0x5e>
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	61 f0       	breq	.+24     	; 0xece <DIO_SetPinDirection+0x74>
     eb6:	5b c0       	rjmp	.+182    	; 0xf6e <DIO_SetPinDirection+0x114>
     eb8:	2f 81       	ldd	r18, Y+7	; 0x07
     eba:	38 85       	ldd	r19, Y+8	; 0x08
     ebc:	23 30       	cpi	r18, 0x03	; 3
     ebe:	31 05       	cpc	r19, r1
     ec0:	71 f1       	breq	.+92     	; 0xf1e <DIO_SetPinDirection+0xc4>
     ec2:	8f 81       	ldd	r24, Y+7	; 0x07
     ec4:	98 85       	ldd	r25, Y+8	; 0x08
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	91 05       	cpc	r25, r1
     eca:	e9 f1       	breq	.+122    	; 0xf46 <DIO_SetPinDirection+0xec>
     ecc:	50 c0       	rjmp	.+160    	; 0xf6e <DIO_SetPinDirection+0x114>
			case PORTA:
				SET_BIT(DDRA_Register, PinNo);
     ece:	aa e3       	ldi	r26, 0x3A	; 58
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ea e3       	ldi	r30, 0x3A	; 58
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_SetPinDirection+0x92>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_SetPinDirection+0x8e>
     ef0:	84 2b       	or	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	c0 c0       	rjmp	.+384    	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				SET_BIT(DDRB_Register, PinNo);
     ef6:	a7 e3       	ldi	r26, 0x37	; 55
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e7 e3       	ldi	r30, 0x37	; 55
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_SetPinDirection+0xba>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_SetPinDirection+0xb6>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	ac c0       	rjmp	.+344    	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				SET_BIT(DDRC_Register, PinNo);
     f1e:	a4 e3       	ldi	r26, 0x34	; 52
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e4 e3       	ldi	r30, 0x34	; 52
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_SetPinDirection+0xe2>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_SetPinDirection+0xde>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	98 c0       	rjmp	.+304    	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				SET_BIT(DDRD_Register, PinNo);
     f46:	a1 e3       	ldi	r26, 0x31	; 49
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e1 e3       	ldi	r30, 0x31	; 49
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_SetPinDirection+0x10a>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_SetPinDirection+0x106>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	84 c0       	rjmp	.+264    	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	81 c0       	rjmp	.+258    	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			}
		} else if (PinDirection == PIN_INPUT) {
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	88 23       	and	r24, r24
     f78:	09 f0       	breq	.+2      	; 0xf7c <DIO_SetPinDirection+0x122>
     f7a:	78 c0       	rjmp	.+240    	; 0x106c <DIO_SetPinDirection+0x212>

			switch (PortName) {
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	3e 83       	std	Y+6, r19	; 0x06
     f84:	2d 83       	std	Y+5, r18	; 0x05
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	91 05       	cpc	r25, r1
     f8e:	61 f1       	breq	.+88     	; 0xfe8 <DIO_SetPinDirection+0x18e>
     f90:	2d 81       	ldd	r18, Y+5	; 0x05
     f92:	3e 81       	ldd	r19, Y+6	; 0x06
     f94:	23 30       	cpi	r18, 0x03	; 3
     f96:	31 05       	cpc	r19, r1
     f98:	34 f4       	brge	.+12     	; 0xfa6 <DIO_SetPinDirection+0x14c>
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	69 f0       	breq	.+26     	; 0xfbe <DIO_SetPinDirection+0x164>
     fa4:	60 c0       	rjmp	.+192    	; 0x1066 <DIO_SetPinDirection+0x20c>
     fa6:	2d 81       	ldd	r18, Y+5	; 0x05
     fa8:	3e 81       	ldd	r19, Y+6	; 0x06
     faa:	23 30       	cpi	r18, 0x03	; 3
     fac:	31 05       	cpc	r19, r1
     fae:	89 f1       	breq	.+98     	; 0x1012 <DIO_SetPinDirection+0x1b8>
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	84 30       	cpi	r24, 0x04	; 4
     fb6:	91 05       	cpc	r25, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <DIO_SetPinDirection+0x162>
     fba:	40 c0       	rjmp	.+128    	; 0x103c <DIO_SetPinDirection+0x1e2>
     fbc:	54 c0       	rjmp	.+168    	; 0x1066 <DIO_SetPinDirection+0x20c>
			case PORTA:
				CLEAR_BIT(DDRA_Register, PinNo);
     fbe:	aa e3       	ldi	r26, 0x3A	; 58
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ea e3       	ldi	r30, 0x3A	; 58
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_SetPinDirection+0x182>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_SetPinDirection+0x17e>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	47 c0       	rjmp	.+142    	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				CLEAR_BIT(DDRB_Register, PinNo);
     fe8:	a7 e3       	ldi	r26, 0x37	; 55
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e7 e3       	ldi	r30, 0x37	; 55
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_SetPinDirection+0x1ac>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_SetPinDirection+0x1a8>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	32 c0       	rjmp	.+100    	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				CLEAR_BIT(DDRC_Register, PinNo);
    1012:	a4 e3       	ldi	r26, 0x34	; 52
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e4 e3       	ldi	r30, 0x34	; 52
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_SetPinDirection+0x1d6>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_SetPinDirection+0x1d2>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	1d c0       	rjmp	.+58     	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				CLEAR_BIT(DDRD_Register, PinNo);
    103c:	a1 e3       	ldi	r26, 0x31	; 49
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e1 e3       	ldi	r30, 0x31	; 49
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_SetPinDirection+0x200>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_SetPinDirection+0x1fc>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <DIO_SetPinDirection+0x21c>
				break;
			}
		}

		else {
			ErrorValue = EXIT_FAILURE;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_SetPinDirection+0x21c>
		}
	}

	else {
		ErrorValue = EXIT_FAILURE;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	28 96       	adiw	r28, 0x08	; 8
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <DIO_WritePin>:
uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	28 97       	sbiw	r28, 0x08	; 8
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	6b 83       	std	Y+3, r22	; 0x03
    10a2:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    10a4:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	85 30       	cpi	r24, 0x05	; 5
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <DIO_WritePin+0x24>
    10ac:	0f c2       	rjmp	.+1054   	; 0x14cc <DIO_WritePin+0x442>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	88 30       	cpi	r24, 0x08	; 8
    10b2:	08 f0       	brcs	.+2      	; 0x10b6 <DIO_WritePin+0x2c>
    10b4:	0b c2       	rjmp	.+1046   	; 0x14cc <DIO_WritePin+0x442>
			if (PinValue == PIN_HIGH) {
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	09 f0       	breq	.+2      	; 0x10be <DIO_WritePin+0x34>
    10bc:	fe c0       	rjmp	.+508    	; 0x12ba <DIO_WritePin+0x230>

				switch (PortName) {
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	38 87       	std	Y+8, r19	; 0x08
    10c6:	2f 83       	std	Y+7, r18	; 0x07
    10c8:	4f 81       	ldd	r20, Y+7	; 0x07
    10ca:	58 85       	ldd	r21, Y+8	; 0x08
    10cc:	42 30       	cpi	r20, 0x02	; 2
    10ce:	51 05       	cpc	r21, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <DIO_WritePin+0x4a>
    10d2:	4e c0       	rjmp	.+156    	; 0x1170 <DIO_WritePin+0xe6>
    10d4:	8f 81       	ldd	r24, Y+7	; 0x07
    10d6:	98 85       	ldd	r25, Y+8	; 0x08
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	34 f4       	brge	.+12     	; 0x10ea <DIO_WritePin+0x60>
    10de:	2f 81       	ldd	r18, Y+7	; 0x07
    10e0:	38 85       	ldd	r19, Y+8	; 0x08
    10e2:	21 30       	cpi	r18, 0x01	; 1
    10e4:	31 05       	cpc	r19, r1
    10e6:	71 f0       	breq	.+28     	; 0x1104 <DIO_WritePin+0x7a>
    10e8:	e5 c0       	rjmp	.+458    	; 0x12b4 <DIO_WritePin+0x22a>
    10ea:	4f 81       	ldd	r20, Y+7	; 0x07
    10ec:	58 85       	ldd	r21, Y+8	; 0x08
    10ee:	43 30       	cpi	r20, 0x03	; 3
    10f0:	51 05       	cpc	r21, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <DIO_WritePin+0x6c>
    10f4:	73 c0       	rjmp	.+230    	; 0x11dc <DIO_WritePin+0x152>
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	84 30       	cpi	r24, 0x04	; 4
    10fc:	91 05       	cpc	r25, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <DIO_WritePin+0x78>
    1100:	a3 c0       	rjmp	.+326    	; 0x1248 <DIO_WritePin+0x1be>
    1102:	d8 c0       	rjmp	.+432    	; 0x12b4 <DIO_WritePin+0x22a>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    1104:	ea e3       	ldi	r30, 0x3A	; 58
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_WritePin+0x94>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	2a 95       	dec	r18
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_WritePin+0x90>
    1122:	9a 01       	movw	r18, r20
    1124:	28 23       	and	r18, r24
    1126:	39 23       	and	r19, r25
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_WritePin+0xac>
    1132:	55 95       	asr	r21
    1134:	47 95       	ror	r20
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_WritePin+0xa8>
    113a:	ca 01       	movw	r24, r20
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	a1 f4       	brne	.+40     	; 0x116a <DIO_WritePin+0xe0>
						SET_BIT(PORTA_Register, PinNo);
    1142:	ab e3       	ldi	r26, 0x3B	; 59
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	eb e3       	ldi	r30, 0x3B	; 59
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_WritePin+0xd6>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_WritePin+0xd2>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	b3 c1       	rjmp	.+870    	; 0x14d0 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	b0 c1       	rjmp	.+864    	; 0x14d0 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    1170:	e7 e3       	ldi	r30, 0x37	; 55
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_WritePin+0x100>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	2a 95       	dec	r18
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_WritePin+0xfc>
    118e:	9a 01       	movw	r18, r20
    1190:	28 23       	and	r18, r24
    1192:	39 23       	and	r19, r25
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_WritePin+0x118>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_WritePin+0x114>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	a1 f4       	brne	.+40     	; 0x11d6 <DIO_WritePin+0x14c>
						SET_BIT(PORTB_Register, PinNo);
    11ae:	a8 e3       	ldi	r26, 0x38	; 56
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e8 e3       	ldi	r30, 0x38	; 56
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_WritePin+0x142>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_WritePin+0x13e>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	7d c1       	rjmp	.+762    	; 0x14d0 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	7a c1       	rjmp	.+756    	; 0x14d0 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    11dc:	e4 e3       	ldi	r30, 0x34	; 52
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_WritePin+0x16c>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	2a 95       	dec	r18
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_WritePin+0x168>
    11fa:	9a 01       	movw	r18, r20
    11fc:	28 23       	and	r18, r24
    11fe:	39 23       	and	r19, r25
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_WritePin+0x184>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_WritePin+0x180>
    1212:	ca 01       	movw	r24, r20
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	91 05       	cpc	r25, r1
    1218:	a1 f4       	brne	.+40     	; 0x1242 <DIO_WritePin+0x1b8>
						SET_BIT(PORTC_Register, PinNo);
    121a:	a5 e3       	ldi	r26, 0x35	; 53
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e3       	ldi	r30, 0x35	; 53
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_WritePin+0x1ae>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_WritePin+0x1aa>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	47 c1       	rjmp	.+654    	; 0x14d0 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	44 c1       	rjmp	.+648    	; 0x14d0 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    1248:	e1 e3       	ldi	r30, 0x31	; 49
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_WritePin+0x1d8>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	2a 95       	dec	r18
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_WritePin+0x1d4>
    1266:	9a 01       	movw	r18, r20
    1268:	28 23       	and	r18, r24
    126a:	39 23       	and	r19, r25
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a9 01       	movw	r20, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_WritePin+0x1f0>
    1276:	55 95       	asr	r21
    1278:	47 95       	ror	r20
    127a:	8a 95       	dec	r24
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_WritePin+0x1ec>
    127e:	ca 01       	movw	r24, r20
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	a1 f4       	brne	.+40     	; 0x12ae <DIO_WritePin+0x224>
						SET_BIT(PORTD_Register, PinNo);
    1286:	a2 e3       	ldi	r26, 0x32	; 50
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e2 e3       	ldi	r30, 0x32	; 50
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_WritePin+0x21a>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_WritePin+0x216>
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	11 c1       	rjmp	.+546    	; 0x14d0 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	0e c1       	rjmp	.+540    	; 0x14d0 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	0b c1       	rjmp	.+534    	; 0x14d0 <DIO_WritePin+0x446>
					break;
				}
			} else if (PinValue == PIN_LOW) {
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	88 23       	and	r24, r24
    12be:	09 f0       	breq	.+2      	; 0x12c2 <DIO_WritePin+0x238>
    12c0:	02 c1       	rjmp	.+516    	; 0x14c6 <DIO_WritePin+0x43c>

				switch (PortName) {
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3e 83       	std	Y+6, r19	; 0x06
    12ca:	2d 83       	std	Y+5, r18	; 0x05
    12cc:	4d 81       	ldd	r20, Y+5	; 0x05
    12ce:	5e 81       	ldd	r21, Y+6	; 0x06
    12d0:	42 30       	cpi	r20, 0x02	; 2
    12d2:	51 05       	cpc	r21, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <DIO_WritePin+0x24e>
    12d6:	4f c0       	rjmp	.+158    	; 0x1376 <DIO_WritePin+0x2ec>
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	34 f4       	brge	.+12     	; 0x12ee <DIO_WritePin+0x264>
    12e2:	2d 81       	ldd	r18, Y+5	; 0x05
    12e4:	3e 81       	ldd	r19, Y+6	; 0x06
    12e6:	21 30       	cpi	r18, 0x01	; 1
    12e8:	31 05       	cpc	r19, r1
    12ea:	71 f0       	breq	.+28     	; 0x1308 <DIO_WritePin+0x27e>
    12ec:	e9 c0       	rjmp	.+466    	; 0x14c0 <DIO_WritePin+0x436>
    12ee:	4d 81       	ldd	r20, Y+5	; 0x05
    12f0:	5e 81       	ldd	r21, Y+6	; 0x06
    12f2:	43 30       	cpi	r20, 0x03	; 3
    12f4:	51 05       	cpc	r21, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <DIO_WritePin+0x270>
    12f8:	75 c0       	rjmp	.+234    	; 0x13e4 <DIO_WritePin+0x35a>
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <DIO_WritePin+0x27c>
    1304:	a6 c0       	rjmp	.+332    	; 0x1452 <DIO_WritePin+0x3c8>
    1306:	dc c0       	rjmp	.+440    	; 0x14c0 <DIO_WritePin+0x436>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    1308:	ea e3       	ldi	r30, 0x3A	; 58
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_WritePin+0x298>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	2a 95       	dec	r18
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_WritePin+0x294>
    1326:	9a 01       	movw	r18, r20
    1328:	28 23       	and	r18, r24
    132a:	39 23       	and	r19, r25
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_WritePin+0x2b0>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_WritePin+0x2ac>
    133e:	ca 01       	movw	r24, r20
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	a9 f4       	brne	.+42     	; 0x1370 <DIO_WritePin+0x2e6>
						CLEAR_BIT(PORTA_Register, PinNo);
    1346:	ab e3       	ldi	r26, 0x3B	; 59
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	eb e3       	ldi	r30, 0x3B	; 59
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_WritePin+0x2da>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_WritePin+0x2d6>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	b0 c0       	rjmp	.+352    	; 0x14d0 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	ad c0       	rjmp	.+346    	; 0x14d0 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    1376:	e7 e3       	ldi	r30, 0x37	; 55
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_WritePin+0x306>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	2a 95       	dec	r18
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_WritePin+0x302>
    1394:	9a 01       	movw	r18, r20
    1396:	28 23       	and	r18, r24
    1398:	39 23       	and	r19, r25
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a9 01       	movw	r20, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_WritePin+0x31e>
    13a4:	55 95       	asr	r21
    13a6:	47 95       	ror	r20
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_WritePin+0x31a>
    13ac:	ca 01       	movw	r24, r20
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	a9 f4       	brne	.+42     	; 0x13de <DIO_WritePin+0x354>
						CLEAR_BIT(PORTB_Register, PinNo);
    13b4:	a8 e3       	ldi	r26, 0x38	; 56
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e8 e3       	ldi	r30, 0x38	; 56
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_WritePin+0x348>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_WritePin+0x344>
    13d6:	80 95       	com	r24
    13d8:	84 23       	and	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	79 c0       	rjmp	.+242    	; 0x14d0 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	76 c0       	rjmp	.+236    	; 0x14d0 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    13e4:	e4 e3       	ldi	r30, 0x34	; 52
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_WritePin+0x374>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	2a 95       	dec	r18
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_WritePin+0x370>
    1402:	9a 01       	movw	r18, r20
    1404:	28 23       	and	r18, r24
    1406:	39 23       	and	r19, r25
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a9 01       	movw	r20, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_WritePin+0x38c>
    1412:	55 95       	asr	r21
    1414:	47 95       	ror	r20
    1416:	8a 95       	dec	r24
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_WritePin+0x388>
    141a:	ca 01       	movw	r24, r20
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	a9 f4       	brne	.+42     	; 0x144c <DIO_WritePin+0x3c2>
						CLEAR_BIT(PORTC_Register, PinNo);
    1422:	a5 e3       	ldi	r26, 0x35	; 53
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e3       	ldi	r30, 0x35	; 53
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_WritePin+0x3b6>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO_WritePin+0x3b2>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	42 c0       	rjmp	.+132    	; 0x14d0 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	3f c0       	rjmp	.+126    	; 0x14d0 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    1452:	e1 e3       	ldi	r30, 0x31	; 49
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_WritePin+0x3e2>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	2a 95       	dec	r18
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_WritePin+0x3de>
    1470:	9a 01       	movw	r18, r20
    1472:	28 23       	and	r18, r24
    1474:	39 23       	and	r19, r25
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a9 01       	movw	r20, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_WritePin+0x3fa>
    1480:	55 95       	asr	r21
    1482:	47 95       	ror	r20
    1484:	8a 95       	dec	r24
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_WritePin+0x3f6>
    1488:	ca 01       	movw	r24, r20
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	a9 f4       	brne	.+42     	; 0x14ba <DIO_WritePin+0x430>
						CLEAR_BIT(PORTD_Register, PinNo);
    1490:	a2 e3       	ldi	r26, 0x32	; 50
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_WritePin+0x424>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_WritePin+0x420>
    14b2:	80 95       	com	r24
    14b4:	84 23       	and	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	0b c0       	rjmp	.+22     	; 0x14d0 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <DIO_WritePin+0x446>
					break;
				}
			} else {
				ErrorValue = EXIT_FAILURE;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_WritePin+0x446>
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d2:	28 96       	adiw	r28, 0x08	; 8
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_TogglePin>:
uint8_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_TogglePin+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_TogglePin+0x8>
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	8a 83       	std	Y+2, r24	; 0x02
    14f4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    14f6:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	85 30       	cpi	r24, 0x05	; 5
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <DIO_TogglePin+0x1c>
    14fe:	02 c1       	rjmp	.+516    	; 0x1704 <DIO_TogglePin+0x220>
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	08 f0       	brcs	.+2      	; 0x1508 <DIO_TogglePin+0x24>
    1506:	fe c0       	rjmp	.+508    	; 0x1704 <DIO_TogglePin+0x220>
			switch (PortName) {
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3d 83       	std	Y+5, r19	; 0x05
    1510:	2c 83       	std	Y+4, r18	; 0x04
    1512:	4c 81       	ldd	r20, Y+4	; 0x04
    1514:	5d 81       	ldd	r21, Y+5	; 0x05
    1516:	42 30       	cpi	r20, 0x02	; 2
    1518:	51 05       	cpc	r21, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <DIO_TogglePin+0x3a>
    151c:	4e c0       	rjmp	.+156    	; 0x15ba <DIO_TogglePin+0xd6>
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	34 f4       	brge	.+12     	; 0x1534 <DIO_TogglePin+0x50>
    1528:	2c 81       	ldd	r18, Y+4	; 0x04
    152a:	3d 81       	ldd	r19, Y+5	; 0x05
    152c:	21 30       	cpi	r18, 0x01	; 1
    152e:	31 05       	cpc	r19, r1
    1530:	71 f0       	breq	.+28     	; 0x154e <DIO_TogglePin+0x6a>
    1532:	e5 c0       	rjmp	.+458    	; 0x16fe <DIO_TogglePin+0x21a>
    1534:	4c 81       	ldd	r20, Y+4	; 0x04
    1536:	5d 81       	ldd	r21, Y+5	; 0x05
    1538:	43 30       	cpi	r20, 0x03	; 3
    153a:	51 05       	cpc	r21, r1
    153c:	09 f4       	brne	.+2      	; 0x1540 <DIO_TogglePin+0x5c>
    153e:	73 c0       	rjmp	.+230    	; 0x1626 <DIO_TogglePin+0x142>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	84 30       	cpi	r24, 0x04	; 4
    1546:	91 05       	cpc	r25, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <DIO_TogglePin+0x68>
    154a:	a3 c0       	rjmp	.+326    	; 0x1692 <DIO_TogglePin+0x1ae>
    154c:	d8 c0       	rjmp	.+432    	; 0x16fe <DIO_TogglePin+0x21a>
			case PORTA:
				if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    154e:	ea e3       	ldi	r30, 0x3A	; 58
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_TogglePin+0x84>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	2a 95       	dec	r18
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_TogglePin+0x80>
    156c:	9a 01       	movw	r18, r20
    156e:	28 23       	and	r18, r24
    1570:	39 23       	and	r19, r25
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_TogglePin+0x9c>
    157c:	55 95       	asr	r21
    157e:	47 95       	ror	r20
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_TogglePin+0x98>
    1584:	ca 01       	movw	r24, r20
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	a1 f4       	brne	.+40     	; 0x15b4 <DIO_TogglePin+0xd0>
					TOG_BIT(PORTA_Register, PinNo);
    158c:	ab e3       	ldi	r26, 0x3B	; 59
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	eb e3       	ldi	r30, 0x3B	; 59
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_TogglePin+0xc6>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_TogglePin+0xc2>
    15ae:	84 27       	eor	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	aa c0       	rjmp	.+340    	; 0x1708 <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	a7 c0       	rjmp	.+334    	; 0x1708 <DIO_TogglePin+0x224>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    15ba:	e7 e3       	ldi	r30, 0x37	; 55
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_TogglePin+0xf0>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 95       	dec	r18
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_TogglePin+0xec>
    15d8:	9a 01       	movw	r18, r20
    15da:	28 23       	and	r18, r24
    15dc:	39 23       	and	r19, r25
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_TogglePin+0x108>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_TogglePin+0x104>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	a1 f4       	brne	.+40     	; 0x1620 <DIO_TogglePin+0x13c>
					TOG_BIT(PORTB_Register, PinNo);
    15f8:	a8 e3       	ldi	r26, 0x38	; 56
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e8 e3       	ldi	r30, 0x38	; 56
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_TogglePin+0x132>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_TogglePin+0x12e>
    161a:	84 27       	eor	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	74 c0       	rjmp	.+232    	; 0x1708 <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	71 c0       	rjmp	.+226    	; 0x1708 <DIO_TogglePin+0x224>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    1626:	e4 e3       	ldi	r30, 0x34	; 52
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_TogglePin+0x15c>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	2a 95       	dec	r18
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_TogglePin+0x158>
    1644:	9a 01       	movw	r18, r20
    1646:	28 23       	and	r18, r24
    1648:	39 23       	and	r19, r25
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_TogglePin+0x174>
    1654:	55 95       	asr	r21
    1656:	47 95       	ror	r20
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_TogglePin+0x170>
    165c:	ca 01       	movw	r24, r20
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	a1 f4       	brne	.+40     	; 0x168c <DIO_TogglePin+0x1a8>
					TOG_BIT(PORTC_Register, PinNo);
    1664:	a5 e3       	ldi	r26, 0x35	; 53
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e5 e3       	ldi	r30, 0x35	; 53
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_TogglePin+0x19e>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_TogglePin+0x19a>
    1686:	84 27       	eor	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	3e c0       	rjmp	.+124    	; 0x1708 <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	3b c0       	rjmp	.+118    	; 0x1708 <DIO_TogglePin+0x224>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    1692:	e1 e3       	ldi	r30, 0x31	; 49
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_TogglePin+0x1c8>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	2a 95       	dec	r18
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_TogglePin+0x1c4>
    16b0:	9a 01       	movw	r18, r20
    16b2:	28 23       	and	r18, r24
    16b4:	39 23       	and	r19, r25
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a9 01       	movw	r20, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_TogglePin+0x1e0>
    16c0:	55 95       	asr	r21
    16c2:	47 95       	ror	r20
    16c4:	8a 95       	dec	r24
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_TogglePin+0x1dc>
    16c8:	ca 01       	movw	r24, r20
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	91 05       	cpc	r25, r1
    16ce:	a1 f4       	brne	.+40     	; 0x16f8 <DIO_TogglePin+0x214>
					TOG_BIT(PORTD_Register, PinNo);
    16d0:	a2 e3       	ldi	r26, 0x32	; 50
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e2 e3       	ldi	r30, 0x32	; 50
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_TogglePin+0x20a>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_TogglePin+0x206>
    16f2:	84 27       	eor	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <DIO_TogglePin+0x224>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_TogglePin+0x224>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <DIO_ReadPin>:
uint8_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	27 97       	sbiw	r28, 0x07	; 7
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	6b 83       	std	Y+3, r22	; 0x03
    1732:	5d 83       	std	Y+5, r21	; 0x05
    1734:	4c 83       	std	Y+4, r20	; 0x04
	Byte RETVAL = EXIT_SUCCESFUL;
    1736:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	85 30       	cpi	r24, 0x05	; 5
    173c:	08 f0       	brcs	.+2      	; 0x1740 <DIO_ReadPin+0x26>
    173e:	a9 c0       	rjmp	.+338    	; 0x1892 <DIO_ReadPin+0x178>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	88 30       	cpi	r24, 0x08	; 8
    1744:	08 f0       	brcs	.+2      	; 0x1748 <DIO_ReadPin+0x2e>
    1746:	a5 c0       	rjmp	.+330    	; 0x1892 <DIO_ReadPin+0x178>

			switch (PortName) {
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3f 83       	std	Y+7, r19	; 0x07
    1750:	2e 83       	std	Y+6, r18	; 0x06
    1752:	4e 81       	ldd	r20, Y+6	; 0x06
    1754:	5f 81       	ldd	r21, Y+7	; 0x07
    1756:	42 30       	cpi	r20, 0x02	; 2
    1758:	51 05       	cpc	r21, r1
    175a:	c1 f1       	breq	.+112    	; 0x17cc <DIO_ReadPin+0xb2>
    175c:	8e 81       	ldd	r24, Y+6	; 0x06
    175e:	9f 81       	ldd	r25, Y+7	; 0x07
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	34 f4       	brge	.+12     	; 0x1772 <DIO_ReadPin+0x58>
    1766:	2e 81       	ldd	r18, Y+6	; 0x06
    1768:	3f 81       	ldd	r19, Y+7	; 0x07
    176a:	21 30       	cpi	r18, 0x01	; 1
    176c:	31 05       	cpc	r19, r1
    176e:	71 f0       	breq	.+28     	; 0x178c <DIO_ReadPin+0x72>
    1770:	8d c0       	rjmp	.+282    	; 0x188c <DIO_ReadPin+0x172>
    1772:	4e 81       	ldd	r20, Y+6	; 0x06
    1774:	5f 81       	ldd	r21, Y+7	; 0x07
    1776:	43 30       	cpi	r20, 0x03	; 3
    1778:	51 05       	cpc	r21, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <DIO_ReadPin+0x64>
    177c:	47 c0       	rjmp	.+142    	; 0x180c <DIO_ReadPin+0xf2>
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	84 30       	cpi	r24, 0x04	; 4
    1784:	91 05       	cpc	r25, r1
    1786:	09 f4       	brne	.+2      	; 0x178a <DIO_ReadPin+0x70>
    1788:	61 c0       	rjmp	.+194    	; 0x184c <DIO_ReadPin+0x132>
    178a:	80 c0       	rjmp	.+256    	; 0x188c <DIO_ReadPin+0x172>
			case PORTA:
				*PinData = READ_BIT(PINA_Register, PinNo);
    178c:	e9 e3       	ldi	r30, 0x39	; 57
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_ReadPin+0x8c>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	2a 95       	dec	r18
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_ReadPin+0x88>
    17aa:	9a 01       	movw	r18, r20
    17ac:	28 23       	and	r18, r24
    17ae:	39 23       	and	r19, r25
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_ReadPin+0xa4>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_ReadPin+0xa0>
    17c2:	ca 01       	movw	r24, r20
    17c4:	ec 81       	ldd	r30, Y+4	; 0x04
    17c6:	fd 81       	ldd	r31, Y+5	; 0x05
    17c8:	80 83       	st	Z, r24
    17ca:	65 c0       	rjmp	.+202    	; 0x1896 <DIO_ReadPin+0x17c>
				break;
			case PORTB:
				*PinData = READ_BIT(PINB_Register, PinNo);
    17cc:	e6 e3       	ldi	r30, 0x36	; 54
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <DIO_ReadPin+0xcc>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	2a 95       	dec	r18
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <DIO_ReadPin+0xc8>
    17ea:	9a 01       	movw	r18, r20
    17ec:	28 23       	and	r18, r24
    17ee:	39 23       	and	r19, r25
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a9 01       	movw	r20, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_ReadPin+0xe4>
    17fa:	55 95       	asr	r21
    17fc:	47 95       	ror	r20
    17fe:	8a 95       	dec	r24
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_ReadPin+0xe0>
    1802:	ca 01       	movw	r24, r20
    1804:	ec 81       	ldd	r30, Y+4	; 0x04
    1806:	fd 81       	ldd	r31, Y+5	; 0x05
    1808:	80 83       	st	Z, r24
    180a:	45 c0       	rjmp	.+138    	; 0x1896 <DIO_ReadPin+0x17c>
				break;
			case PORTC:
				*PinData = READ_BIT(PINC_Register, PinNo);
    180c:	e3 e3       	ldi	r30, 0x33	; 51
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_ReadPin+0x10c>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	2a 95       	dec	r18
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_ReadPin+0x108>
    182a:	9a 01       	movw	r18, r20
    182c:	28 23       	and	r18, r24
    182e:	39 23       	and	r19, r25
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a9 01       	movw	r20, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_ReadPin+0x124>
    183a:	55 95       	asr	r21
    183c:	47 95       	ror	r20
    183e:	8a 95       	dec	r24
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_ReadPin+0x120>
    1842:	ca 01       	movw	r24, r20
    1844:	ec 81       	ldd	r30, Y+4	; 0x04
    1846:	fd 81       	ldd	r31, Y+5	; 0x05
    1848:	80 83       	st	Z, r24
    184a:	25 c0       	rjmp	.+74     	; 0x1896 <DIO_ReadPin+0x17c>
				break;
			case PORTD:
				*PinData = READ_BIT(PIND_Register, PinNo);
    184c:	e0 e3       	ldi	r30, 0x30	; 48
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_ReadPin+0x14c>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	2a 95       	dec	r18
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_ReadPin+0x148>
    186a:	9a 01       	movw	r18, r20
    186c:	28 23       	and	r18, r24
    186e:	39 23       	and	r19, r25
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a9 01       	movw	r20, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_ReadPin+0x164>
    187a:	55 95       	asr	r21
    187c:	47 95       	ror	r20
    187e:	8a 95       	dec	r24
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_ReadPin+0x160>
    1882:	ca 01       	movw	r24, r20
    1884:	ec 81       	ldd	r30, Y+4	; 0x04
    1886:	fd 81       	ldd	r31, Y+5	; 0x05
    1888:	80 83       	st	Z, r24
    188a:	05 c0       	rjmp	.+10     	; 0x1896 <DIO_ReadPin+0x17c>
				break;
			default:
				RETVAL = EXIT_FAILURE;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_ReadPin+0x17c>
			}
		} else {
			RETVAL = EXIT_FAILURE;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
		}

		return RETVAL;
    1896:	89 81       	ldd	r24, Y+1	; 0x01
}
    1898:	27 96       	adiw	r28, 0x07	; 7
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <DIO_EnablePinPullup>:
uint8_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <DIO_EnablePinPullup+0x6>
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <DIO_EnablePinPullup+0x8>
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    18bc:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	85 30       	cpi	r24, 0x05	; 5
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <DIO_EnablePinPullup+0x1c>
    18c4:	99 c0       	rjmp	.+306    	; 0x19f8 <DIO_EnablePinPullup+0x14e>
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	88 30       	cpi	r24, 0x08	; 8
    18ca:	08 f0       	brcs	.+2      	; 0x18ce <DIO_EnablePinPullup+0x24>
    18cc:	95 c0       	rjmp	.+298    	; 0x19f8 <DIO_EnablePinPullup+0x14e>
			/* Check on the Required PORT Number */
			switch (PortName) {
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	3d 83       	std	Y+5, r19	; 0x05
    18d6:	2c 83       	std	Y+4, r18	; 0x04
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	91 05       	cpc	r25, r1
    18e0:	a1 f1       	breq	.+104    	; 0x194a <DIO_EnablePinPullup+0xa0>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	23 30       	cpi	r18, 0x03	; 3
    18e8:	31 05       	cpc	r19, r1
    18ea:	34 f4       	brge	.+12     	; 0x18f8 <DIO_EnablePinPullup+0x4e>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	71 f0       	breq	.+28     	; 0x1912 <DIO_EnablePinPullup+0x68>
    18f6:	7d c0       	rjmp	.+250    	; 0x19f2 <DIO_EnablePinPullup+0x148>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	23 30       	cpi	r18, 0x03	; 3
    18fe:	31 05       	cpc	r19, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <DIO_EnablePinPullup+0x5a>
    1902:	3f c0       	rjmp	.+126    	; 0x1982 <DIO_EnablePinPullup+0xd8>
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	91 05       	cpc	r25, r1
    190c:	09 f4       	brne	.+2      	; 0x1910 <DIO_EnablePinPullup+0x66>
    190e:	55 c0       	rjmp	.+170    	; 0x19ba <DIO_EnablePinPullup+0x110>
    1910:	70 c0       	rjmp	.+224    	; 0x19f2 <DIO_EnablePinPullup+0x148>
			case PORTA:
				if (READ_REG(DDRA_Register) == PIN_INPUT) {
    1912:	ea e3       	ldi	r30, 0x3A	; 58
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	88 23       	and	r24, r24
    191a:	a1 f4       	brne	.+40     	; 0x1944 <DIO_EnablePinPullup+0x9a>
					SET_BIT(PORTA_Register, PinNo);
    191c:	ab e3       	ldi	r26, 0x3B	; 59
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	eb e3       	ldi	r30, 0x3B	; 59
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_EnablePinPullup+0x90>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <DIO_EnablePinPullup+0x8c>
    193e:	84 2b       	or	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	5c c0       	rjmp	.+184    	; 0x19fc <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	59 c0       	rjmp	.+178    	; 0x19fc <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTB:
				if (READ_REG(DDRB_Register) == PIN_INPUT) {
    194a:	e7 e3       	ldi	r30, 0x37	; 55
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	88 23       	and	r24, r24
    1952:	a1 f4       	brne	.+40     	; 0x197c <DIO_EnablePinPullup+0xd2>
					SET_BIT(PORTB_Register, PinNo);
    1954:	a8 e3       	ldi	r26, 0x38	; 56
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e8 e3       	ldi	r30, 0x38	; 56
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_EnablePinPullup+0xc8>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_EnablePinPullup+0xc4>
    1976:	84 2b       	or	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	40 c0       	rjmp	.+128    	; 0x19fc <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	3d c0       	rjmp	.+122    	; 0x19fc <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTC:
				if (READ_REG(DDRC_Register) == PIN_INPUT) {
    1982:	e4 e3       	ldi	r30, 0x34	; 52
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	88 23       	and	r24, r24
    198a:	a1 f4       	brne	.+40     	; 0x19b4 <DIO_EnablePinPullup+0x10a>
					SET_BIT(PORTC_Register, PinNo);
    198c:	a5 e3       	ldi	r26, 0x35	; 53
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_EnablePinPullup+0x100>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_EnablePinPullup+0xfc>
    19ae:	84 2b       	or	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	24 c0       	rjmp	.+72     	; 0x19fc <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	21 c0       	rjmp	.+66     	; 0x19fc <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTD:
				if (READ_REG(DDRD_Register) == PIN_INPUT) {
    19ba:	e1 e3       	ldi	r30, 0x31	; 49
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	88 23       	and	r24, r24
    19c2:	a1 f4       	brne	.+40     	; 0x19ec <DIO_EnablePinPullup+0x142>
					SET_BIT(PORTD_Register, PinNo);
    19c4:	a2 e3       	ldi	r26, 0x32	; 50
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e2 e3       	ldi	r30, 0x32	; 50
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <DIO_EnablePinPullup+0x138>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <DIO_EnablePinPullup+0x134>
    19e6:	84 2b       	or	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <DIO_EnablePinPullup+0x152>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <DIO_EnablePinPullup+0x152>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <APP_Init>:
#include "APP.h"

uint8_t character = 0;

void APP_Init()
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORTA, PIN0, PIN_OUTPUT);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, PIN1, PIN_OUTPUT);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, PIN2, PIN_OUTPUT);
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	62 e0       	ldi	r22, 0x02	; 2
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, PIN3, PIN_OUTPUT);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	63 e0       	ldi	r22, 0x03	; 3
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, PIN4, PIN_OUTPUT);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	64 e0       	ldi	r22, 0x04	; 4
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, PIN5, PIN_OUTPUT);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	65 e0       	ldi	r22, 0x05	; 5
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, PIN6, PIN_OUTPUT);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	66 e0       	ldi	r22, 0x06	; 6
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, PIN7, PIN_OUTPUT);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	67 e0       	ldi	r22, 0x07	; 7
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_SetPinDirection>
	UART_Init(UARTChannel_1);
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
	TWI_Init(TWI_Channel_1);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	0e 94 25 03 	call	0x64a	; 0x64a <TWI_Init>
	TWI_EnableACK();
    1a72:	0e 94 ba 04 	call	0x974	; 0x974 <TWI_EnableACK>
}
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <APP_Start>:
void APP_Start()
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
		if(TWI_GetStatus() == TW_SR_SLA_ACK)
    1a84:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1a88:	80 36       	cpi	r24, 0x60	; 96
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <APP_Start+0x12>
    1a8c:	8f c0       	rjmp	.+286    	; 0x1bac <APP_Start+0x130>
		{
			while(TWI_ReadDataWithACK(TWI_Channel_1,&character)!=OperationSuccess);
    1a8e:	2c e6       	ldi	r18, 0x6C	; 108
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	b9 01       	movw	r22, r18
    1a96:	0e 94 51 03 	call	0x6a2	; 0x6a2 <TWI_ReadDataWithACK>
    1a9a:	88 23       	and	r24, r24
    1a9c:	c1 f7       	brne	.-16     	; 0x1a8e <APP_Start+0x12>
			if (TWI_GetStatus() == TW_SR_DATA_ACK)
    1a9e:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1aa2:	80 38       	cpi	r24, 0x80	; 128
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <APP_Start+0x2c>
    1aa6:	82 c0       	rjmp	.+260    	; 0x1bac <APP_Start+0x130>
			{
				DIO_WritePin(PORTA, PIN0, READ_BIT(character, 0));
    1aa8:	80 91 6c 00 	lds	r24, 0x006C
    1aac:	98 2f       	mov	r25, r24
    1aae:	91 70       	andi	r25, 0x01	; 1
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	49 2f       	mov	r20, r25
    1ab6:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_WritePin>
				DIO_WritePin(PORTA, PIN1, READ_BIT(character, 1));
    1aba:	80 91 6c 00 	lds	r24, 0x006C
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	82 70       	andi	r24, 0x02	; 2
    1ac4:	90 70       	andi	r25, 0x00	; 0
    1ac6:	95 95       	asr	r25
    1ac8:	87 95       	ror	r24
    1aca:	98 2f       	mov	r25, r24
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	49 2f       	mov	r20, r25
    1ad2:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_WritePin>
				DIO_WritePin(PORTA, PIN2, READ_BIT(character, 2));
    1ad6:	80 91 6c 00 	lds	r24, 0x006C
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	84 70       	andi	r24, 0x04	; 4
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	95 95       	asr	r25
    1ae4:	87 95       	ror	r24
    1ae6:	95 95       	asr	r25
    1ae8:	87 95       	ror	r24
    1aea:	98 2f       	mov	r25, r24
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	62 e0       	ldi	r22, 0x02	; 2
    1af0:	49 2f       	mov	r20, r25
    1af2:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_WritePin>
				DIO_WritePin(PORTA, PIN3, READ_BIT(character, 3));
    1af6:	80 91 6c 00 	lds	r24, 0x006C
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	88 70       	andi	r24, 0x08	; 8
    1b00:	90 70       	andi	r25, 0x00	; 0
    1b02:	95 95       	asr	r25
    1b04:	87 95       	ror	r24
    1b06:	95 95       	asr	r25
    1b08:	87 95       	ror	r24
    1b0a:	95 95       	asr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	98 2f       	mov	r25, r24
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	63 e0       	ldi	r22, 0x03	; 3
    1b14:	49 2f       	mov	r20, r25
    1b16:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_WritePin>
				DIO_WritePin(PORTA, PIN4, READ_BIT(character, 4));
    1b1a:	80 91 6c 00 	lds	r24, 0x006C
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	80 71       	andi	r24, 0x10	; 16
    1b24:	90 70       	andi	r25, 0x00	; 0
    1b26:	95 95       	asr	r25
    1b28:	87 95       	ror	r24
    1b2a:	95 95       	asr	r25
    1b2c:	87 95       	ror	r24
    1b2e:	95 95       	asr	r25
    1b30:	87 95       	ror	r24
    1b32:	95 95       	asr	r25
    1b34:	87 95       	ror	r24
    1b36:	98 2f       	mov	r25, r24
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	64 e0       	ldi	r22, 0x04	; 4
    1b3c:	49 2f       	mov	r20, r25
    1b3e:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_WritePin>
				DIO_WritePin(PORTA, PIN5, READ_BIT(character, 5));
    1b42:	80 91 6c 00 	lds	r24, 0x006C
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	80 72       	andi	r24, 0x20	; 32
    1b4c:	90 70       	andi	r25, 0x00	; 0
    1b4e:	95 95       	asr	r25
    1b50:	87 95       	ror	r24
    1b52:	95 95       	asr	r25
    1b54:	87 95       	ror	r24
    1b56:	95 95       	asr	r25
    1b58:	87 95       	ror	r24
    1b5a:	95 95       	asr	r25
    1b5c:	87 95       	ror	r24
    1b5e:	95 95       	asr	r25
    1b60:	87 95       	ror	r24
    1b62:	98 2f       	mov	r25, r24
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	65 e0       	ldi	r22, 0x05	; 5
    1b68:	49 2f       	mov	r20, r25
    1b6a:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_WritePin>
				DIO_WritePin(PORTA, PIN6, READ_BIT(character, 6));
    1b6e:	80 91 6c 00 	lds	r24, 0x006C
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	80 74       	andi	r24, 0x40	; 64
    1b78:	90 70       	andi	r25, 0x00	; 0
    1b7a:	08 2e       	mov	r0, r24
    1b7c:	89 2f       	mov	r24, r25
    1b7e:	00 0c       	add	r0, r0
    1b80:	88 1f       	adc	r24, r24
    1b82:	99 0b       	sbc	r25, r25
    1b84:	00 0c       	add	r0, r0
    1b86:	88 1f       	adc	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	66 e0       	ldi	r22, 0x06	; 6
    1b90:	49 2f       	mov	r20, r25
    1b92:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_WritePin>
				DIO_WritePin(PORTA, PIN7, READ_BIT(character, 7));
    1b96:	80 91 6c 00 	lds	r24, 0x006C
    1b9a:	98 2f       	mov	r25, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	99 27       	eor	r25, r25
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	67 e0       	ldi	r22, 0x07	; 7
    1ba6:	49 2f       	mov	r20, r25
    1ba8:	0e 94 45 08 	call	0x108a	; 0x108a <DIO_WritePin>
			}
		}


}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <main>:
#include "MCAL/UART/UART.h"
#include "MCAL/TWI/TWI.h"
#include "APP/APP.h"

int main()
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	APP_Init();
    1bba:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <APP_Init>
	while (1) {
		APP_Start();
    1bbe:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <APP_Start>
    1bc2:	fd cf       	rjmp	.-6      	; 0x1bbe <main+0xc>

00001bc4 <_exit>:
    1bc4:	f8 94       	cli

00001bc6 <__stop_program>:
    1bc6:	ff cf       	rjmp	.-2      	; 0x1bc6 <__stop_program>
