
DesignImplementDriverForTWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000b38  00000bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800082  00800082  00000bee  2**0
                  ALLOC
  3 .stab         000017c4  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000914  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_13>
  38:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_14>
  3c:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 91 05 	call	0xb22	; 0xb22 <main>
  8a:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
void static (*UART_TX_Complete_callback)(void)=NULL;
void __vector_13(void)__attribute__((signal,used));//RX_complete
void __vector_14(void)__attribute__((signal,used));//UDRE Empty
void __vector_15(void)__attribute__((signal,used));//TX_complete
//void static (*PtrToFunction)(void);
uint8_t UART_Init(uint8_t UartNumber) {
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <UART_Init+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	89 83       	std	Y+1, r24	; 0x01
	if (UartNumber > NumOfUARTChannels) {
  a2:	8a 81       	ldd	r24, Y+2	; 0x02
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	18 f0       	brcs	.+6      	; 0xae <UART_Init+0x1c>
		//error uart channel out of range
		ErrRetVal = Unavailable_UART_Channel;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	67 c0       	rjmp	.+206    	; 0x17c <UART_Init+0xea>
	} else {
		/* configure control and status register A
		 * (double transmission speed & Multi-processor communication mode) */
		MODIFY_REG(UART_ControlStatusRegA, UART_DoubleTransmissionSpeed_MSK,
  ae:	ab e2       	ldi	r26, 0x2B	; 43
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	eb e2       	ldi	r30, 0x2B	; 43
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8c 93       	st	X, r24
				DoubleSpeedTransmission<<UART_DoubleTransmissionSpeed_BIT);
		MODIFY_REG(UART_ControlStatusRegA,
  bc:	ab e2       	ldi	r26, 0x2B	; 43
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	eb e2       	ldi	r30, 0x2B	; 43
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	8c 93       	st	X, r24
				UART_MultiProcessorCommunicationMode_MSK,
				MultiProcessCommunicationMode<<UART_MultiProcessorCommunicationMode_BIT);

		/* Setting Uart Data Size */
		MODIFY_REG(UART_ControlStatusRegB, UART_CharacterSizeBit_2_MSK,
  ca:	aa e2       	ldi	r26, 0x2A	; 42
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e2       	ldi	r30, 0x2A	; 42
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8b 7f       	andi	r24, 0xFB	; 251
  d6:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,2)<<UART_CharacterSizeBit_2_BIT);
		SET_BIT(UART_ControlStatusRegC, UART_RegisterSelect_BIT);
  d8:	a0 e4       	ldi	r26, 0x40	; 64
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e0 e4       	ldi	r30, 0x40	; 64
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8c 93       	st	X, r24
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_1_MSK,
  e6:	a0 e4       	ldi	r26, 0x40	; 64
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e0 e4       	ldi	r30, 0x40	; 64
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,1)<<UART_CharacterSizeBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_0_MSK,
  f4:	a0 e4       	ldi	r26, 0x40	; 64
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e0 e4       	ldi	r30, 0x40	; 64
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,0)<<UART_CharacterSizeBit_0_BIT);

		/* setting Stop Bit */
		MODIFY_REG(UART_ControlStatusRegC, UART_StopBitSelect_MSK,
 102:	a0 e4       	ldi	r26, 0x40	; 64
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e0 e4       	ldi	r30, 0x40	; 64
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	8c 93       	st	X, r24
				StopBitMode<<UART_StopBitSelect_BIT);

		/* Setting Parity mode */
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_1_MSK,
 110:	a0 e4       	ldi	r26, 0x40	; 64
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e0 e4       	ldi	r30, 0x40	; 64
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	8c 93       	st	X, r24
				READ_BIT(ParityMode,1)<<UART_ParityModeSelectBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_0_MSK,
 11e:	a0 e4       	ldi	r26, 0x40	; 64
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e0 e4       	ldi	r30, 0x40	; 64
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 7e       	andi	r24, 0xEF	; 239
 12a:	8c 93       	st	X, r24
				READ_BIT(ParityMode,0)<<UART_ParityModeSelectBit_0_BIT);
		/* Setting communication mode (synch. or Asynch.)*/
		MODIFY_REG(UART_ControlStatusRegC, UART_SynchAsynchModeSelect_MSK,
 12c:	a0 e4       	ldi	r26, 0x40	; 64
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e0 e4       	ldi	r30, 0x40	; 64
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8c 93       	st	X, r24
				CommunicationMode<<UART_SynchAsynchModeSelect_BIT);

		/*Set Clock Poalrity*/
		// ignored as all our work is asynchronus communication mode.
		/*Set the value of baud rate register*/
		CLEAR_BIT(UART_BaudRateRegH,UART_RegisterSelect_BIT);
 13a:	a0 e4       	ldi	r26, 0x40	; 64
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e0 e4       	ldi	r30, 0x40	; 64
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 77       	andi	r24, 0x7F	; 127
 146:	8c 93       	st	X, r24
		MODIFY_REG(UART_BaudRateRegH, UART_BaudRateRegH_MSK, (BaudCalc(BaudRate)>>8)&0x0F);
 148:	a0 e4       	ldi	r26, 0x40	; 64
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e0 e4       	ldi	r30, 0x40	; 64
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 7f       	andi	r24, 0xF0	; 240
 154:	8c 93       	st	X, r24
		WRITE_REG(UART_BaudRateRegL,BaudCalc(BaudRate)&0xFF);
 156:	e9 e2       	ldi	r30, 0x29	; 41
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	87 e6       	ldi	r24, 0x67	; 103
 15c:	80 83       	st	Z, r24

		/* Enabling receiving and transmitting*/
		MODIFY_REG(UART_ControlStatusRegB, UART_ReceiveEnable_MSK,
 15e:	aa e2       	ldi	r26, 0x2A	; 42
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	ea e2       	ldi	r30, 0x2A	; 42
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	8c 93       	st	X, r24
				UART_ReceiveEnable_MSK);
		MODIFY_REG(UART_ControlStatusRegB, UART_TransmissionEnable_MSK,
 16c:	aa e2       	ldi	r26, 0x2A	; 42
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	ea e2       	ldi	r30, 0x2A	; 42
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 60       	ori	r24, 0x08	; 8
 178:	8c 93       	st	X, r24
				UART_TransmissionEnable_MSK);
		ErrRetVal = OperationSuccess;
 17a:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrRetVal;
 17c:	89 81       	ldd	r24, Y+1	; 0x01
}
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <UART_FlushReceiveBuffer>:
uint8_t UART_FlushReceiveBuffer(void) {
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	00 d0       	rcall	.+0      	; 0x18e <UART_FlushReceiveBuffer+0x6>
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flushedCharacter;
	flushedCharacter = UART_DataReg;
 196:	ec e2       	ldi	r30, 0x2C	; 44
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = OperationSuccess;
 19e:	1a 82       	std	Y+2, r1	; 0x02
	return ErrRetVal;
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

000001ac <UART_TransmitChar>:

uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <UART_TransmitChar+0x6>
 1b2:	0f 92       	push	r0
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	8a 83       	std	Y+2, r24	; 0x02
 1ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA, 5)) {
 1c0:	eb e2       	ldi	r30, 0x2B	; 43
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	80 72       	andi	r24, 0x20	; 32
 1cc:	90 70       	andi	r25, 0x00	; 0
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	95 95       	asr	r25
 1d4:	87 95       	ror	r24
 1d6:	95 95       	asr	r25
 1d8:	87 95       	ror	r24
 1da:	95 95       	asr	r25
 1dc:	87 95       	ror	r24
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <UART_TransmitChar+0x46>
		UART_DataReg= TxChar;
 1e6:	ec e2       	ldi	r30, 0x2C	; 44
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	8b 81       	ldd	r24, Y+3	; 0x03
 1ec:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
 1ee:	19 82       	std	Y+1, r1	; 0x01
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <UART_TransmitChar+0x4a>
	}
	else
	{
		ErrRetVal = Transmission_Fail;
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	00 d0       	rcall	.+0      	; 0x20a <UART_ReceiveChar+0x6>
 20a:	00 d0       	rcall	.+0      	; 0x20c <UART_ReceiveChar+0x8>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	8a 83       	std	Y+2, r24	; 0x02
 212:	7c 83       	std	Y+4, r23	; 0x04
 214:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA,7) == 1) {
 21a:	eb e2       	ldi	r30, 0x2B	; 43
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	88 1f       	adc	r24, r24
 222:	88 27       	eor	r24, r24
 224:	88 1f       	adc	r24, r24
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 70       	andi	r25, 0x00	; 0
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	91 05       	cpc	r25, r1
 230:	41 f4       	brne	.+16     	; 0x242 <UART_ReceiveChar+0x3e>
		*RxChar = UART_DataReg;
 232:	ec e2       	ldi	r30, 0x2C	; 44
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	eb 81       	ldd	r30, Y+3	; 0x03
 23a:	fc 81       	ldd	r31, Y+4	; 0x04
 23c:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
 23e:	19 82       	std	Y+1, r1	; 0x01
 240:	02 c0       	rjmp	.+4      	; 0x246 <UART_ReceiveChar+0x42>
	}
	else
	{
		ErrRetVal = Receiving_Fail;
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
 246:	89 81       	ldd	r24, Y+1	; 0x01
}
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <UART_TransmitString>:

uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	00 d0       	rcall	.+0      	; 0x25c <UART_TransmitString+0x6>
 25c:	00 d0       	rcall	.+0      	; 0x25e <UART_TransmitString+0x8>
 25e:	0f 92       	push	r0
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	8b 83       	std	Y+3, r24	; 0x03
 266:	7d 83       	std	Y+5, r23	; 0x05
 268:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
 26e:	19 82       	std	Y+1, r1	; 0x01
	while(iterator <= 255)
	{
		if(*TxString=='\0')
 270:	ec 81       	ldd	r30, Y+4	; 0x04
 272:	fd 81       	ldd	r31, Y+5	; 0x05
 274:	80 81       	ld	r24, Z
 276:	88 23       	and	r24, r24
 278:	81 f4       	brne	.+32     	; 0x29a <UART_TransmitString+0x44>
		{
			ErrRetVal=OperationSuccess;
 27a:	1a 82       	std	Y+2, r1	; 0x02
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	6d e0       	ldi	r22, 0x0D	; 13
 280:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
 284:	88 23       	and	r24, r24
 286:	d1 f7       	brne	.-12     	; 0x27c <UART_TransmitString+0x26>
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
			iterator++;
			TxString++;
		}
	}
	return ErrRetVal;
 288:	8a 81       	ldd	r24, Y+2	; 0x02
}
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	08 95       	ret
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
			break;
		}
		else
		{
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
 29a:	ec 81       	ldd	r30, Y+4	; 0x04
 29c:	fd 81       	ldd	r31, Y+5	; 0x05
 29e:	90 81       	ld	r25, Z
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	69 2f       	mov	r22, r25
 2a4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
 2a8:	88 23       	and	r24, r24
 2aa:	b9 f7       	brne	.-18     	; 0x29a <UART_TransmitString+0x44>
			iterator++;
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	9d 81       	ldd	r25, Y+5	; 0x05
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	9d 83       	std	Y+5, r25	; 0x05
 2ba:	8c 83       	std	Y+4, r24	; 0x04
 2bc:	d9 cf       	rjmp	.-78     	; 0x270 <UART_TransmitString+0x1a>

000002be <UART_ReceiveString>:
		}
	}
	return ErrRetVal;
}
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <UART_ReceiveString+0x6>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <UART_ReceiveString+0x8>
 2c6:	0f 92       	push	r0
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	8b 83       	std	Y+3, r24	; 0x03
 2ce:	7d 83       	std	Y+5, r23	; 0x05
 2d0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
 2d6:	19 82       	std	Y+1, r1	; 0x01
	while(iterator<=255)
	{
		if(UART_ReceiveChar(UartNumber,RxString)==OperationSuccess)
 2d8:	2c 81       	ldd	r18, Y+4	; 0x04
 2da:	3d 81       	ldd	r19, Y+5	; 0x05
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	b9 01       	movw	r22, r18
 2e0:	0e 94 02 01 	call	0x204	; 0x204 <UART_ReceiveChar>
 2e4:	88 23       	and	r24, r24
 2e6:	c1 f7       	brne	.-16     	; 0x2d8 <UART_ReceiveString+0x1a>
		{
			if(*RxString == '\r' || *RxString == '\n')
 2e8:	ec 81       	ldd	r30, Y+4	; 0x04
 2ea:	fd 81       	ldd	r31, Y+5	; 0x05
 2ec:	80 81       	ld	r24, Z
 2ee:	8d 30       	cpi	r24, 0x0D	; 13
 2f0:	29 f0       	breq	.+10     	; 0x2fc <UART_ReceiveString+0x3e>
 2f2:	ec 81       	ldd	r30, Y+4	; 0x04
 2f4:	fd 81       	ldd	r31, Y+5	; 0x05
 2f6:	80 81       	ld	r24, Z
 2f8:	8a 30       	cpi	r24, 0x0A	; 10
 2fa:	69 f4       	brne	.+26     	; 0x316 <UART_ReceiveString+0x58>
			{
				*RxString='\0';
 2fc:	ec 81       	ldd	r30, Y+4	; 0x04
 2fe:	fd 81       	ldd	r31, Y+5	; 0x05
 300:	10 82       	st	Z, r1
				ErrRetVal = OperationSuccess;
 302:	1a 82       	std	Y+2, r1	; 0x02
//		} else {
//			continue;
//		}
//	} while (iterator < 255);
////	*RxString='\0';
	return ErrRetVal;
 304:	8a 81       	ldd	r24, Y+2	; 0x02
}
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	08 95       	ret
				ErrRetVal = OperationSuccess;
				break;
			}
			else
			{
			RxString++;
 316:	8c 81       	ldd	r24, Y+4	; 0x04
 318:	9d 81       	ldd	r25, Y+5	; 0x05
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	9d 83       	std	Y+5, r25	; 0x05
 31e:	8c 83       	std	Y+4, r24	; 0x04
			iterator++;
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	d8 cf       	rjmp	.-80     	; 0x2d8 <UART_ReceiveString+0x1a>

00000328 <UART_EnableInterrupt>:
//	} while (iterator < 255);
////	*RxString='\0';
	return ErrRetVal;
}

uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
 328:	df 93       	push	r29
 32a:	cf 93       	push	r28
 32c:	00 d0       	rcall	.+0      	; 0x32e <UART_EnableInterrupt+0x6>
 32e:	00 d0       	rcall	.+0      	; 0x330 <UART_EnableInterrupt+0x8>
 330:	0f 92       	push	r0
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	8a 83       	std	Y+2, r24	; 0x02
 338:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
 33e:	af e5       	ldi	r26, 0x5F	; 95
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	ef e5       	ldi	r30, 0x5F	; 95
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 68       	ori	r24, 0x80	; 128
 34a:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	88 f5       	brcc	.+98     	; 0x3b4 <UART_EnableInterrupt+0x8c>
	{
		switch (UartInterruptType)
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	3d 83       	std	Y+5, r19	; 0x05
 35a:	2c 83       	std	Y+4, r18	; 0x04
 35c:	8c 81       	ldd	r24, Y+4	; 0x04
 35e:	9d 81       	ldd	r25, Y+5	; 0x05
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	91 05       	cpc	r25, r1
 364:	91 f0       	breq	.+36     	; 0x38a <UART_EnableInterrupt+0x62>
 366:	2c 81       	ldd	r18, Y+4	; 0x04
 368:	3d 81       	ldd	r19, Y+5	; 0x05
 36a:	22 30       	cpi	r18, 0x02	; 2
 36c:	31 05       	cpc	r19, r1
 36e:	b1 f0       	breq	.+44     	; 0x39c <UART_EnableInterrupt+0x74>
 370:	8c 81       	ldd	r24, Y+4	; 0x04
 372:	9d 81       	ldd	r25, Y+5	; 0x05
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	d9 f4       	brne	.+54     	; 0x3ae <UART_EnableInterrupt+0x86>
		{
		case RxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
 378:	aa e2       	ldi	r26, 0x2A	; 42
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	ea e2       	ldi	r30, 0x2A	; 42
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	80 68       	ori	r24, 0x80	; 128
 384:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_MSK,
					UART_ReceiveCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
 386:	19 82       	std	Y+1, r1	; 0x01
 388:	17 c0       	rjmp	.+46     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		case DataBufferEmptyInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
 38a:	aa e2       	ldi	r26, 0x2A	; 42
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	ea e2       	ldi	r30, 0x2A	; 42
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	80 62       	ori	r24, 0x20	; 32
 396:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_MSK,
					UART_DataRegisterEmptyInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
 398:	19 82       	std	Y+1, r1	; 0x01
 39a:	0e c0       	rjmp	.+28     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		case TxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
 39c:	aa e2       	ldi	r26, 0x2A	; 42
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	ea e2       	ldi	r30, 0x2A	; 42
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	80 64       	ori	r24, 0x40	; 64
 3a8:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_MSK,
					UART_TransmissionCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
 3aa:	19 82       	std	Y+1, r1	; 0x01
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		default:
			ErrRetVal = Interrupt_Enabling_Fail;
 3ae:	89 e0       	ldi	r24, 0x09	; 9
 3b0:	89 83       	std	Y+1, r24	; 0x01
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <UART_EnableInterrupt+0x90>
		}
	}
	else
	{
		ErrRetVal = Interrupt_Enabling_Fail;
 3b4:	89 e0       	ldi	r24, 0x09	; 9
 3b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	cf 91       	pop	r28
 3c6:	df 91       	pop	r29
 3c8:	08 95       	ret

000003ca <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <UART_DisableInterrupt+0x6>
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <UART_DisableInterrupt+0x8>
 3d2:	0f 92       	push	r0
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	8a 83       	std	Y+2, r24	; 0x02
 3da:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	83 30       	cpi	r24, 0x03	; 3
 3e4:	88 f5       	brcc	.+98     	; 0x448 <UART_DisableInterrupt+0x7e>
		{
			switch (UartInterruptType)
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	3d 83       	std	Y+5, r19	; 0x05
 3ee:	2c 83       	std	Y+4, r18	; 0x04
 3f0:	8c 81       	ldd	r24, Y+4	; 0x04
 3f2:	9d 81       	ldd	r25, Y+5	; 0x05
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	91 05       	cpc	r25, r1
 3f8:	91 f0       	breq	.+36     	; 0x41e <UART_DisableInterrupt+0x54>
 3fa:	2c 81       	ldd	r18, Y+4	; 0x04
 3fc:	3d 81       	ldd	r19, Y+5	; 0x05
 3fe:	22 30       	cpi	r18, 0x02	; 2
 400:	31 05       	cpc	r19, r1
 402:	b1 f0       	breq	.+44     	; 0x430 <UART_DisableInterrupt+0x66>
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	9d 81       	ldd	r25, Y+5	; 0x05
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	d9 f4       	brne	.+54     	; 0x442 <UART_DisableInterrupt+0x78>
			{
			case RxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
 40c:	aa e2       	ldi	r26, 0x2A	; 42
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	ea e2       	ldi	r30, 0x2A	; 42
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	8f 77       	andi	r24, 0x7F	; 127
 418:	8c 93       	st	X, r24
						UART_ReceiveCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
 41a:	19 82       	std	Y+1, r1	; 0x01
 41c:	17 c0       	rjmp	.+46     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			case DataBufferEmptyInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
 41e:	aa e2       	ldi	r26, 0x2A	; 42
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	ea e2       	ldi	r30, 0x2A	; 42
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	8f 7d       	andi	r24, 0xDF	; 223
 42a:	8c 93       	st	X, r24
						UART_DataRegisterEmptyInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
 42c:	19 82       	std	Y+1, r1	; 0x01
 42e:	0e c0       	rjmp	.+28     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			case TxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
 430:	aa e2       	ldi	r26, 0x2A	; 42
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	ea e2       	ldi	r30, 0x2A	; 42
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	8f 7b       	andi	r24, 0xBF	; 191
 43c:	8c 93       	st	X, r24
						UART_TransmissionCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
 43e:	19 82       	std	Y+1, r1	; 0x01
 440:	05 c0       	rjmp	.+10     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			default:
				ErrRetVal = Interrupt_Disabling_Fail;
 442:	88 e0       	ldi	r24, 0x08	; 8
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	02 c0       	rjmp	.+4      	; 0x44c <UART_DisableInterrupt+0x82>
			}
		}
		else
		{
			ErrRetVal = Interrupt_Disabling_Fail;
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	89 83       	std	Y+1, r24	; 0x01
		}
	return ErrRetVal;
 44c:	89 81       	ldd	r24, Y+1	; 0x01
}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	cf 91       	pop	r28
 45a:	df 91       	pop	r29
 45c:	08 95       	ret

0000045e <UART_Set_RX_CompleteCallback>:

uint8_t UART_Set_RX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	00 d0       	rcall	.+0      	; 0x464 <UART_Set_RX_CompleteCallback+0x6>
 464:	00 d0       	rcall	.+0      	; 0x466 <UART_Set_RX_CompleteCallback+0x8>
 466:	0f 92       	push	r0
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
 46c:	8a 83       	std	Y+2, r24	; 0x02
 46e:	6b 83       	std	Y+3, r22	; 0x03
 470:	5d 83       	std	Y+5, r21	; 0x05
 472:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
 474:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
 476:	8c 81       	ldd	r24, Y+4	; 0x04
 478:	9d 81       	ldd	r25, Y+5	; 0x05
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	31 f0       	breq	.+12     	; 0x48a <UART_Set_RX_CompleteCallback+0x2c>
		UART_RX_Complete_callback = callBack;
 47e:	8c 81       	ldd	r24, Y+4	; 0x04
 480:	9d 81       	ldd	r25, Y+5	; 0x05
 482:	90 93 83 00 	sts	0x0083, r25
 486:	80 93 82 00 	sts	0x0082, r24
	return ErrRetVal;
 48a:	89 81       	ldd	r24, Y+1	; 0x01
}
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	cf 91       	pop	r28
 498:	df 91       	pop	r29
 49a:	08 95       	ret

0000049c <UART_UDRE_Empty_CompleteCallback>:
uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
 49c:	df 93       	push	r29
 49e:	cf 93       	push	r28
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <UART_UDRE_Empty_CompleteCallback+0x6>
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <UART_UDRE_Empty_CompleteCallback+0x8>
 4a4:	0f 92       	push	r0
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	8a 83       	std	Y+2, r24	; 0x02
 4ac:	6b 83       	std	Y+3, r22	; 0x03
 4ae:	5d 83       	std	Y+5, r21	; 0x05
 4b0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
 4b2:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	9d 81       	ldd	r25, Y+5	; 0x05
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	31 f0       	breq	.+12     	; 0x4c8 <UART_UDRE_Empty_CompleteCallback+0x2c>
		UART_UDRE_Empty_callback = callBack;
 4bc:	8c 81       	ldd	r24, Y+4	; 0x04
 4be:	9d 81       	ldd	r25, Y+5	; 0x05
 4c0:	90 93 85 00 	sts	0x0085, r25
 4c4:	80 93 84 00 	sts	0x0084, r24
	return ErrRetVal;
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
}
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	cf 91       	pop	r28
 4d6:	df 91       	pop	r29
 4d8:	08 95       	ret

000004da <UART_Set_TX_CompleteCallback>:
uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
 4da:	df 93       	push	r29
 4dc:	cf 93       	push	r28
 4de:	00 d0       	rcall	.+0      	; 0x4e0 <UART_Set_TX_CompleteCallback+0x6>
 4e0:	00 d0       	rcall	.+0      	; 0x4e2 <UART_Set_TX_CompleteCallback+0x8>
 4e2:	0f 92       	push	r0
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	8a 83       	std	Y+2, r24	; 0x02
 4ea:	6b 83       	std	Y+3, r22	; 0x03
 4ec:	5d 83       	std	Y+5, r21	; 0x05
 4ee:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
 4f0:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
 4f2:	8c 81       	ldd	r24, Y+4	; 0x04
 4f4:	9d 81       	ldd	r25, Y+5	; 0x05
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	31 f0       	breq	.+12     	; 0x506 <UART_Set_TX_CompleteCallback+0x2c>
		UART_TX_Complete_callback = callBack;
 4fa:	8c 81       	ldd	r24, Y+4	; 0x04
 4fc:	9d 81       	ldd	r25, Y+5	; 0x05
 4fe:	90 93 87 00 	sts	0x0087, r25
 502:	80 93 86 00 	sts	0x0086, r24
	return ErrRetVal;
 506:	89 81       	ldd	r24, Y+1	; 0x01
}
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	cf 91       	pop	r28
 514:	df 91       	pop	r29
 516:	08 95       	ret

00000518 <__vector_13>:

void __vector_13(void)
{
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
 53a:	df 93       	push	r29
 53c:	cf 93       	push	r28
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Complete_callback != NULL)
 542:	80 91 82 00 	lds	r24, 0x0082
 546:	90 91 83 00 	lds	r25, 0x0083
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	29 f0       	breq	.+10     	; 0x558 <__vector_13+0x40>
		UART_RX_Complete_callback();
 54e:	e0 91 82 00 	lds	r30, 0x0082
 552:	f0 91 83 00 	lds	r31, 0x0083
 556:	09 95       	icall
}
 558:	cf 91       	pop	r28
 55a:	df 91       	pop	r29
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <__vector_14>:
void __vector_14(void)
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	2f 93       	push	r18
 58a:	3f 93       	push	r19
 58c:	4f 93       	push	r20
 58e:	5f 93       	push	r21
 590:	6f 93       	push	r22
 592:	7f 93       	push	r23
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
	if (UART_UDRE_Empty_callback != NULL)
 5a8:	80 91 84 00 	lds	r24, 0x0084
 5ac:	90 91 85 00 	lds	r25, 0x0085
 5b0:	00 97       	sbiw	r24, 0x00	; 0
 5b2:	29 f0       	breq	.+10     	; 0x5be <__vector_14+0x40>
		UART_UDRE_Empty_callback();
 5b4:	e0 91 84 00 	lds	r30, 0x0084
 5b8:	f0 91 85 00 	lds	r31, 0x0085
 5bc:	09 95       	icall
}
 5be:	cf 91       	pop	r28
 5c0:	df 91       	pop	r29
 5c2:	ff 91       	pop	r31
 5c4:	ef 91       	pop	r30
 5c6:	bf 91       	pop	r27
 5c8:	af 91       	pop	r26
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	7f 91       	pop	r23
 5d0:	6f 91       	pop	r22
 5d2:	5f 91       	pop	r21
 5d4:	4f 91       	pop	r20
 5d6:	3f 91       	pop	r19
 5d8:	2f 91       	pop	r18
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

000005e4 <__vector_15>:
void __vector_15(void)
{
 5e4:	1f 92       	push	r1
 5e6:	0f 92       	push	r0
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	0f 92       	push	r0
 5ec:	11 24       	eor	r1, r1
 5ee:	2f 93       	push	r18
 5f0:	3f 93       	push	r19
 5f2:	4f 93       	push	r20
 5f4:	5f 93       	push	r21
 5f6:	6f 93       	push	r22
 5f8:	7f 93       	push	r23
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	af 93       	push	r26
 600:	bf 93       	push	r27
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
 606:	df 93       	push	r29
 608:	cf 93       	push	r28
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Complete_callback != NULL)
 60e:	80 91 86 00 	lds	r24, 0x0086
 612:	90 91 87 00 	lds	r25, 0x0087
 616:	00 97       	sbiw	r24, 0x00	; 0
 618:	29 f0       	breq	.+10     	; 0x624 <__vector_15+0x40>
		UART_TX_Complete_callback();
 61a:	e0 91 86 00 	lds	r30, 0x0086
 61e:	f0 91 87 00 	lds	r31, 0x0087
 622:	09 95       	icall
}
 624:	cf 91       	pop	r28
 626:	df 91       	pop	r29
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	7f 91       	pop	r23
 636:	6f 91       	pop	r22
 638:	5f 91       	pop	r21
 63a:	4f 91       	pop	r20
 63c:	3f 91       	pop	r19
 63e:	2f 91       	pop	r18
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <TWI_Init>:
/*static functions*/
static void TWI_SetClk(void);


uint8_t TWI_Init(uint8_t TWI_channel)
{
 64a:	df 93       	push	r29
 64c:	cf 93       	push	r28
 64e:	00 d0       	rcall	.+0      	; 0x650 <TWI_Init+0x6>
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	89 83       	std	Y+1, r24	; 0x01

	/*setting control register to default value*/
	WRITE_REG(TWI_ControlRegister, ResgisterDefaultVal);
 65a:	e6 e5       	ldi	r30, 0x56	; 86
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	10 82       	st	Z, r1

	/*Set TWI CLK (SCL)*/
	TWI_SetClk();
 660:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <TWI_SetClk>

	/*Set the Device Address*/
	TWI_AddressRegister = (deviceAddress<<1);
 664:	e2 e2       	ldi	r30, 0x22	; 34
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	8a ea       	ldi	r24, 0xAA	; 170
 66a:	80 83       	st	Z, r24

	/*Enable or Disable general call*/
	if(GeneralCallRecognition==Enabled)
	{
		SET_BIT(TWI_AddressRegister,TWI_GeneralCallRecognitionEnable_BIT);
 66c:	a2 e2       	ldi	r26, 0x22	; 34
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	e2 e2       	ldi	r30, 0x22	; 34
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	81 60       	ori	r24, 0x01	; 1
 678:	8c 93       	st	X, r24
	{
		CLEAR_BIT(TWI_AddressRegister,TWI_GeneralCallRecognitionEnable_BIT);
	}

	/*clear the interrupt flag*/
	SET_BIT(TWI_ControlRegister,TWI_InterruptFlag_BIT);
 67a:	a6 e5       	ldi	r26, 0x56	; 86
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	e6 e5       	ldi	r30, 0x56	; 86
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	80 68       	ori	r24, 0x80	; 128
 686:	8c 93       	st	X, r24

	/*Enable TWI_Module*/
	SET_BIT(TWI_ControlRegister,TWI_ModuleEnable_BIT);
 688:	a6 e5       	ldi	r26, 0x56	; 86
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	e6 e5       	ldi	r30, 0x56	; 86
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	84 60       	ori	r24, 0x04	; 4
 694:	8c 93       	st	X, r24

	return ErrRetVal;
 696:	89 81       	ldd	r24, Y+1	; 0x01
}
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	cf 91       	pop	r28
 69e:	df 91       	pop	r29
 6a0:	08 95       	ret

000006a2 <TWI_ReadDataWithACK>:

uint8_t TWI_ReadDataWithACK(uint8_t TWI_channel, ptr_uint8_t Data)
{
 6a2:	df 93       	push	r29
 6a4:	cf 93       	push	r28
 6a6:	00 d0       	rcall	.+0      	; 0x6a8 <TWI_ReadDataWithACK+0x6>
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <TWI_ReadDataWithACK+0x8>
 6aa:	00 d0       	rcall	.+0      	; 0x6ac <TWI_ReadDataWithACK+0xa>
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	8a 83       	std	Y+2, r24	; 0x02
 6b2:	7c 83       	std	Y+4, r23	; 0x04
 6b4:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch(State)
 6ba:	80 91 7c 00 	lds	r24, 0x007C
 6be:	28 2f       	mov	r18, r24
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	3e 83       	std	Y+6, r19	; 0x06
 6c4:	2d 83       	std	Y+5, r18	; 0x05
 6c6:	8d 81       	ldd	r24, Y+5	; 0x05
 6c8:	9e 81       	ldd	r25, Y+6	; 0x06
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	91 05       	cpc	r25, r1
 6ce:	c1 f0       	breq	.+48     	; 0x700 <TWI_ReadDataWithACK+0x5e>
 6d0:	2d 81       	ldd	r18, Y+5	; 0x05
 6d2:	3e 81       	ldd	r19, Y+6	; 0x06
 6d4:	2f 3f       	cpi	r18, 0xFF	; 255
 6d6:	31 05       	cpc	r19, r1
 6d8:	19 f5       	brne	.+70     	; 0x720 <TWI_ReadDataWithACK+0x7e>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &=0x07;
 6da:	a6 e5       	ldi	r26, 0x56	; 86
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	e6 e5       	ldi	r30, 0x56	; 86
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	87 70       	andi	r24, 0x07	; 7
 6e6:	8c 93       	st	X, r24

		/*Set enable_acknowledgement bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
 6e8:	a6 e5       	ldi	r26, 0x56	; 86
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	e6 e5       	ldi	r30, 0x56	; 86
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	8f 70       	andi	r24, 0x0F	; 15
 6f4:	80 6c       	ori	r24, 0xC0	; 192
 6f6:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_EnableAcknowledge_MSK|TWI_InterruptFlag_MSK);

		/*changing the function state*/
		State = FlagLowForReadDataWithACK;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	80 93 7c 00 	sts	0x007C, r24
 6fe:	12 c0       	rjmp	.+36     	; 0x724 <TWI_ReadDataWithACK+0x82>
		break;
	/*Function's Ending State*/
	case FlagLowForReadDataWithACK:
		/*Checking if TWI-interrupt Flag is raised for Data Reading event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
 700:	e6 e5       	ldi	r30, 0x56	; 86
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	88 23       	and	r24, r24
 708:	6c f4       	brge	.+26     	; 0x724 <TWI_ReadDataWithACK+0x82>
		{
			/*Submit DATA received to the argument used for data return*/
			*Data=TWI_DataRegister;
 70a:	e3 e2       	ldi	r30, 0x23	; 35
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	eb 81       	ldd	r30, Y+3	; 0x03
 712:	fc 81       	ldd	r31, Y+4	; 0x04
 714:	80 83       	st	Z, r24

			/*reseting the Functions State*/
			State=OperationStarted;
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	80 93 7c 00 	sts	0x007C, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
 71c:	19 82       	std	Y+1, r1	; 0x01
 71e:	02 c0       	rjmp	.+4      	; 0x724 <TWI_ReadDataWithACK+0x82>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
 724:	89 81       	ldd	r24, Y+1	; 0x01
}
 726:	26 96       	adiw	r28, 0x06	; 6
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	f8 94       	cli
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	0f be       	out	0x3f, r0	; 63
 730:	cd bf       	out	0x3d, r28	; 61
 732:	cf 91       	pop	r28
 734:	df 91       	pop	r29
 736:	08 95       	ret

00000738 <TWI_ReadDataWithNACK>:

uint8_t TWI_ReadDataWithNACK(uint8_t TWI_channel, ptr_uint8_t Data)
{
 738:	df 93       	push	r29
 73a:	cf 93       	push	r28
 73c:	00 d0       	rcall	.+0      	; 0x73e <TWI_ReadDataWithNACK+0x6>
 73e:	00 d0       	rcall	.+0      	; 0x740 <TWI_ReadDataWithNACK+0x8>
 740:	00 d0       	rcall	.+0      	; 0x742 <TWI_ReadDataWithNACK+0xa>
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
 746:	8a 83       	std	Y+2, r24	; 0x02
 748:	7c 83       	std	Y+4, r23	; 0x04
 74a:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch(State)
 750:	80 91 7d 00 	lds	r24, 0x007D
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	3e 83       	std	Y+6, r19	; 0x06
 75a:	2d 83       	std	Y+5, r18	; 0x05
 75c:	8d 81       	ldd	r24, Y+5	; 0x05
 75e:	9e 81       	ldd	r25, Y+6	; 0x06
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	91 05       	cpc	r25, r1
 764:	b9 f0       	breq	.+46     	; 0x794 <TWI_ReadDataWithNACK+0x5c>
 766:	2d 81       	ldd	r18, Y+5	; 0x05
 768:	3e 81       	ldd	r19, Y+6	; 0x06
 76a:	2f 3f       	cpi	r18, 0xFF	; 255
 76c:	31 05       	cpc	r19, r1
 76e:	11 f5       	brne	.+68     	; 0x7b4 <TWI_ReadDataWithNACK+0x7c>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &=0x07;
 770:	a6 e5       	ldi	r26, 0x56	; 86
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	e6 e5       	ldi	r30, 0x56	; 86
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	87 70       	andi	r24, 0x07	; 7
 77c:	8c 93       	st	X, r24

		/*Clear interrupt flag manually*/
		SET_BIT(TWI_ControlRegister, TWI_InterruptFlag_BIT);
 77e:	a6 e5       	ldi	r26, 0x56	; 86
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e6 e5       	ldi	r30, 0x56	; 86
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	80 68       	ori	r24, 0x80	; 128
 78a:	8c 93       	st	X, r24

		/*changing the function state*/
		State = FlagLowForReadDataWithNACK;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	80 93 7d 00 	sts	0x007D, r24
 792:	12 c0       	rjmp	.+36     	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		break;
	/*Function's Ending State*/
	case FlagLowForReadDataWithNACK:
		/*Checking if TWI-interrupt Flag is raised for Data Reading event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
 794:	e6 e5       	ldi	r30, 0x56	; 86
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	88 23       	and	r24, r24
 79c:	6c f4       	brge	.+26     	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		{
			/*Submit DATA received to the argument used for data return*/
			*Data=TWI_DataRegister;
 79e:	e3 e2       	ldi	r30, 0x23	; 35
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	eb 81       	ldd	r30, Y+3	; 0x03
 7a6:	fc 81       	ldd	r31, Y+4	; 0x04
 7a8:	80 83       	st	Z, r24

			/*reseting the Functions State*/
			State=OperationStarted;
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	80 93 7d 00 	sts	0x007D, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
 7b0:	19 82       	std	Y+1, r1	; 0x01
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
 7b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 7ba:	26 96       	adiw	r28, 0x06	; 6
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	f8 94       	cli
 7c0:	de bf       	out	0x3e, r29	; 62
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	cd bf       	out	0x3d, r28	; 61
 7c6:	cf 91       	pop	r28
 7c8:	df 91       	pop	r29
 7ca:	08 95       	ret

000007cc <TWI_WriteData>:

uint8_t TWI_WriteData(uint8_t TWI_channel, uint8_t Data)
{
 7cc:	df 93       	push	r29
 7ce:	cf 93       	push	r28
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <TWI_WriteData+0x6>
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <TWI_WriteData+0x8>
 7d4:	0f 92       	push	r0
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	8a 83       	std	Y+2, r24	; 0x02
 7dc:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State)
 7e2:	80 91 7e 00 	lds	r24, 0x007E
 7e6:	28 2f       	mov	r18, r24
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	3d 83       	std	Y+5, r19	; 0x05
 7ec:	2c 83       	std	Y+4, r18	; 0x04
 7ee:	8c 81       	ldd	r24, Y+4	; 0x04
 7f0:	9d 81       	ldd	r25, Y+5	; 0x05
 7f2:	81 30       	cpi	r24, 0x01	; 1
 7f4:	91 05       	cpc	r25, r1
 7f6:	d9 f0       	breq	.+54     	; 0x82e <TWI_WriteData+0x62>
 7f8:	2c 81       	ldd	r18, Y+4	; 0x04
 7fa:	3d 81       	ldd	r19, Y+5	; 0x05
 7fc:	2f 3f       	cpi	r18, 0xFF	; 255
 7fe:	31 05       	cpc	r19, r1
 800:	01 f5       	brne	.+64     	; 0x842 <TWI_WriteData+0x76>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &= 0x07;
 802:	a6 e5       	ldi	r26, 0x56	; 86
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	e6 e5       	ldi	r30, 0x56	; 86
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	87 70       	andi	r24, 0x07	; 7
 80e:	8c 93       	st	X, r24

		/*set the data register*/
		TWI_DataRegister = Data;
 810:	e3 e2       	ldi	r30, 0x23	; 35
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	8b 81       	ldd	r24, Y+3	; 0x03
 816:	80 83       	st	Z, r24

		/*Clear interrupt flag manually*/
		SET_BIT(TWI_ControlRegister, TWI_InterruptFlag_BIT);
 818:	a6 e5       	ldi	r26, 0x56	; 86
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	e6 e5       	ldi	r30, 0x56	; 86
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	80 68       	ori	r24, 0x80	; 128
 824:	8c 93       	st	X, r24

		/*changing the function state*/
		State = FlagLowForWritingDataRegister;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	80 93 7e 00 	sts	0x007E, r24
 82c:	0c c0       	rjmp	.+24     	; 0x846 <TWI_WriteData+0x7a>
		break;
	/*Function's Ending State*/
	case FlagLowForWritingDataRegister:
		/*Checking if TWI-interrupt Flag is raised for Data Writing event*/
		if ((TWI_ControlRegister & TWI_InterruptFlag_MSK)) {
 82e:	e6 e5       	ldi	r30, 0x56	; 86
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	88 23       	and	r24, r24
 836:	3c f4       	brge	.+14     	; 0x846 <TWI_WriteData+0x7a>
			/*reseting the Functions State*/
			State = OperationStarted;
 838:	8f ef       	ldi	r24, 0xFF	; 255
 83a:	80 93 7e 00 	sts	0x007E, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal = OperationSuccess;
 83e:	19 82       	std	Y+1, r1	; 0x01
 840:	02 c0       	rjmp	.+4      	; 0x846 <TWI_WriteData+0x7a>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal = OperationFail;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
 846:	89 81       	ldd	r24, Y+1	; 0x01
}
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	0f 90       	pop	r0
 852:	cf 91       	pop	r28
 854:	df 91       	pop	r29
 856:	08 95       	ret

00000858 <TWI_SendStartCondition>:

uint8_t TWI_SendStartCondition(uint8_t TWI_channel)
{
 858:	df 93       	push	r29
 85a:	cf 93       	push	r28
 85c:	00 d0       	rcall	.+0      	; 0x85e <TWI_SendStartCondition+0x6>
 85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State)
 86a:	80 91 7f 00 	lds	r24, 0x007F
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	3c 83       	std	Y+4, r19	; 0x04
 874:	2b 83       	std	Y+3, r18	; 0x03
 876:	8b 81       	ldd	r24, Y+3	; 0x03
 878:	9c 81       	ldd	r25, Y+4	; 0x04
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	91 05       	cpc	r25, r1
 87e:	a9 f0       	breq	.+42     	; 0x8aa <__stack+0x4b>
 880:	2b 81       	ldd	r18, Y+3	; 0x03
 882:	3c 81       	ldd	r19, Y+4	; 0x04
 884:	2f 3f       	cpi	r18, 0xFF	; 255
 886:	31 05       	cpc	r19, r1
 888:	d1 f4       	brne	.+52     	; 0x8be <__stack+0x5f>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*Clearing bits of control register except TWI_Enable and TWI_Interrupt Bits*/
		TWI_ControlRegister=0x07;
 88a:	e6 e5       	ldi	r30, 0x56	; 86
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	87 e0       	ldi	r24, 0x07	; 7
 890:	80 83       	st	Z, r24

		/*Set start_condition bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
 892:	a6 e5       	ldi	r26, 0x56	; 86
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	e6 e5       	ldi	r30, 0x56	; 86
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	8f 70       	andi	r24, 0x0F	; 15
 89e:	80 6a       	ori	r24, 0xA0	; 160
 8a0:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_StartCondition_MSK|TWI_InterruptFlag_MSK);

		/*changing the function state*/
		State = StartConditionFiredInterruptFlagLow;
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	80 93 7f 00 	sts	0x007F, r24
 8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <__stack+0x63>
		break;
	/*Function's Ending State*/
	case StartConditionFiredInterruptFlagLow:
		/*Checking if TWI-interrupt Flag is raised for Starting event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
 8aa:	e6 e5       	ldi	r30, 0x56	; 86
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	88 23       	and	r24, r24
 8b2:	3c f4       	brge	.+14     	; 0x8c2 <__stack+0x63>
		{
			/*reseting the Functions State*/
			State=OperationStarted;
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	80 93 7f 00 	sts	0x007F, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
 8ba:	19 82       	std	Y+1, r1	; 0x01
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	0f 90       	pop	r0
 8ca:	0f 90       	pop	r0
 8cc:	cf 91       	pop	r28
 8ce:	df 91       	pop	r29
 8d0:	08 95       	ret

000008d2 <TWI_SendStopCondition>:

uint8_t TWI_SendStopCondition(uint8_t TWI_channel)
{
 8d2:	df 93       	push	r29
 8d4:	cf 93       	push	r28
 8d6:	00 d0       	rcall	.+0      	; 0x8d8 <TWI_SendStopCondition+0x6>
 8d8:	00 d0       	rcall	.+0      	; 0x8da <TWI_SendStopCondition+0x8>
 8da:	cd b7       	in	r28, 0x3d	; 61
 8dc:	de b7       	in	r29, 0x3e	; 62
 8de:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
 8e0:	8f ef       	ldi	r24, 0xFF	; 255
 8e2:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State) {
 8e4:	80 91 80 00 	lds	r24, 0x0080
 8e8:	28 2f       	mov	r18, r24
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	3c 83       	std	Y+4, r19	; 0x04
 8ee:	2b 83       	std	Y+3, r18	; 0x03
 8f0:	8b 81       	ldd	r24, Y+3	; 0x03
 8f2:	9c 81       	ldd	r25, Y+4	; 0x04
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	91 05       	cpc	r25, r1
 8f8:	a9 f0       	breq	.+42     	; 0x924 <TWI_SendStopCondition+0x52>
 8fa:	2b 81       	ldd	r18, Y+3	; 0x03
 8fc:	3c 81       	ldd	r19, Y+4	; 0x04
 8fe:	2f 3f       	cpi	r18, 0xFF	; 255
 900:	31 05       	cpc	r19, r1
 902:	f1 f4       	brne	.+60     	; 0x940 <TWI_SendStopCondition+0x6e>
	/*Function's Starting State*/
	case OperationStarted:
		/*Clearing bits of control register except TWI_Enable and TWI_Interrupt Bits*/
		TWI_ControlRegister = 0x07;
 904:	e6 e5       	ldi	r30, 0x56	; 86
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	87 e0       	ldi	r24, 0x07	; 7
 90a:	80 83       	st	Z, r24

		/*Setting The stop_condition bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
 90c:	a6 e5       	ldi	r26, 0x56	; 86
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	e6 e5       	ldi	r30, 0x56	; 86
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	8f 70       	andi	r24, 0x0F	; 15
 918:	80 69       	ori	r24, 0x90	; 144
 91a:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_StopCondition_MSK|TWI_InterruptFlag_MSK);

		/*Changing the State of the Function*/
		State=StopConditionFired;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	80 93 80 00 	sts	0x0080, r24
 922:	10 c0       	rjmp	.+32     	; 0x944 <TWI_SendStopCondition+0x72>
		break;
	/*Function's Ending State*/
	case StopConditionFired:
		/*checking if the Stop-condition Bit is reseted to zero or not*/
		if (!(TWI_ControlRegister & TWI_StopCondition_MSK)) {
 924:	e6 e5       	ldi	r30, 0x56	; 86
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	80 81       	ld	r24, Z
 92a:	88 2f       	mov	r24, r24
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	80 71       	andi	r24, 0x10	; 16
 930:	90 70       	andi	r25, 0x00	; 0
 932:	00 97       	sbiw	r24, 0x00	; 0
 934:	39 f4       	brne	.+14     	; 0x944 <TWI_SendStopCondition+0x72>
			/*reseting the Functions State*/
			State = OperationStarted;
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	80 93 80 00 	sts	0x0080, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal = OperationSuccess;
 93c:	19 82       	std	Y+1, r1	; 0x01
 93e:	02 c0       	rjmp	.+4      	; 0x944 <TWI_SendStopCondition+0x72>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal = OperationFail;
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
 944:	89 81       	ldd	r24, Y+1	; 0x01
}
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	0f 90       	pop	r0
 94e:	cf 91       	pop	r28
 950:	df 91       	pop	r29
 952:	08 95       	ret

00000954 <TWI_GetStatus>:

uint8_t TWI_GetStatus()
{
 954:	df 93       	push	r29
 956:	cf 93       	push	r28
 958:	0f 92       	push	r0
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
	uint8_t statusRegVal=0;
 95e:	19 82       	std	Y+1, r1	; 0x01
	statusRegVal = TWI_StatusRegister & TWI_Status_MSK;
 960:	e1 e2       	ldi	r30, 0x21	; 33
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	88 7f       	andi	r24, 0xF8	; 248
 968:	89 83       	std	Y+1, r24	; 0x01
	return	statusRegVal;
 96a:	89 81       	ldd	r24, Y+1	; 0x01
}
 96c:	0f 90       	pop	r0
 96e:	cf 91       	pop	r28
 970:	df 91       	pop	r29
 972:	08 95       	ret

00000974 <TWI_EnableACK>:

void TWI_EnableACK()
{
 974:	df 93       	push	r29
 976:	cf 93       	push	r28
 978:	cd b7       	in	r28, 0x3d	; 61
 97a:	de b7       	in	r29, 0x3e	; 62
	TWI_ControlRegister &=0x07;
 97c:	a6 e5       	ldi	r26, 0x56	; 86
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	e6 e5       	ldi	r30, 0x56	; 86
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	87 70       	andi	r24, 0x07	; 7
 988:	8c 93       	st	X, r24

	/*Set enable_acknowledgement bit and Clearing the interrupt flag*/
	MODIFY_REG(TWI_ControlRegister,
 98a:	a6 e5       	ldi	r26, 0x56	; 86
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	e6 e5       	ldi	r30, 0x56	; 86
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	8f 70       	andi	r24, 0x0F	; 15
 996:	80 6c       	ori	r24, 0xC0	; 192
 998:	8c 93       	st	X, r24
			TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
			TWI_EnableAcknowledge_MSK|TWI_InterruptFlag_MSK);
}
 99a:	cf 91       	pop	r28
 99c:	df 91       	pop	r29
 99e:	08 95       	ret

000009a0 <TWI_SetClk>:

static void TWI_SetClk(void)
{
 9a0:	df 93       	push	r29
 9a2:	cf 93       	push	r28
 9a4:	00 d0       	rcall	.+0      	; 0x9a6 <TWI_SetClk+0x6>
 9a6:	0f 92       	push	r0
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
 9ac:	19 82       	std	Y+1, r1	; 0x01
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	8a 83       	std	Y+2, r24	; 0x02
 9b2:	46 c0       	rjmp	.+140    	; 0xa40 <TWI_SetClk+0xa0>
	{
		for(TWBR=1; TWBR<=255; TWBR++)
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	8b 83       	std	Y+3, r24	; 0x03
		{
			if((TWBR*Prescalar)==ClockRatio)
 9b8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ba:	28 2f       	mov	r18, r24
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	8a 81       	ldd	r24, Y+2	; 0x02
 9c0:	88 2f       	mov	r24, r24
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	ac 01       	movw	r20, r24
 9c6:	24 9f       	mul	r18, r20
 9c8:	c0 01       	movw	r24, r0
 9ca:	25 9f       	mul	r18, r21
 9cc:	90 0d       	add	r25, r0
 9ce:	34 9f       	mul	r19, r20
 9d0:	90 0d       	add	r25, r0
 9d2:	11 24       	eor	r1, r1
 9d4:	80 32       	cpi	r24, 0x20	; 32
 9d6:	91 05       	cpc	r25, r1
 9d8:	31 f4       	brne	.+12     	; 0x9e6 <TWI_SetClk+0x46>
			{
				Flag=1;
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				continue;
			}
		}
		if(Flag==1)
 9de:	89 81       	ldd	r24, Y+1	; 0x01
 9e0:	81 30       	cpi	r24, 0x01	; 1
 9e2:	29 f0       	breq	.+10     	; 0x9ee <TWI_SetClk+0x4e>
 9e4:	15 c0       	rjmp	.+42     	; 0xa10 <TWI_SetClk+0x70>
{
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
	{
		for(TWBR=1; TWBR<=255; TWBR++)
 9e6:	8b 81       	ldd	r24, Y+3	; 0x03
 9e8:	8f 5f       	subi	r24, 0xFF	; 255
 9ea:	8b 83       	std	Y+3, r24	; 0x03
 9ec:	e5 cf       	rjmp	.-54     	; 0x9b8 <TWI_SetClk+0x18>
				continue;
			}
		}
		if(Flag==1)
		{
			TWI_BaudRateRegister=TWBR;
 9ee:	e0 e2       	ldi	r30, 0x20	; 32
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	80 83       	st	Z, r24
			MODIFY_REG(TWI_StatusRegister,TWI_Prescalar_MSK,Prescalar/4);
 9f6:	a1 e2       	ldi	r26, 0x21	; 33
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
 9fa:	e1 e2       	ldi	r30, 0x21	; 33
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	98 2f       	mov	r25, r24
 a02:	9c 7f       	andi	r25, 0xFC	; 252
 a04:	8a 81       	ldd	r24, Y+2	; 0x02
 a06:	86 95       	lsr	r24
 a08:	86 95       	lsr	r24
 a0a:	89 2b       	or	r24, r25
 a0c:	8c 93       	st	X, r24
 a0e:	1c c0       	rjmp	.+56     	; 0xa48 <TWI_SetClk+0xa8>
			break;
		}
		else if(TWBR==255 && Prescalar==64)
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	8f 3f       	cpi	r24, 0xFF	; 255
 a14:	69 f4       	brne	.+26     	; 0xa30 <TWI_SetClk+0x90>
 a16:	8a 81       	ldd	r24, Y+2	; 0x02
 a18:	80 34       	cpi	r24, 0x40	; 64
 a1a:	51 f4       	brne	.+20     	; 0xa30 <TWI_SetClk+0x90>
		{
			//required SCL isn't available.
			TWI_BaudRateRegister=0;
 a1c:	e0 e2       	ldi	r30, 0x20	; 32
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	10 82       	st	Z, r1
			MODIFY_REG(TWI_StatusRegister,TWI_Prescalar_MSK,0);
 a22:	a1 e2       	ldi	r26, 0x21	; 33
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	e1 e2       	ldi	r30, 0x21	; 33
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	8c 7f       	andi	r24, 0xFC	; 252
 a2e:	8c 93       	st	X, r24

static void TWI_SetClk(void)
{
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
 a30:	8a 81       	ldd	r24, Y+2	; 0x02
 a32:	88 2f       	mov	r24, r24
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	88 0f       	add	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	8a 83       	std	Y+2, r24	; 0x02
 a40:	8a 81       	ldd	r24, Y+2	; 0x02
 a42:	81 34       	cpi	r24, 0x41	; 65
 a44:	08 f4       	brcc	.+2      	; 0xa48 <TWI_SetClk+0xa8>
 a46:	b6 cf       	rjmp	.-148    	; 0x9b4 <TWI_SetClk+0x14>
		else
		{
			continue;
		}
	}
}
 a48:	0f 90       	pop	r0
 a4a:	0f 90       	pop	r0
 a4c:	0f 90       	pop	r0
 a4e:	cf 91       	pop	r28
 a50:	df 91       	pop	r29
 a52:	08 95       	ret

00000a54 <APP_Init>:

uint8_t character = 0;
uint8_t slaveaddress = 0x56;

void APP_Init()
{
 a54:	df 93       	push	r29
 a56:	cf 93       	push	r28
 a58:	cd b7       	in	r28, 0x3d	; 61
 a5a:	de b7       	in	r29, 0x3e	; 62
	UART_Init(UARTChannel_1);
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
	TWI_Init(TWI_Channel_1);
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	0e 94 25 03 	call	0x64a	; 0x64a <TWI_Init>
}
 a68:	cf 91       	pop	r28
 a6a:	df 91       	pop	r29
 a6c:	08 95       	ret

00000a6e <APP_Start>:
void APP_Start()
{
 a6e:	df 93       	push	r29
 a70:	cf 93       	push	r28
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
	/*Displaying A message to the user telling him to enter a charater*/
	while (UART_TransmitString(UARTChannel_1, (uint8_t*) "Please enter the character:")	!= OperationSuccess);
 a76:	20 e6       	ldi	r18, 0x60	; 96
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	b9 01       	movw	r22, r18
 a7e:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
 a82:	88 23       	and	r24, r24
 a84:	c1 f7       	brne	.-16     	; 0xa76 <APP_Start+0x8>
	/*Receiving the character entered by the user*/
	while (UART_ReceiveChar(UARTChannel_1, &character) != OperationSuccess);
 a86:	28 e8       	ldi	r18, 0x88	; 136
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	b9 01       	movw	r22, r18
 a8e:	0e 94 02 01 	call	0x204	; 0x204 <UART_ReceiveChar>
 a92:	88 23       	and	r24, r24
 a94:	c1 f7       	brne	.-16     	; 0xa86 <APP_Start+0x18>
	/*start from a new line*/
	while (UART_TransmitChar(UARTChannel_1, '\r') != OperationSuccess);
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	6d e0       	ldi	r22, 0x0D	; 13
 a9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
 a9e:	88 23       	and	r24, r24
 aa0:	d1 f7       	brne	.-12     	; 0xa96 <APP_Start+0x28>
	/*using TWI Start the character transmission to the Slave MCU*/
	while (TWI_SendStartCondition(TWI_Channel_1) != OperationSuccess);
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	0e 94 2c 04 	call	0x858	; 0x858 <TWI_SendStartCondition>
 aa8:	88 23       	and	r24, r24
 aaa:	d9 f7       	brne	.-10     	; 0xaa2 <APP_Start+0x34>
	/*Checking the status of start condition is fired correctly*/
	if (TWI_GetStatus() == TW_START)
 aac:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
 ab0:	88 30       	cpi	r24, 0x08	; 8
 ab2:	79 f5       	brne	.+94     	; 0xb12 <APP_Start+0xa4>
	{
		/*Sending Slave address with write bit*/
		while (TWI_WriteData(TWI_Channel_1, (slaveaddress << 1) & 0xFE) != OperationSuccess);
 ab4:	80 91 81 00 	lds	r24, 0x0081
 ab8:	88 2f       	mov	r24, r24
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	98 2f       	mov	r25, r24
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	69 2f       	mov	r22, r25
 ac6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_WriteData>
 aca:	88 23       	and	r24, r24
 acc:	99 f7       	brne	.-26     	; 0xab4 <APP_Start+0x46>
		/*checking status for slave address sent and acknowledge received*/
		if (TWI_GetStatus() == TW_MT_SLA_ACK)
 ace:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
 ad2:	88 31       	cpi	r24, 0x18	; 24
 ad4:	c1 f4       	brne	.+48     	; 0xb06 <APP_Start+0x98>
		{
			/*Sending the data bits of the character*/
			while (TWI_WriteData(TWI_Channel_1, character) != OperationSuccess);
 ad6:	90 91 88 00 	lds	r25, 0x0088
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	69 2f       	mov	r22, r25
 ade:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_WriteData>
 ae2:	88 23       	and	r24, r24
 ae4:	c1 f7       	brne	.-16     	; 0xad6 <APP_Start+0x68>
			/*Checking the Status For Data sent and acknowledge received*/
			if (TWI_GetStatus() == TW_MT_DATA_ACK)
 ae6:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
 aea:	88 32       	cpi	r24, 0x28	; 40
 aec:	31 f4       	brne	.+12     	; 0xafa <APP_Start+0x8c>
			{
				/*Terminating the transmission by sending stop condition*/
				while (TWI_SendStopCondition(TWI_Channel_1) != OperationSuccess);
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TWI_SendStopCondition>
 af4:	88 23       	and	r24, r24
 af6:	d9 f7       	brne	.-10     	; 0xaee <APP_Start+0x80>
 af8:	11 c0       	rjmp	.+34     	; 0xb1c <APP_Start+0xae>
			}
			else
			{
				/*Terminating the transmission by sending stop condition*/
				while (TWI_SendStopCondition(TWI_Channel_1) != OperationSuccess);
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TWI_SendStopCondition>
 b00:	88 23       	and	r24, r24
 b02:	d9 f7       	brne	.-10     	; 0xafa <APP_Start+0x8c>
 b04:	0b c0       	rjmp	.+22     	; 0xb1c <APP_Start+0xae>
			}
		}
		else
		{
			/*Terminating the transmission by sending stop condition*/
			while (TWI_SendStopCondition(TWI_Channel_1) != OperationSuccess);
 b06:	81 e0       	ldi	r24, 0x01	; 1
 b08:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TWI_SendStopCondition>
 b0c:	88 23       	and	r24, r24
 b0e:	d9 f7       	brne	.-10     	; 0xb06 <APP_Start+0x98>
 b10:	05 c0       	rjmp	.+10     	; 0xb1c <APP_Start+0xae>
		}
	}
	else
	{
		/*Terminating the transmission by sending stop condition*/
		while (TWI_SendStopCondition(TWI_Channel_1) != OperationSuccess);
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TWI_SendStopCondition>
 b18:	88 23       	and	r24, r24
 b1a:	d9 f7       	brne	.-10     	; 0xb12 <APP_Start+0xa4>
	}
}
 b1c:	cf 91       	pop	r28
 b1e:	df 91       	pop	r29
 b20:	08 95       	ret

00000b22 <main>:
#include "MCAL/UART/UART.h"
#include "MCAL/TWI/TWI.h"
#include "APP/APP.h"

int main()
{
 b22:	df 93       	push	r29
 b24:	cf 93       	push	r28
 b26:	cd b7       	in	r28, 0x3d	; 61
 b28:	de b7       	in	r29, 0x3e	; 62
	APP_Init();
 b2a:	0e 94 2a 05 	call	0xa54	; 0xa54 <APP_Init>
	while (1) {
		APP_Start();
 b2e:	0e 94 37 05 	call	0xa6e	; 0xa6e <APP_Start>
 b32:	fd cf       	rjmp	.-6      	; 0xb2e <main+0xc>

00000b34 <_exit>:
 b34:	f8 94       	cli

00000b36 <__stop_program>:
 b36:	ff cf       	rjmp	.-2      	; 0xb36 <__stop_program>
