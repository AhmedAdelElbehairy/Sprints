
ADCDriverForThermostateTask.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004766  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00004766  000047fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800192  00800192  0000492c  2**0
                  ALLOC
  3 .stab         00005400  00000000  00000000  0000492c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a24  00000000  00000000  00009d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000ba66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000d973  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000ea45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000fa78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000fede  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000107d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__vector_4>
      14:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__vector_10>
      2c:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_13>
      38:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_14>
      3c:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_15>
      40:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 23 	call	0x4638	; 0x4638 <main>
      8a:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 96 23 	jmp	0x472c	; 0x472c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 86 23 	jmp	0x470c	; 0x470c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 86 23 	jmp	0x470c	; 0x470c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 96 23 	jmp	0x472c	; 0x472c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 23 	jmp	0x4704	; 0x4704 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e7       	ldi	r22, 0x76	; 118
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 86 23 	jmp	0x470c	; 0x470c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 82 23 	jmp	0x4704	; 0x4704 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 9e 23 	jmp	0x473c	; 0x473c <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e2 58       	subi	r30, 0x82	; 130
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <UART_Init>:
static uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber,
		void (*callBack)(void));
static uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber,
		void (*callBack)(void));

uint8_t UART_Init(uint8_t UartNumber) {
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <UART_Init+0x6>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	89 83       	std	Y+1, r24	; 0x01
	if (UartNumber > NumOfUARTChannels) {
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	18 f0       	brcs	.+6      	; 0xd8a <UART_Init+0x1c>
		//error uart channel out of range
		ErrRetVal = Unavailable_UART_Channel;
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	67 c0       	rjmp	.+206    	; 0xe58 <UART_Init+0xea>
	} else {
		/* configure control and status register A
		 * (double transmission speed & Multi-processor communication mode) */
		MODIFY_REG(UART_ControlStatusRegA, UART_DoubleTransmissionSpeed_MSK,
     d8a:	ab e2       	ldi	r26, 0x2B	; 43
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e2       	ldi	r30, 0x2B	; 43
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	8c 93       	st	X, r24
				DoubleSpeedTransmission<<UART_DoubleTransmissionSpeed_BIT);
		MODIFY_REG(UART_ControlStatusRegA,
     d98:	ab e2       	ldi	r26, 0x2B	; 43
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e2       	ldi	r30, 0x2B	; 43
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	8c 93       	st	X, r24
				UART_MultiProcessorCommunicationMode_MSK,
				MultiProcessCommunicationMode<<UART_MultiProcessorCommunicationMode_BIT);

		/* Setting Uart Data Size */
		MODIFY_REG(UART_ControlStatusRegB, UART_CharacterSizeBit_2_MSK,
     da6:	aa e2       	ldi	r26, 0x2A	; 42
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ea e2       	ldi	r30, 0x2A	; 42
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8b 7f       	andi	r24, 0xFB	; 251
     db2:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,2)<<UART_CharacterSizeBit_2_BIT);
		SET_BIT(UART_ControlStatusRegC, UART_RegisterSelect_BIT);
     db4:	a0 e4       	ldi	r26, 0x40	; 64
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e0 e4       	ldi	r30, 0x40	; 64
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	8c 93       	st	X, r24
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_1_MSK,
     dc2:	a0 e4       	ldi	r26, 0x40	; 64
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e0 e4       	ldi	r30, 0x40	; 64
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	84 60       	ori	r24, 0x04	; 4
     dce:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,1)<<UART_CharacterSizeBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_0_MSK,
     dd0:	a0 e4       	ldi	r26, 0x40	; 64
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e0 e4       	ldi	r30, 0x40	; 64
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,0)<<UART_CharacterSizeBit_0_BIT);

		/* setting Stop Bit */
		MODIFY_REG(UART_ControlStatusRegC, UART_StopBitSelect_MSK,
     dde:	a0 e4       	ldi	r26, 0x40	; 64
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e0 e4       	ldi	r30, 0x40	; 64
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	87 7f       	andi	r24, 0xF7	; 247
     dea:	8c 93       	st	X, r24
				StopBitMode<<UART_StopBitSelect_BIT);

		/* Setting Parity mode */
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_1_MSK,
     dec:	a0 e4       	ldi	r26, 0x40	; 64
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e0 e4       	ldi	r30, 0x40	; 64
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8f 7d       	andi	r24, 0xDF	; 223
     df8:	8c 93       	st	X, r24
				READ_BIT(ParityMode,1)<<UART_ParityModeSelectBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_0_MSK,
     dfa:	a0 e4       	ldi	r26, 0x40	; 64
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e0 e4       	ldi	r30, 0x40	; 64
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 7e       	andi	r24, 0xEF	; 239
     e06:	8c 93       	st	X, r24
				READ_BIT(ParityMode,0)<<UART_ParityModeSelectBit_0_BIT);
		/* Setting communication mode (synch. or Asynch.)*/
		MODIFY_REG(UART_ControlStatusRegC, UART_SynchAsynchModeSelect_MSK,
     e08:	a0 e4       	ldi	r26, 0x40	; 64
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e0 e4       	ldi	r30, 0x40	; 64
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8f 7b       	andi	r24, 0xBF	; 191
     e14:	8c 93       	st	X, r24
				CommunicationMode<<UART_SynchAsynchModeSelect_BIT);

		/*Set Clock Poalrity*/
		// ignored as all our work is asynchronus communication mode.
		/*Set the value of baud rate register*/
		CLEAR_BIT(UART_BaudRateRegH, UART_RegisterSelect_BIT);
     e16:	a0 e4       	ldi	r26, 0x40	; 64
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e0 e4       	ldi	r30, 0x40	; 64
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8f 77       	andi	r24, 0x7F	; 127
     e22:	8c 93       	st	X, r24
		MODIFY_REG(UART_BaudRateRegH, UART_BaudRateRegH_MSK,
     e24:	a0 e4       	ldi	r26, 0x40	; 64
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e0 e4       	ldi	r30, 0x40	; 64
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 7f       	andi	r24, 0xF0	; 240
     e30:	8c 93       	st	X, r24
				(BaudCalc(BaudRate)>>8)&0x0F);
		WRITE_REG(UART_BaudRateRegL, BaudCalc(BaudRate)&0xFF);
     e32:	e9 e2       	ldi	r30, 0x29	; 41
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	87 e6       	ldi	r24, 0x67	; 103
     e38:	80 83       	st	Z, r24

		/* Enabling receiving and transmitting*/
		MODIFY_REG(UART_ControlStatusRegB, UART_ReceiveEnable_MSK,
     e3a:	aa e2       	ldi	r26, 0x2A	; 42
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ea e2       	ldi	r30, 0x2A	; 42
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 61       	ori	r24, 0x10	; 16
     e46:	8c 93       	st	X, r24
				UART_ReceiveEnable_MSK);
		MODIFY_REG(UART_ControlStatusRegB, UART_TransmissionEnable_MSK,
     e48:	aa e2       	ldi	r26, 0x2A	; 42
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e2       	ldi	r30, 0x2A	; 42
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	88 60       	ori	r24, 0x08	; 8
     e54:	8c 93       	st	X, r24
				UART_TransmissionEnable_MSK);
		ErrRetVal = OperationSuccess;
     e56:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrRetVal;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <UART_FlushReceiveBuffer>:
uint8_t UART_FlushReceiveBuffer(void) {
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <UART_FlushReceiveBuffer+0x6>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flushedCharacter;
	flushedCharacter = UART_DataReg;
     e72:	ec e2       	ldi	r30, 0x2C	; 44
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = OperationSuccess;
     e7a:	1a 82       	std	Y+2, r1	; 0x02
	return ErrRetVal;
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <UART_SetCallback>:
uint8_t UART_SetCallback(uint8_t UartNumber,uint8_t UartInterruptType,void (*callBack)(void)) {
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	27 97       	sbiw	r28, 0x07	; 7
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	6b 83       	std	Y+3, r22	; 0x03
     ea0:	5d 83       	std	Y+5, r21	; 0x05
     ea2:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	89 83       	std	Y+1, r24	; 0x01
	switch (UartInterruptType) {
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	3f 83       	std	Y+7, r19	; 0x07
     eb0:	2e 83       	std	Y+6, r18	; 0x06
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
     eb4:	9f 81       	ldd	r25, Y+7	; 0x07
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	91 05       	cpc	r25, r1
     eba:	81 f0       	breq	.+32     	; 0xedc <UART_SetCallback+0x54>
     ebc:	2e 81       	ldd	r18, Y+6	; 0x06
     ebe:	3f 81       	ldd	r19, Y+7	; 0x07
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	91 f0       	breq	.+36     	; 0xeea <UART_SetCallback+0x62>
     ec6:	8e 81       	ldd	r24, Y+6	; 0x06
     ec8:	9f 81       	ldd	r25, Y+7	; 0x07
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	a9 f4       	brne	.+42     	; 0xef8 <UART_SetCallback+0x70>
	case RxCompleteInterrupt:
		UART_Set_RX_CompleteCallback(UartNumber, callBack);
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	b9 01       	movw	r22, r18
     ed6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <UART_Set_RX_CompleteCallback>
     eda:	10 c0       	rjmp	.+32     	; 0xefc <UART_SetCallback+0x74>
		break;
	case DataBufferEmptyInterrupt:
		UART_UDRE_Empty_CompleteCallback(UartNumber, callBack);
     edc:	2c 81       	ldd	r18, Y+4	; 0x04
     ede:	3d 81       	ldd	r19, Y+5	; 0x05
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	b9 01       	movw	r22, r18
     ee4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <UART_UDRE_Empty_CompleteCallback>
     ee8:	09 c0       	rjmp	.+18     	; 0xefc <UART_SetCallback+0x74>
		break;
	case TxCompleteInterrupt:
		UART_Set_TX_CompleteCallback(UartNumber, callBack);
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	b9 01       	movw	r22, r18
     ef2:	0e 94 19 09 	call	0x1232	; 0x1232 <UART_Set_TX_CompleteCallback>
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <UART_SetCallback+0x74>
		break;
	default:
		ErrRetVal = OperationFail;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
}
     efe:	27 96       	adiw	r28, 0x07	; 7
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <UART_TransmitChar>:

uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <UART_TransmitChar+0x6>
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	8a 83       	std	Y+2, r24	; 0x02
     f1e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA, 5)) {
     f24:	eb e2       	ldi	r30, 0x2B	; 43
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	80 72       	andi	r24, 0x20	; 32
     f30:	90 70       	andi	r25, 0x00	; 0
     f32:	95 95       	asr	r25
     f34:	87 95       	ror	r24
     f36:	95 95       	asr	r25
     f38:	87 95       	ror	r24
     f3a:	95 95       	asr	r25
     f3c:	87 95       	ror	r24
     f3e:	95 95       	asr	r25
     f40:	87 95       	ror	r24
     f42:	95 95       	asr	r25
     f44:	87 95       	ror	r24
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	31 f0       	breq	.+12     	; 0xf56 <UART_TransmitChar+0x46>
		UART_DataReg = TxChar;
     f4a:	ec e2       	ldi	r30, 0x2C	; 44
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     f52:	19 82       	std	Y+1, r1	; 0x01
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <UART_TransmitChar+0x4a>
	} else {
		ErrRetVal = Transmission_Fail;
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <UART_ReceiveChar+0x6>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <UART_ReceiveChar+0x8>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	7c 83       	std	Y+4, r23	; 0x04
     f78:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA,7) == 1) {
     f7e:	eb e2       	ldi	r30, 0x2B	; 43
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 1f       	adc	r24, r24
     f86:	88 27       	eor	r24, r24
     f88:	88 1f       	adc	r24, r24
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 70       	andi	r25, 0x00	; 0
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	41 f4       	brne	.+16     	; 0xfa6 <UART_ReceiveChar+0x3e>
		*RxChar = UART_DataReg;
     f96:	ec e2       	ldi	r30, 0x2C	; 44
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	eb 81       	ldd	r30, Y+3	; 0x03
     f9e:	fc 81       	ldd	r31, Y+4	; 0x04
     fa0:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     fa2:	19 82       	std	Y+1, r1	; 0x01
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <UART_ReceiveChar+0x42>
	} else {
		ErrRetVal = Receiving_Fail;
     fa6:	85 e0       	ldi	r24, 0x05	; 5
     fa8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <UART_TransmitString>:

uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString) {
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <UART_TransmitString+0x6>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <UART_TransmitString+0x8>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	7d 83       	std	Y+5, r23	; 0x05
     fcc:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     fd2:	19 82       	std	Y+1, r1	; 0x01
	while (iterator <= 255) {
		if (*TxString == '\0') {
     fd4:	ec 81       	ldd	r30, Y+4	; 0x04
     fd6:	fd 81       	ldd	r31, Y+5	; 0x05
     fd8:	80 81       	ld	r24, Z
     fda:	88 23       	and	r24, r24
     fdc:	81 f4       	brne	.+32     	; 0xffe <UART_TransmitString+0x44>
			ErrRetVal = OperationSuccess;
     fde:	1a 82       	std	Y+2, r1	; 0x02
			while (UART_TransmitChar(UartNumber, '\r') != OperationSuccess)
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	6d e0       	ldi	r22, 0x0D	; 13
     fe4:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_TransmitChar>
     fe8:	88 23       	and	r24, r24
     fea:	d1 f7       	brne	.-12     	; 0xfe0 <UART_TransmitString+0x26>
				;
			iterator++;
			TxString++;
		}
	}
	return ErrRetVal;
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret
			ErrRetVal = OperationSuccess;
			while (UART_TransmitChar(UartNumber, '\r') != OperationSuccess)
				;
			break;
		} else {
			while (UART_TransmitChar(UartNumber, *TxString) != OperationSuccess)
     ffe:	ec 81       	ldd	r30, Y+4	; 0x04
    1000:	fd 81       	ldd	r31, Y+5	; 0x05
    1002:	90 81       	ld	r25, Z
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	69 2f       	mov	r22, r25
    1008:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_TransmitChar>
    100c:	88 23       	and	r24, r24
    100e:	b9 f7       	brne	.-18     	; 0xffe <UART_TransmitString+0x44>
				;
			iterator++;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	8f 5f       	subi	r24, 0xFF	; 255
    1014:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	9d 81       	ldd	r25, Y+5	; 0x05
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	9d 83       	std	Y+5, r25	; 0x05
    101e:	8c 83       	std	Y+4, r24	; 0x04
    1020:	d9 cf       	rjmp	.-78     	; 0xfd4 <UART_TransmitString+0x1a>

00001022 <UART_ReceiveString>:
		}
	}
	return ErrRetVal;
}
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <UART_ReceiveString+0x6>
    1028:	00 d0       	rcall	.+0      	; 0x102a <UART_ReceiveString+0x8>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	7d 83       	std	Y+5, r23	; 0x05
    1034:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
    103a:	19 82       	std	Y+1, r1	; 0x01
	while (iterator <= 255) {
		if (UART_ReceiveChar(UartNumber, RxString) == OperationSuccess) {
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	b9 01       	movw	r22, r18
    1044:	0e 94 b4 07 	call	0xf68	; 0xf68 <UART_ReceiveChar>
    1048:	88 23       	and	r24, r24
    104a:	c1 f7       	brne	.-16     	; 0x103c <UART_ReceiveString+0x1a>
			if (*RxString == '\r' || *RxString == '\n') {
    104c:	ec 81       	ldd	r30, Y+4	; 0x04
    104e:	fd 81       	ldd	r31, Y+5	; 0x05
    1050:	80 81       	ld	r24, Z
    1052:	8d 30       	cpi	r24, 0x0D	; 13
    1054:	29 f0       	breq	.+10     	; 0x1060 <UART_ReceiveString+0x3e>
    1056:	ec 81       	ldd	r30, Y+4	; 0x04
    1058:	fd 81       	ldd	r31, Y+5	; 0x05
    105a:	80 81       	ld	r24, Z
    105c:	8a 30       	cpi	r24, 0x0A	; 10
    105e:	69 f4       	brne	.+26     	; 0x107a <UART_ReceiveString+0x58>
				*RxString = '\0';
    1060:	ec 81       	ldd	r30, Y+4	; 0x04
    1062:	fd 81       	ldd	r31, Y+5	; 0x05
    1064:	10 82       	st	Z, r1
				ErrRetVal = OperationSuccess;
    1066:	1a 82       	std	Y+2, r1	; 0x02
			}
		} else {
			continue;
		}
	}
	return ErrRetVal;
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret
			if (*RxString == '\r' || *RxString == '\n') {
				*RxString = '\0';
				ErrRetVal = OperationSuccess;
				break;
			} else {
				RxString++;
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	9d 83       	std	Y+5, r25	; 0x05
    1082:	8c 83       	std	Y+4, r24	; 0x04
				iterator++;
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	d8 cf       	rjmp	.-80     	; 0x103c <UART_ReceiveString+0x1a>

0000108c <UART_EnableInterrupt>:
		}
	}
	return ErrRetVal;
}

uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	00 d0       	rcall	.+0      	; 0x1092 <UART_EnableInterrupt+0x6>
    1092:	00 d0       	rcall	.+0      	; 0x1094 <UART_EnableInterrupt+0x8>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
    10a2:	af e5       	ldi	r26, 0x5F	; 95
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	ef e5       	ldi	r30, 0x5F	; 95
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 68       	ori	r24, 0x80	; 128
    10ae:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	if (UartInterruptType < NumOfInterrupts) {
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	88 f5       	brcc	.+98     	; 0x1118 <UART_EnableInterrupt+0x8c>
		switch (UartInterruptType) {
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3d 83       	std	Y+5, r19	; 0x05
    10be:	2c 83       	std	Y+4, r18	; 0x04
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	91 f0       	breq	.+36     	; 0x10ee <UART_EnableInterrupt+0x62>
    10ca:	2c 81       	ldd	r18, Y+4	; 0x04
    10cc:	3d 81       	ldd	r19, Y+5	; 0x05
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	b1 f0       	breq	.+44     	; 0x1100 <UART_EnableInterrupt+0x74>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	d9 f4       	brne	.+54     	; 0x1112 <UART_EnableInterrupt+0x86>
		case RxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
    10dc:	aa e2       	ldi	r26, 0x2A	; 42
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ea e2       	ldi	r30, 0x2A	; 42
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_MSK,
					UART_ReceiveCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
    10ea:	19 82       	std	Y+1, r1	; 0x01
    10ec:	17 c0       	rjmp	.+46     	; 0x111c <UART_EnableInterrupt+0x90>
			break;
		case DataBufferEmptyInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
    10ee:	aa e2       	ldi	r26, 0x2A	; 42
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ea e2       	ldi	r30, 0x2A	; 42
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 62       	ori	r24, 0x20	; 32
    10fa:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_MSK,
					UART_DataRegisterEmptyInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	0e c0       	rjmp	.+28     	; 0x111c <UART_EnableInterrupt+0x90>
			break;
		case TxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
    1100:	aa e2       	ldi	r26, 0x2A	; 42
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ea e2       	ldi	r30, 0x2A	; 42
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 64       	ori	r24, 0x40	; 64
    110c:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_MSK,
					UART_TransmissionCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
    110e:	19 82       	std	Y+1, r1	; 0x01
    1110:	05 c0       	rjmp	.+10     	; 0x111c <UART_EnableInterrupt+0x90>
			break;
		default:
			ErrRetVal = Interrupt_Enabling_Fail;
    1112:	8a e0       	ldi	r24, 0x0A	; 10
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	02 c0       	rjmp	.+4      	; 0x111c <UART_EnableInterrupt+0x90>
		}
	} else {
		ErrRetVal = Interrupt_Enabling_Fail;
    1118:	8a e0       	ldi	r24, 0x0A	; 10
    111a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <UART_DisableInterrupt+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <UART_DisableInterrupt+0x8>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	8a 83       	std	Y+2, r24	; 0x02
    113e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Local Interrupt*/
	if (UartInterruptType < NumOfInterrupts) {
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	83 30       	cpi	r24, 0x03	; 3
    1148:	88 f5       	brcc	.+98     	; 0x11ac <UART_DisableInterrupt+0x7e>
		switch (UartInterruptType) {
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3d 83       	std	Y+5, r19	; 0x05
    1152:	2c 83       	std	Y+4, r18	; 0x04
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	91 05       	cpc	r25, r1
    115c:	91 f0       	breq	.+36     	; 0x1182 <UART_DisableInterrupt+0x54>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	b1 f0       	breq	.+44     	; 0x1194 <UART_DisableInterrupt+0x66>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	d9 f4       	brne	.+54     	; 0x11a6 <UART_DisableInterrupt+0x78>
		case RxCompleteInterrupt:
			CLEAR_BIT(UART_ControlStatusRegB,
    1170:	aa e2       	ldi	r26, 0x2A	; 42
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ea e2       	ldi	r30, 0x2A	; 42
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8f 77       	andi	r24, 0x7F	; 127
    117c:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_BIT);
			ErrRetVal = OperationSuccess;
    117e:	19 82       	std	Y+1, r1	; 0x01
    1180:	17 c0       	rjmp	.+46     	; 0x11b0 <UART_DisableInterrupt+0x82>
			break;
		case DataBufferEmptyInterrupt:
			CLEAR_BIT(UART_ControlStatusRegB,
    1182:	aa e2       	ldi	r26, 0x2A	; 42
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ea e2       	ldi	r30, 0x2A	; 42
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 7d       	andi	r24, 0xDF	; 223
    118e:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_BIT);
			ErrRetVal = OperationSuccess;
    1190:	19 82       	std	Y+1, r1	; 0x01
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <UART_DisableInterrupt+0x82>
			break;
		case TxCompleteInterrupt:
			CLEAR_BIT(UART_ControlStatusRegB,
    1194:	aa e2       	ldi	r26, 0x2A	; 42
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ea e2       	ldi	r30, 0x2A	; 42
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7b       	andi	r24, 0xBF	; 191
    11a0:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_BIT);
			ErrRetVal = OperationSuccess;
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <UART_DisableInterrupt+0x82>
			break;
		default:
			ErrRetVal = Interrupt_Disabling_Fail;
    11a6:	89 e0       	ldi	r24, 0x09	; 9
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <UART_DisableInterrupt+0x82>
		}
	} else {
		ErrRetVal = Interrupt_Disabling_Fail;
    11ac:	89 e0       	ldi	r24, 0x09	; 9
    11ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <UART_Set_RX_CompleteCallback>:

uint8_t UART_Set_RX_CompleteCallback(uint8_t UartNumber, void (*callBack)(void)) {
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <UART_Set_RX_CompleteCallback+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <UART_Set_RX_CompleteCallback+0x8>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	7c 83       	std	Y+4, r23	; 0x04
    11d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = 0;
    11d4:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	31 f0       	breq	.+12     	; 0x11ea <UART_Set_RX_CompleteCallback+0x28>
		UART_RX_Complete_callback = callBack;
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	90 93 93 01 	sts	0x0193, r25
    11e6:	80 93 92 01 	sts	0x0192, r24
	return ErrRetVal;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <UART_UDRE_Empty_CompleteCallback>:
uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber,
		void (*callBack)(void)) {
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <UART_UDRE_Empty_CompleteCallback+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <UART_UDRE_Empty_CompleteCallback+0x8>
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	8a 83       	std	Y+2, r24	; 0x02
    1208:	7c 83       	std	Y+4, r23	; 0x04
    120a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = 0;
    120c:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	31 f0       	breq	.+12     	; 0x1222 <UART_UDRE_Empty_CompleteCallback+0x28>
		UART_UDRE_Empty_callback = callBack;
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	90 93 95 01 	sts	0x0195, r25
    121e:	80 93 94 01 	sts	0x0194, r24
	return ErrRetVal;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <UART_Set_TX_CompleteCallback>:
uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber, void (*callBack)(void)) {
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <UART_Set_TX_CompleteCallback+0x6>
    1238:	00 d0       	rcall	.+0      	; 0x123a <UART_Set_TX_CompleteCallback+0x8>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	7c 83       	std	Y+4, r23	; 0x04
    1242:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = 0;
    1244:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	31 f0       	breq	.+12     	; 0x125a <UART_Set_TX_CompleteCallback+0x28>
		UART_TX_Complete_callback = callBack;
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	90 93 97 01 	sts	0x0197, r25
    1256:	80 93 96 01 	sts	0x0196, r24
	return ErrRetVal;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <__vector_13>:

void __vector_13(void) {
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	0f 92       	push	r0
    1272:	11 24       	eor	r1, r1
    1274:	2f 93       	push	r18
    1276:	3f 93       	push	r19
    1278:	4f 93       	push	r20
    127a:	5f 93       	push	r21
    127c:	6f 93       	push	r22
    127e:	7f 93       	push	r23
    1280:	8f 93       	push	r24
    1282:	9f 93       	push	r25
    1284:	af 93       	push	r26
    1286:	bf 93       	push	r27
    1288:	ef 93       	push	r30
    128a:	ff 93       	push	r31
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Complete_callback != NULL)
    1294:	80 91 92 01 	lds	r24, 0x0192
    1298:	90 91 93 01 	lds	r25, 0x0193
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	29 f0       	breq	.+10     	; 0x12aa <__vector_13+0x40>
		UART_RX_Complete_callback();
    12a0:	e0 91 92 01 	lds	r30, 0x0192
    12a4:	f0 91 93 01 	lds	r31, 0x0193
    12a8:	09 95       	icall
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_14>:
void __vector_14(void) {
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	if (UART_UDRE_Empty_callback != NULL)
    12fa:	80 91 94 01 	lds	r24, 0x0194
    12fe:	90 91 95 01 	lds	r25, 0x0195
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	29 f0       	breq	.+10     	; 0x1310 <__vector_14+0x40>
		UART_UDRE_Empty_callback();
    1306:	e0 91 94 01 	lds	r30, 0x0194
    130a:	f0 91 95 01 	lds	r31, 0x0195
    130e:	09 95       	icall
}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_15>:
void __vector_15(void) {
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Complete_callback != NULL)
    1360:	80 91 96 01 	lds	r24, 0x0196
    1364:	90 91 97 01 	lds	r25, 0x0197
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	29 f0       	breq	.+10     	; 0x1376 <__vector_15+0x40>
		UART_TX_Complete_callback();
    136c:	e0 91 96 01 	lds	r30, 0x0196
    1370:	f0 91 97 01 	lds	r31, 0x0197
    1374:	09 95       	icall
}
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	ff 91       	pop	r31
    137c:	ef 91       	pop	r30
    137e:	bf 91       	pop	r27
    1380:	af 91       	pop	r26
    1382:	9f 91       	pop	r25
    1384:	8f 91       	pop	r24
    1386:	7f 91       	pop	r23
    1388:	6f 91       	pop	r22
    138a:	5f 91       	pop	r21
    138c:	4f 91       	pop	r20
    138e:	3f 91       	pop	r19
    1390:	2f 91       	pop	r18
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	0f 90       	pop	r0
    1398:	1f 90       	pop	r1
    139a:	18 95       	reti

0000139c <TIM_Init>:
void __vector_4(void)__attribute__((signal,used));//Timer2 OC
void __vector_5(void)__attribute__((signal,used));//Timer2 OVF

TIM_ERROR_t TIM_Init(TIM_SELECT_t Timer, TIM_CLK_SELECT_t clock,
		TIMER_MODE_t timer_mode, TIM_CMPMATCH_OUTPUT_t compareMatch_output_mode,
		uint16_t counterValue, uint16_t compareValue) {
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	29 97       	sbiw	r28, 0x09	; 9
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	6b 83       	std	Y+3, r22	; 0x03
    13bc:	4c 83       	std	Y+4, r20	; 0x04
    13be:	2d 83       	std	Y+5, r18	; 0x05
    13c0:	1f 83       	std	Y+7, r17	; 0x07
    13c2:	0e 83       	std	Y+6, r16	; 0x06
    13c4:	f9 86       	std	Y+9, r15	; 0x09
    13c6:	e8 86       	std	Y+8, r14	; 0x08
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    13c8:	19 82       	std	Y+1, r1	; 0x01
	if (Timer <= 2 && clock <= 7 && timer_mode <= 3
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	18 f5       	brcc	.+70     	; 0x1416 <TIM_Init+0x7a>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 30       	cpi	r24, 0x08	; 8
    13d4:	00 f5       	brcc	.+64     	; 0x1416 <TIM_Init+0x7a>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	e8 f4       	brcc	.+58     	; 0x1416 <TIM_Init+0x7a>
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	d0 f4       	brcc	.+52     	; 0x1416 <TIM_Init+0x7a>
			&& compareMatch_output_mode <= 3) {
		TIM_MODE_SLCT(Timer, timer_mode);
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	6c 81       	ldd	r22, Y+4	; 0x04
    13e6:	0e 94 0d 0b 	call	0x161a	; 0x161a <TIM_MODE_SLCT>

		TIM_SetTimerPreLoadVal(Timer, counterValue);
    13ea:	2e 81       	ldd	r18, Y+6	; 0x06
    13ec:	3f 81       	ldd	r19, Y+7	; 0x07
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	b9 01       	movw	r22, r18
    13f2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <TIM_SetTimerPreLoadVal>

		TIM_OC_MODE_SLCT(Timer, compareMatch_output_mode, timer_mode);
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	6d 81       	ldd	r22, Y+5	; 0x05
    13fa:	4c 81       	ldd	r20, Y+4	; 0x04
    13fc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TIM_OC_MODE_SLCT>

		TIM_SetTimerOCVal(Timer, compareValue);
    1400:	28 85       	ldd	r18, Y+8	; 0x08
    1402:	39 85       	ldd	r19, Y+9	; 0x09
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	b9 01       	movw	r22, r18
    1408:	0e 94 4f 0a 	call	0x149e	; 0x149e <TIM_SetTimerOCVal>

		TIM_CLK_SLCT(Timer, clock);
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	6b 81       	ldd	r22, Y+3	; 0x03
    1410:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <TIM_Init+0x7e>
	} else {
		retVal = EXIT_FAILURE;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
}
    141c:	29 96       	adiw	r28, 0x09	; 9
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	08 95       	ret

00001436 <TIM_SetTimerPreLoadVal>:
TIM_ERROR_t TIM_SetTimerPreLoadVal(TIM_SELECT_t Timer, uint16_t counterValue) {
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <TIM_SetTimerPreLoadVal+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <TIM_SetTimerPreLoadVal+0x8>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <TIM_SetTimerPreLoadVal+0xa>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	7c 83       	std	Y+4, r23	; 0x04
    1448:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    144a:	19 82       	std	Y+1, r1	; 0x01
	switch (Timer) {
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3e 83       	std	Y+6, r19	; 0x06
    1454:	2d 83       	std	Y+5, r18	; 0x05
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	a9 f0       	breq	.+42     	; 0x148a <TIM_SetTimerPreLoadVal+0x54>
    1460:	2d 81       	ldd	r18, Y+5	; 0x05
    1462:	3e 81       	ldd	r19, Y+6	; 0x06
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	49 f0       	breq	.+18     	; 0x147c <TIM_SetTimerPreLoadVal+0x46>
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	51 f4       	brne	.+20     	; 0x1486 <TIM_SetTimerPreLoadVal+0x50>
	case TIMER0:
		WRITE_REG(TIM0_CurrCount_REG, (uint8_t )counterValue);
    1472:	e2 e5       	ldi	r30, 0x52	; 82
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	80 83       	st	Z, r24
    147a:	07 c0       	rjmp	.+14     	; 0x148a <TIM_SetTimerPreLoadVal+0x54>
		break;
	case TIMER1:
		break;
	case TIMER2:
		WRITE_REG(TIM2_CurrCount_REG, (uint8_t )counterValue);
    147c:	e4 e4       	ldi	r30, 0x44	; 68
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	80 83       	st	Z, r24
    1484:	02 c0       	rjmp	.+4      	; 0x148a <TIM_SetTimerPreLoadVal+0x54>
		break;
	default:
		retVal = EXIT_FAILURE;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
}
    148c:	26 96       	adiw	r28, 0x06	; 6
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <TIM_SetTimerOCVal>:
TIM_ERROR_t TIM_SetTimerOCVal(TIM_SELECT_t Timer, uint16_t compareValue) {
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <TIM_SetTimerOCVal+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <TIM_SetTimerOCVal+0x8>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <TIM_SetTimerOCVal+0xa>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	7c 83       	std	Y+4, r23	; 0x04
    14b0:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    14b2:	19 82       	std	Y+1, r1	; 0x01
	switch (Timer) {
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3e 83       	std	Y+6, r19	; 0x06
    14bc:	2d 83       	std	Y+5, r18	; 0x05
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	a9 f0       	breq	.+42     	; 0x14f2 <TIM_SetTimerOCVal+0x54>
    14c8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ca:	3e 81       	ldd	r19, Y+6	; 0x06
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	49 f0       	breq	.+18     	; 0x14e4 <TIM_SetTimerOCVal+0x46>
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	51 f4       	brne	.+20     	; 0x14ee <TIM_SetTimerOCVal+0x50>
	case TIMER0:
		WRITE_REG(TIM0_OutputComp_REG, (uint8_t )compareValue);
    14da:	ec e5       	ldi	r30, 0x5C	; 92
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	80 83       	st	Z, r24
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <TIM_SetTimerOCVal+0x54>
		break;
	case TIMER1:
		break;
	case TIMER2:
		WRITE_REG(TIM2_OutputComp_REG, (uint8_t )compareValue);
    14e4:	e3 e4       	ldi	r30, 0x43	; 67
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	80 83       	st	Z, r24
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <TIM_SetTimerOCVal+0x54>
		break;
	default:
		retVal = EXIT_FAILURE;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f4:	26 96       	adiw	r28, 0x06	; 6
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <TIM_SetTimerOVFAction>:
TIM_ERROR_t TIM_SetTimerOVFAction(TIM_SELECT_t Timer, void (*callback)(void)) {
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <TIM_SetTimerOVFAction+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <TIM_SetTimerOVFAction+0x8>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <TIM_SetTimerOVFAction+0xa>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	8a 83       	std	Y+2, r24	; 0x02
    1516:	7c 83       	std	Y+4, r23	; 0x04
    1518:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal;
	switch (Timer) {
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3e 83       	std	Y+6, r19	; 0x06
    1522:	2d 83       	std	Y+5, r18	; 0x05
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	91 05       	cpc	r25, r1
    152c:	39 f1       	breq	.+78     	; 0x157c <TIM_SetTimerOVFAction+0x76>
    152e:	2d 81       	ldd	r18, Y+5	; 0x05
    1530:	3e 81       	ldd	r19, Y+6	; 0x06
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	91 f0       	breq	.+36     	; 0x155c <TIM_SetTimerOVFAction+0x56>
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	e1 f4       	brne	.+56     	; 0x1578 <TIM_SetTimerOVFAction+0x72>
	case TIMER0:
		if (callback != NULL) {
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	39 f0       	breq	.+14     	; 0x1556 <TIM_SetTimerOVFAction+0x50>
			TIM0_OVFAction_callback = callback;
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	90 93 99 01 	sts	0x0199, r25
    1550:	80 93 98 01 	sts	0x0198, r24
    1554:	13 c0       	rjmp	.+38     	; 0x157c <TIM_SetTimerOVFAction+0x76>
		} else {
			retVal = EXIT_FAILURE;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	10 c0       	rjmp	.+32     	; 0x157c <TIM_SetTimerOVFAction+0x76>
		}
		break;
	case TIMER1:
		break;
	case TIMER2:
		if (callback != NULL) {
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	39 f0       	breq	.+14     	; 0x1572 <TIM_SetTimerOVFAction+0x6c>
			TIM2_OVFAction_callback = callback;
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	90 93 9d 01 	sts	0x019D, r25
    156c:	80 93 9c 01 	sts	0x019C, r24
    1570:	05 c0       	rjmp	.+10     	; 0x157c <TIM_SetTimerOVFAction+0x76>
		} else {
			retVal = EXIT_FAILURE;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	02 c0       	rjmp	.+4      	; 0x157c <TIM_SetTimerOVFAction+0x76>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    157c:	89 81       	ldd	r24, Y+1	; 0x01
}
    157e:	26 96       	adiw	r28, 0x06	; 6
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <TIM_SetTimerOCAction>:
TIM_ERROR_t TIM_SetTimerOCAction(TIM_SELECT_t Timer, void (*callback)(void)) {
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <TIM_SetTimerOCAction+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <TIM_SetTimerOCAction+0x8>
    1598:	00 d0       	rcall	.+0      	; 0x159a <TIM_SetTimerOCAction+0xa>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	7c 83       	std	Y+4, r23	; 0x04
    15a2:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal;
	switch (Timer) {
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3e 83       	std	Y+6, r19	; 0x06
    15ac:	2d 83       	std	Y+5, r18	; 0x05
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	39 f1       	breq	.+78     	; 0x1606 <TIM_SetTimerOCAction+0x76>
    15b8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ba:	3e 81       	ldd	r19, Y+6	; 0x06
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	91 f0       	breq	.+36     	; 0x15e6 <TIM_SetTimerOCAction+0x56>
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	e1 f4       	brne	.+56     	; 0x1602 <TIM_SetTimerOCAction+0x72>
	case TIMER0:
		if (callback != NULL) {
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	39 f0       	breq	.+14     	; 0x15e0 <TIM_SetTimerOCAction+0x50>
			TIM0_OCAction_callback = callback;
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	90 93 9b 01 	sts	0x019B, r25
    15da:	80 93 9a 01 	sts	0x019A, r24
    15de:	13 c0       	rjmp	.+38     	; 0x1606 <TIM_SetTimerOCAction+0x76>
		} else {
			retVal = EXIT_FAILURE;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	10 c0       	rjmp	.+32     	; 0x1606 <TIM_SetTimerOCAction+0x76>
		}
		break;
	case TIMER1:
		break;
	case TIMER2:
		if (callback != NULL) {
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	39 f0       	breq	.+14     	; 0x15fc <TIM_SetTimerOCAction+0x6c>
			TIM2_OCAction_callback = callback;
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	90 93 9f 01 	sts	0x019F, r25
    15f6:	80 93 9e 01 	sts	0x019E, r24
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <TIM_SetTimerOCAction+0x76>
		} else {
			retVal = EXIT_FAILURE;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <TIM_SetTimerOCAction+0x76>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    1606:	89 81       	ldd	r24, Y+1	; 0x01
}
    1608:	26 96       	adiw	r28, 0x06	; 6
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <TIM_MODE_SLCT>:
TIM_ERROR_t TIM_MODE_SLCT(TIM_SELECT_t Timer, TIMER_MODE_t mode) {
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	29 97       	sbiw	r28, 0x09	; 9
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	8a 83       	std	Y+2, r24	; 0x02
    1630:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    1632:	19 82       	std	Y+1, r1	; 0x01
	switch (Timer) {
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	39 87       	std	Y+9, r19	; 0x09
    163c:	28 87       	std	Y+8, r18	; 0x08
    163e:	88 85       	ldd	r24, Y+8	; 0x08
    1640:	99 85       	ldd	r25, Y+9	; 0x09
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <TIM_MODE_SLCT+0x30>
    1648:	95 c0       	rjmp	.+298    	; 0x1774 <TIM_MODE_SLCT+0x15a>
    164a:	28 85       	ldd	r18, Y+8	; 0x08
    164c:	39 85       	ldd	r19, Y+9	; 0x09
    164e:	22 30       	cpi	r18, 0x02	; 2
    1650:	31 05       	cpc	r19, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <TIM_MODE_SLCT+0x3c>
    1654:	49 c0       	rjmp	.+146    	; 0x16e8 <TIM_MODE_SLCT+0xce>
    1656:	88 85       	ldd	r24, Y+8	; 0x08
    1658:	99 85       	ldd	r25, Y+9	; 0x09
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <TIM_MODE_SLCT+0x46>
    165e:	88 c0       	rjmp	.+272    	; 0x1770 <TIM_MODE_SLCT+0x156>
	case TIMER0:
		switch (mode) {
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3f 83       	std	Y+7, r19	; 0x07
    1668:	2e 83       	std	Y+6, r18	; 0x06
    166a:	8e 81       	ldd	r24, Y+6	; 0x06
    166c:	9f 81       	ldd	r25, Y+7	; 0x07
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	e9 f0       	breq	.+58     	; 0x16ae <TIM_MODE_SLCT+0x94>
    1674:	2e 81       	ldd	r18, Y+6	; 0x06
    1676:	3f 81       	ldd	r19, Y+7	; 0x07
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <TIM_MODE_SLCT+0x6e>
    167e:	8e 81       	ldd	r24, Y+6	; 0x06
    1680:	9f 81       	ldd	r25, Y+7	; 0x07
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	61 f0       	breq	.+24     	; 0x169e <TIM_MODE_SLCT+0x84>
    1686:	2d c0       	rjmp	.+90     	; 0x16e2 <TIM_MODE_SLCT+0xc8>
    1688:	2e 81       	ldd	r18, Y+6	; 0x06
    168a:	3f 81       	ldd	r19, Y+7	; 0x07
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	b9 f0       	breq	.+46     	; 0x16c0 <TIM_MODE_SLCT+0xa6>
    1692:	8e 81       	ldd	r24, Y+6	; 0x06
    1694:	9f 81       	ldd	r25, Y+7	; 0x07
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	d9 f0       	breq	.+54     	; 0x16d2 <TIM_MODE_SLCT+0xb8>
    169c:	22 c0       	rjmp	.+68     	; 0x16e2 <TIM_MODE_SLCT+0xc8>
		case Normal:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_MODE_SELECT_CLRMSK,
    169e:	a3 e5       	ldi	r26, 0x53	; 83
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e3 e5       	ldi	r30, 0x53	; 83
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	87 7b       	andi	r24, 0xB7	; 183
    16aa:	8c 93       	st	X, r24
    16ac:	63 c0       	rjmp	.+198    	; 0x1774 <TIM_MODE_SLCT+0x15a>
					TIM0_Normal_SETMSK);
			break;
		case CLR_Timer_OnCompare:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_MODE_SELECT_CLRMSK,
    16ae:	a3 e5       	ldi	r26, 0x53	; 83
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e3 e5       	ldi	r30, 0x53	; 83
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	87 7b       	andi	r24, 0xB7	; 183
    16ba:	88 60       	ori	r24, 0x08	; 8
    16bc:	8c 93       	st	X, r24
    16be:	5a c0       	rjmp	.+180    	; 0x1774 <TIM_MODE_SLCT+0x15a>
					TIM0_CLR_Timer_OnCompare_SETMSK);
			break;
		case PWM_PhaseCorrect:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_MODE_SELECT_CLRMSK,
    16c0:	a3 e5       	ldi	r26, 0x53	; 83
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e3 e5       	ldi	r30, 0x53	; 83
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	87 7b       	andi	r24, 0xB7	; 183
    16cc:	80 64       	ori	r24, 0x40	; 64
    16ce:	8c 93       	st	X, r24
    16d0:	51 c0       	rjmp	.+162    	; 0x1774 <TIM_MODE_SLCT+0x15a>
					TIM0_PWM_PhaseCorrect_SETMSK);
			break;
		case Fast_PWM:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_MODE_SELECT_CLRMSK,
    16d2:	a3 e5       	ldi	r26, 0x53	; 83
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e3 e5       	ldi	r30, 0x53	; 83
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	88 64       	ori	r24, 0x48	; 72
    16de:	8c 93       	st	X, r24
    16e0:	49 c0       	rjmp	.+146    	; 0x1774 <TIM_MODE_SLCT+0x15a>
					TIM0_Fast_PWM_SETMSK);
			break;
		default:
			retVal = EXIT_FAILURE;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	46 c0       	rjmp	.+140    	; 0x1774 <TIM_MODE_SLCT+0x15a>
		break;
	case TIMER1:

		break;
	case TIMER2:
		switch (mode) {
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3d 83       	std	Y+5, r19	; 0x05
    16f0:	2c 83       	std	Y+4, r18	; 0x04
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	e9 f0       	breq	.+58     	; 0x1736 <TIM_MODE_SLCT+0x11c>
    16fc:	2c 81       	ldd	r18, Y+4	; 0x04
    16fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <TIM_MODE_SLCT+0xf6>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <TIM_MODE_SLCT+0x10c>
    170e:	2d c0       	rjmp	.+90     	; 0x176a <TIM_MODE_SLCT+0x150>
    1710:	2c 81       	ldd	r18, Y+4	; 0x04
    1712:	3d 81       	ldd	r19, Y+5	; 0x05
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	b9 f0       	breq	.+46     	; 0x1748 <TIM_MODE_SLCT+0x12e>
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	9d 81       	ldd	r25, Y+5	; 0x05
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	d9 f0       	breq	.+54     	; 0x175a <TIM_MODE_SLCT+0x140>
    1724:	22 c0       	rjmp	.+68     	; 0x176a <TIM_MODE_SLCT+0x150>
		case Normal:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_MODE_SELECT_CLRMSK,
    1726:	a5 e4       	ldi	r26, 0x45	; 69
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e5 e4       	ldi	r30, 0x45	; 69
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	87 7b       	andi	r24, 0xB7	; 183
    1732:	8c 93       	st	X, r24
    1734:	1f c0       	rjmp	.+62     	; 0x1774 <TIM_MODE_SLCT+0x15a>
					TIM2_Normal_SETMSK);
			break;
		case CLR_Timer_OnCompare:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_MODE_SELECT_CLRMSK,
    1736:	a5 e4       	ldi	r26, 0x45	; 69
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e5 e4       	ldi	r30, 0x45	; 69
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	87 7b       	andi	r24, 0xB7	; 183
    1742:	88 60       	ori	r24, 0x08	; 8
    1744:	8c 93       	st	X, r24
    1746:	16 c0       	rjmp	.+44     	; 0x1774 <TIM_MODE_SLCT+0x15a>
					TIM2_CLR_Timer_OnCompare_SETMSK);
			break;
		case PWM_PhaseCorrect:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_MODE_SELECT_CLRMSK,
    1748:	a5 e4       	ldi	r26, 0x45	; 69
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e4       	ldi	r30, 0x45	; 69
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	87 7b       	andi	r24, 0xB7	; 183
    1754:	80 64       	ori	r24, 0x40	; 64
    1756:	8c 93       	st	X, r24
    1758:	0d c0       	rjmp	.+26     	; 0x1774 <TIM_MODE_SLCT+0x15a>
					TIM2_PWM_PhaseCorrect_SETMSK);
			break;
		case Fast_PWM:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_MODE_SELECT_CLRMSK,
    175a:	a5 e4       	ldi	r26, 0x45	; 69
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e4       	ldi	r30, 0x45	; 69
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	88 64       	ori	r24, 0x48	; 72
    1766:	8c 93       	st	X, r24
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <TIM_MODE_SLCT+0x15a>
					TIM2_Fast_PWM_SETMSK);
			break;
		default:
			retVal = EXIT_FAILURE;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <TIM_MODE_SLCT+0x15a>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    1774:	89 81       	ldd	r24, Y+1	; 0x01
}
    1776:	29 96       	adiw	r28, 0x09	; 9
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <TIM_CLK_SLCT>:
TIM_ERROR_t TIM_CLK_SLCT(TIM_SELECT_t Timer, TIM_CLK_SELECT_t clock) {
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	29 97       	sbiw	r28, 0x09	; 9
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	8a 83       	std	Y+2, r24	; 0x02
    179e:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    17a0:	19 82       	std	Y+1, r1	; 0x01
	switch (Timer) {
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	39 87       	std	Y+9, r19	; 0x09
    17aa:	28 87       	std	Y+8, r18	; 0x08
    17ac:	88 85       	ldd	r24, Y+8	; 0x08
    17ae:	99 85       	ldd	r25, Y+9	; 0x09
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <TIM_CLK_SLCT+0x30>
    17b6:	0b c1       	rjmp	.+534    	; 0x19ce <TIM_CLK_SLCT+0x246>
    17b8:	28 85       	ldd	r18, Y+8	; 0x08
    17ba:	39 85       	ldd	r19, Y+9	; 0x09
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <TIM_CLK_SLCT+0x3c>
    17c2:	84 c0       	rjmp	.+264    	; 0x18cc <TIM_CLK_SLCT+0x144>
    17c4:	88 85       	ldd	r24, Y+8	; 0x08
    17c6:	99 85       	ldd	r25, Y+9	; 0x09
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	09 f0       	breq	.+2      	; 0x17ce <TIM_CLK_SLCT+0x46>
    17cc:	fe c0       	rjmp	.+508    	; 0x19ca <TIM_CLK_SLCT+0x242>
	case TIMER0:
		switch (clock) {
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3f 83       	std	Y+7, r19	; 0x07
    17d6:	2e 83       	std	Y+6, r18	; 0x06
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <TIM_CLK_SLCT+0x5c>
    17e2:	45 c0       	rjmp	.+138    	; 0x186e <TIM_CLK_SLCT+0xe6>
    17e4:	2e 81       	ldd	r18, Y+6	; 0x06
    17e6:	3f 81       	ldd	r19, Y+7	; 0x07
    17e8:	24 30       	cpi	r18, 0x04	; 4
    17ea:	31 05       	cpc	r19, r1
    17ec:	7c f4       	brge	.+30     	; 0x180c <TIM_CLK_SLCT+0x84>
    17ee:	8e 81       	ldd	r24, Y+6	; 0x06
    17f0:	9f 81       	ldd	r25, Y+7	; 0x07
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	49 f1       	breq	.+82     	; 0x184a <TIM_CLK_SLCT+0xc2>
    17f8:	2e 81       	ldd	r18, Y+6	; 0x06
    17fa:	3f 81       	ldd	r19, Y+7	; 0x07
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	6c f5       	brge	.+90     	; 0x185c <TIM_CLK_SLCT+0xd4>
    1802:	8e 81       	ldd	r24, Y+6	; 0x06
    1804:	9f 81       	ldd	r25, Y+7	; 0x07
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	c1 f0       	breq	.+48     	; 0x183a <TIM_CLK_SLCT+0xb2>
    180a:	5d c0       	rjmp	.+186    	; 0x18c6 <TIM_CLK_SLCT+0x13e>
    180c:	2e 81       	ldd	r18, Y+6	; 0x06
    180e:	3f 81       	ldd	r19, Y+7	; 0x07
    1810:	25 30       	cpi	r18, 0x05	; 5
    1812:	31 05       	cpc	r19, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <TIM_CLK_SLCT+0x90>
    1816:	3d c0       	rjmp	.+122    	; 0x1892 <TIM_CLK_SLCT+0x10a>
    1818:	8e 81       	ldd	r24, Y+6	; 0x06
    181a:	9f 81       	ldd	r25, Y+7	; 0x07
    181c:	85 30       	cpi	r24, 0x05	; 5
    181e:	91 05       	cpc	r25, r1
    1820:	7c f1       	brlt	.+94     	; 0x1880 <TIM_CLK_SLCT+0xf8>
    1822:	2e 81       	ldd	r18, Y+6	; 0x06
    1824:	3f 81       	ldd	r19, Y+7	; 0x07
    1826:	26 30       	cpi	r18, 0x06	; 6
    1828:	31 05       	cpc	r19, r1
    182a:	e1 f1       	breq	.+120    	; 0x18a4 <TIM_CLK_SLCT+0x11c>
    182c:	8e 81       	ldd	r24, Y+6	; 0x06
    182e:	9f 81       	ldd	r25, Y+7	; 0x07
    1830:	87 30       	cpi	r24, 0x07	; 7
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <TIM_CLK_SLCT+0xb0>
    1836:	3f c0       	rjmp	.+126    	; 0x18b6 <TIM_CLK_SLCT+0x12e>
    1838:	46 c0       	rjmp	.+140    	; 0x18c6 <TIM_CLK_SLCT+0x13e>
		case _NoCLK:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_CLK_PRSCLR_CTRL_CLRMSK,
    183a:	a3 e5       	ldi	r26, 0x53	; 83
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e3 e5       	ldi	r30, 0x53	; 83
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	88 7f       	andi	r24, 0xF8	; 248
    1846:	8c 93       	st	X, r24
    1848:	c2 c0       	rjmp	.+388    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM0_NoCLK_SETMSK);
			break;
		case _SYSCLK:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_CLK_PRSCLR_CTRL_CLRMSK,
    184a:	a3 e5       	ldi	r26, 0x53	; 83
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e3 e5       	ldi	r30, 0x53	; 83
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	88 7f       	andi	r24, 0xF8	; 248
    1856:	81 60       	ori	r24, 0x01	; 1
    1858:	8c 93       	st	X, r24
    185a:	b9 c0       	rjmp	.+370    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM0_SYSCLK_SETMSK);
			break;
		case _SYSCLK_DivideBy8:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_CLK_PRSCLR_CTRL_CLRMSK,
    185c:	a3 e5       	ldi	r26, 0x53	; 83
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e3 e5       	ldi	r30, 0x53	; 83
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	88 7f       	andi	r24, 0xF8	; 248
    1868:	82 60       	ori	r24, 0x02	; 2
    186a:	8c 93       	st	X, r24
    186c:	b0 c0       	rjmp	.+352    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM0_SYSCLK_DivideBy8_SETMSK);
			break;
		case _SYSCLK_DivideBy64:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_CLK_PRSCLR_CTRL_CLRMSK,
    186e:	a3 e5       	ldi	r26, 0x53	; 83
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e3 e5       	ldi	r30, 0x53	; 83
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	88 7f       	andi	r24, 0xF8	; 248
    187a:	83 60       	ori	r24, 0x03	; 3
    187c:	8c 93       	st	X, r24
    187e:	a7 c0       	rjmp	.+334    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM0_SYSCLK_DivideBy64_SETMSK);
			break;
		case _SYSCLK_DivideBy256:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_CLK_PRSCLR_CTRL_CLRMSK,
    1880:	a3 e5       	ldi	r26, 0x53	; 83
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e3 e5       	ldi	r30, 0x53	; 83
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	88 7f       	andi	r24, 0xF8	; 248
    188c:	84 60       	ori	r24, 0x04	; 4
    188e:	8c 93       	st	X, r24
    1890:	9e c0       	rjmp	.+316    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM0_SYSCLK_DivideBy256_SETMSK);
			break;
		case _SYSCLK_DivideBy1024:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_CLK_PRSCLR_CTRL_CLRMSK,
    1892:	a3 e5       	ldi	r26, 0x53	; 83
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e3 e5       	ldi	r30, 0x53	; 83
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 7f       	andi	r24, 0xF8	; 248
    189e:	85 60       	ori	r24, 0x05	; 5
    18a0:	8c 93       	st	X, r24
    18a2:	95 c0       	rjmp	.+298    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM0_SYSCLK_DivideBy1024_SETMSK);
			break;
		case _EXTCLK_FallingEdge:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_CLK_PRSCLR_CTRL_CLRMSK,
    18a4:	a3 e5       	ldi	r26, 0x53	; 83
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e3 e5       	ldi	r30, 0x53	; 83
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	88 7f       	andi	r24, 0xF8	; 248
    18b0:	86 60       	ori	r24, 0x06	; 6
    18b2:	8c 93       	st	X, r24
    18b4:	8c c0       	rjmp	.+280    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM0_EXTCLK_FallingEdge_SETMSK);
			break;
		case _EXTCLK_RisingEdge:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_CLK_PRSCLR_CTRL_CLRMSK,
    18b6:	a3 e5       	ldi	r26, 0x53	; 83
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e3 e5       	ldi	r30, 0x53	; 83
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	87 60       	ori	r24, 0x07	; 7
    18c2:	8c 93       	st	X, r24
    18c4:	84 c0       	rjmp	.+264    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM0_EXTCLK_RisingEdge_SETMSK);
			break;
		default:
			retVal = EXIT_FAILURE;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	81 c0       	rjmp	.+258    	; 0x19ce <TIM_CLK_SLCT+0x246>
		break; //end case TIMER0
	case TIMER1:

		break; //end case TIMER1
	case TIMER2:
		switch (clock) {
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	3d 83       	std	Y+5, r19	; 0x05
    18d4:	2c 83       	std	Y+4, r18	; 0x04
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <TIM_CLK_SLCT+0x15a>
    18e0:	45 c0       	rjmp	.+138    	; 0x196c <TIM_CLK_SLCT+0x1e4>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	24 30       	cpi	r18, 0x04	; 4
    18e8:	31 05       	cpc	r19, r1
    18ea:	7c f4       	brge	.+30     	; 0x190a <TIM_CLK_SLCT+0x182>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	49 f1       	breq	.+82     	; 0x1948 <TIM_CLK_SLCT+0x1c0>
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	6c f5       	brge	.+90     	; 0x195a <TIM_CLK_SLCT+0x1d2>
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	c1 f0       	breq	.+48     	; 0x1938 <TIM_CLK_SLCT+0x1b0>
    1908:	5d c0       	rjmp	.+186    	; 0x19c4 <TIM_CLK_SLCT+0x23c>
    190a:	2c 81       	ldd	r18, Y+4	; 0x04
    190c:	3d 81       	ldd	r19, Y+5	; 0x05
    190e:	25 30       	cpi	r18, 0x05	; 5
    1910:	31 05       	cpc	r19, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <TIM_CLK_SLCT+0x18e>
    1914:	3d c0       	rjmp	.+122    	; 0x1990 <TIM_CLK_SLCT+0x208>
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	85 30       	cpi	r24, 0x05	; 5
    191c:	91 05       	cpc	r25, r1
    191e:	7c f1       	brlt	.+94     	; 0x197e <TIM_CLK_SLCT+0x1f6>
    1920:	2c 81       	ldd	r18, Y+4	; 0x04
    1922:	3d 81       	ldd	r19, Y+5	; 0x05
    1924:	26 30       	cpi	r18, 0x06	; 6
    1926:	31 05       	cpc	r19, r1
    1928:	e1 f1       	breq	.+120    	; 0x19a2 <TIM_CLK_SLCT+0x21a>
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	9d 81       	ldd	r25, Y+5	; 0x05
    192e:	87 30       	cpi	r24, 0x07	; 7
    1930:	91 05       	cpc	r25, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <TIM_CLK_SLCT+0x1ae>
    1934:	3f c0       	rjmp	.+126    	; 0x19b4 <TIM_CLK_SLCT+0x22c>
    1936:	46 c0       	rjmp	.+140    	; 0x19c4 <TIM_CLK_SLCT+0x23c>
		case _NoCLK:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_CLK_PRSCLR_CTRL_CLRMSK,
    1938:	a5 e4       	ldi	r26, 0x45	; 69
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e5 e4       	ldi	r30, 0x45	; 69
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	88 7f       	andi	r24, 0xF8	; 248
    1944:	8c 93       	st	X, r24
    1946:	43 c0       	rjmp	.+134    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM2_NoCLK_SETMSK);
			break;
		case _SYSCLK:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_CLK_PRSCLR_CTRL_CLRMSK,
    1948:	a5 e4       	ldi	r26, 0x45	; 69
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e5 e4       	ldi	r30, 0x45	; 69
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	88 7f       	andi	r24, 0xF8	; 248
    1954:	81 60       	ori	r24, 0x01	; 1
    1956:	8c 93       	st	X, r24
    1958:	3a c0       	rjmp	.+116    	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM2_SYSCLK_SETMSK);
			break;
		case _SYSCLK_DivideBy8:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_CLK_PRSCLR_CTRL_CLRMSK,
    195a:	a5 e4       	ldi	r26, 0x45	; 69
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e5 e4       	ldi	r30, 0x45	; 69
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	88 7f       	andi	r24, 0xF8	; 248
    1966:	82 60       	ori	r24, 0x02	; 2
    1968:	8c 93       	st	X, r24
    196a:	31 c0       	rjmp	.+98     	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM2_SYSCLK_DivideBy8_SETMSK);
			break;
		case _SYSCLK_DivideBy64:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_CLK_PRSCLR_CTRL_CLRMSK,
    196c:	a5 e4       	ldi	r26, 0x45	; 69
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e4       	ldi	r30, 0x45	; 69
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	88 7f       	andi	r24, 0xF8	; 248
    1978:	83 60       	ori	r24, 0x03	; 3
    197a:	8c 93       	st	X, r24
    197c:	28 c0       	rjmp	.+80     	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM2_SYSCLK_DivideBy64_SETMSK);
			break;
		case _SYSCLK_DivideBy256:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_CLK_PRSCLR_CTRL_CLRMSK,
    197e:	a5 e4       	ldi	r26, 0x45	; 69
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e5 e4       	ldi	r30, 0x45	; 69
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	88 7f       	andi	r24, 0xF8	; 248
    198a:	84 60       	ori	r24, 0x04	; 4
    198c:	8c 93       	st	X, r24
    198e:	1f c0       	rjmp	.+62     	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM2_SYSCLK_DivideBy256_SETMSK);
			break;
		case _SYSCLK_DivideBy1024:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_CLK_PRSCLR_CTRL_CLRMSK,
    1990:	a5 e4       	ldi	r26, 0x45	; 69
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e5 e4       	ldi	r30, 0x45	; 69
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	88 7f       	andi	r24, 0xF8	; 248
    199c:	85 60       	ori	r24, 0x05	; 5
    199e:	8c 93       	st	X, r24
    19a0:	16 c0       	rjmp	.+44     	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM2_SYSCLK_DivideBy1024_SETMSK);
			break;
		case _EXTCLK_FallingEdge:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_CLK_PRSCLR_CTRL_CLRMSK,
    19a2:	a5 e4       	ldi	r26, 0x45	; 69
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e5 e4       	ldi	r30, 0x45	; 69
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	88 7f       	andi	r24, 0xF8	; 248
    19ae:	86 60       	ori	r24, 0x06	; 6
    19b0:	8c 93       	st	X, r24
    19b2:	0d c0       	rjmp	.+26     	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM2_EXTCLK_FallingEdge_SETMSK);
			break;
		case _EXTCLK_RisingEdge:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_CLK_PRSCLR_CTRL_CLRMSK,
    19b4:	a5 e4       	ldi	r26, 0x45	; 69
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e5 e4       	ldi	r30, 0x45	; 69
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	87 60       	ori	r24, 0x07	; 7
    19c0:	8c 93       	st	X, r24
    19c2:	05 c0       	rjmp	.+10     	; 0x19ce <TIM_CLK_SLCT+0x246>
					TIM2_EXTCLK_RisingEdge_SETMSK);
			break;
		default:
			retVal = EXIT_FAILURE;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <TIM_CLK_SLCT+0x246>
		}
		break; //end case TIMER2
	default:
		retVal = EXIT_FAILURE;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d0:	29 96       	adiw	r28, 0x09	; 9
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <TIM_OC_MODE_SLCT>:
TIM_ERROR_t TIM_OC_MODE_SLCT(TIM_SELECT_t Timer,
		TIM_CMPMATCH_OUTPUT_t compareMatch_output_mode, TIMER_MODE_t mode) {
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	2a 97       	sbiw	r28, 0x0a	; 10
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	8a 83       	std	Y+2, r24	; 0x02
    19f8:	6b 83       	std	Y+3, r22	; 0x03
    19fa:	4c 83       	std	Y+4, r20	; 0x04
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    19fc:	19 82       	std	Y+1, r1	; 0x01
	TIM_Init_OC_PIN(Timer, compareMatch_output_mode);
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	6b 81       	ldd	r22, Y+3	; 0x03
    1a02:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <TIM_Init_OC_PIN>
	switch (Timer) {
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	3a 87       	std	Y+10, r19	; 0x0a
    1a0e:	29 87       	std	Y+9, r18	; 0x09
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	91 05       	cpc	r25, r1
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <TIM_OC_MODE_SLCT+0x3a>
    1a1a:	a7 c0       	rjmp	.+334    	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
    1a1c:	29 85       	ldd	r18, Y+9	; 0x09
    1a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <TIM_OC_MODE_SLCT+0x46>
    1a26:	52 c0       	rjmp	.+164    	; 0x1acc <TIM_OC_MODE_SLCT+0xea>
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <TIM_OC_MODE_SLCT+0x50>
    1a30:	9a c0       	rjmp	.+308    	; 0x1b66 <TIM_OC_MODE_SLCT+0x184>
	case TIMER0:
		switch (compareMatch_output_mode) {
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	38 87       	std	Y+8, r19	; 0x08
    1a3a:	2f 83       	std	Y+7, r18	; 0x07
    1a3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3e:	98 85       	ldd	r25, Y+8	; 0x08
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	91 05       	cpc	r25, r1
    1a44:	e9 f0       	breq	.+58     	; 0x1a80 <TIM_OC_MODE_SLCT+0x9e>
    1a46:	2f 81       	ldd	r18, Y+7	; 0x07
    1a48:	38 85       	ldd	r19, Y+8	; 0x08
    1a4a:	22 30       	cpi	r18, 0x02	; 2
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <TIM_OC_MODE_SLCT+0x78>
    1a50:	8f 81       	ldd	r24, Y+7	; 0x07
    1a52:	98 85       	ldd	r25, Y+8	; 0x08
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	61 f0       	breq	.+24     	; 0x1a70 <TIM_OC_MODE_SLCT+0x8e>
    1a58:	36 c0       	rjmp	.+108    	; 0x1ac6 <TIM_OC_MODE_SLCT+0xe4>
    1a5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a5c:	38 85       	ldd	r19, Y+8	; 0x08
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	01 f1       	breq	.+64     	; 0x1aa4 <TIM_OC_MODE_SLCT+0xc2>
    1a64:	8f 81       	ldd	r24, Y+7	; 0x07
    1a66:	98 85       	ldd	r25, Y+8	; 0x08
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	21 f1       	breq	.+72     	; 0x1ab6 <TIM_OC_MODE_SLCT+0xd4>
    1a6e:	2b c0       	rjmp	.+86     	; 0x1ac6 <TIM_OC_MODE_SLCT+0xe4>
		case CO_DISABLED_MODE:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_OC0_OUTPUT_CTRL_CLRMSK,
    1a70:	a3 e5       	ldi	r26, 0x53	; 83
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e3 e5       	ldi	r30, 0x53	; 83
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	8f 7c       	andi	r24, 0xCF	; 207
    1a7c:	8c 93       	st	X, r24
    1a7e:	75 c0       	rjmp	.+234    	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
					TIM0_CO_DISABLED_MODE_SETMSK);
			break;
		case CO_TOGGLE_MODE:
			if (mode == Normal || mode == CLR_Timer_OnCompare) {
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	88 23       	and	r24, r24
    1a84:	19 f0       	breq	.+6      	; 0x1a8c <TIM_OC_MODE_SLCT+0xaa>
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	49 f4       	brne	.+18     	; 0x1a9e <TIM_OC_MODE_SLCT+0xbc>
				MODIFY_REG(TIM0_Ctrl_REG, TIM0_OC0_OUTPUT_CTRL_CLRMSK,
    1a8c:	a3 e5       	ldi	r26, 0x53	; 83
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e3 e5       	ldi	r30, 0x53	; 83
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8f 7c       	andi	r24, 0xCF	; 207
    1a98:	80 61       	ori	r24, 0x10	; 16
    1a9a:	8c 93       	st	X, r24
    1a9c:	66 c0       	rjmp	.+204    	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
						TIM0_CO_TOGGLE_MODE_SETMSK);
			} else {
				retVal = EXIT_FAILURE;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	63 c0       	rjmp	.+198    	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
			}
			break;
		case CO_CLEAR_MODE:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_OC0_OUTPUT_CTRL_CLRMSK,
    1aa4:	a3 e5       	ldi	r26, 0x53	; 83
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e3 e5       	ldi	r30, 0x53	; 83
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8f 7c       	andi	r24, 0xCF	; 207
    1ab0:	80 62       	ori	r24, 0x20	; 32
    1ab2:	8c 93       	st	X, r24
    1ab4:	5a c0       	rjmp	.+180    	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
					TIM0_CO_CLEAR_MODE_SETMSK);
			break;
		case CO_SET_MODE:
			MODIFY_REG(TIM0_Ctrl_REG, TIM0_OC0_OUTPUT_CTRL_CLRMSK,
    1ab6:	a3 e5       	ldi	r26, 0x53	; 83
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e3 e5       	ldi	r30, 0x53	; 83
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 63       	ori	r24, 0x30	; 48
    1ac2:	8c 93       	st	X, r24
    1ac4:	52 c0       	rjmp	.+164    	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
					TIM0_CO_SET_MODE_SETMSK);
			break;
		default:
			retVal = EXIT_FAILURE;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	4f c0       	rjmp	.+158    	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
		}
		break;
	case TIMER1:
		break;
	case TIMER2:
		switch (compareMatch_output_mode) {
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	3e 83       	std	Y+6, r19	; 0x06
    1ad4:	2d 83       	std	Y+5, r18	; 0x05
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	e9 f0       	breq	.+58     	; 0x1b1a <TIM_OC_MODE_SLCT+0x138>
    1ae0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ae2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <TIM_OC_MODE_SLCT+0x112>
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <TIM_OC_MODE_SLCT+0x128>
    1af2:	36 c0       	rjmp	.+108    	; 0x1b60 <TIM_OC_MODE_SLCT+0x17e>
    1af4:	2d 81       	ldd	r18, Y+5	; 0x05
    1af6:	3e 81       	ldd	r19, Y+6	; 0x06
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	01 f1       	breq	.+64     	; 0x1b3e <TIM_OC_MODE_SLCT+0x15c>
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	91 05       	cpc	r25, r1
    1b06:	21 f1       	breq	.+72     	; 0x1b50 <TIM_OC_MODE_SLCT+0x16e>
    1b08:	2b c0       	rjmp	.+86     	; 0x1b60 <TIM_OC_MODE_SLCT+0x17e>
		case CO_DISABLED_MODE:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_OC2_OUTPUT_CTRL_CLRMSK,
    1b0a:	a5 e4       	ldi	r26, 0x45	; 69
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e5 e4       	ldi	r30, 0x45	; 69
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8f 7c       	andi	r24, 0xCF	; 207
    1b16:	8c 93       	st	X, r24
    1b18:	28 c0       	rjmp	.+80     	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
					TIM2_CO_DISABLED_MODE_SETMSK);
			break;
		case CO_TOGGLE_MODE:
			if (mode == Normal || mode == CLR_Timer_OnCompare) {
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	88 23       	and	r24, r24
    1b1e:	19 f0       	breq	.+6      	; 0x1b26 <TIM_OC_MODE_SLCT+0x144>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	49 f4       	brne	.+18     	; 0x1b38 <TIM_OC_MODE_SLCT+0x156>
				MODIFY_REG(TIM2_Ctrl_REG, TIM2_OC2_OUTPUT_CTRL_CLRMSK,
    1b26:	a5 e4       	ldi	r26, 0x45	; 69
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e5 e4       	ldi	r30, 0x45	; 69
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8f 7c       	andi	r24, 0xCF	; 207
    1b32:	80 61       	ori	r24, 0x10	; 16
    1b34:	8c 93       	st	X, r24
    1b36:	19 c0       	rjmp	.+50     	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
						TIM2_CO_TOGGLE_MODE_SETMSK);
			} else {
				retVal = EXIT_FAILURE;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	16 c0       	rjmp	.+44     	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
			}
			break;
		case CO_CLEAR_MODE:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_OC2_OUTPUT_CTRL_CLRMSK,
    1b3e:	a5 e4       	ldi	r26, 0x45	; 69
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e4       	ldi	r30, 0x45	; 69
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 7c       	andi	r24, 0xCF	; 207
    1b4a:	80 62       	ori	r24, 0x20	; 32
    1b4c:	8c 93       	st	X, r24
    1b4e:	0d c0       	rjmp	.+26     	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
					TIM2_CO_CLEAR_MODE_SETMSK);
			break;
		case CO_SET_MODE:
			MODIFY_REG(TIM2_Ctrl_REG, TIM2_OC2_OUTPUT_CTRL_CLRMSK,
    1b50:	a5 e4       	ldi	r26, 0x45	; 69
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e5 e4       	ldi	r30, 0x45	; 69
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 63       	ori	r24, 0x30	; 48
    1b5c:	8c 93       	st	X, r24
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
					TIM2_CO_SET_MODE_SETMSK);
			break;
		default:
			retVal = EXIT_FAILURE;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <TIM_OC_MODE_SLCT+0x188>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6c:	2a 96       	adiw	r28, 0x0a	; 10
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <TIM_Interrupt_Enable>:
TIM_ERROR_t TIM_Interrupt_Enable(TIM_SELECT_t Timer, TIM_Interrupt_t interrupt) {
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	29 97       	sbiw	r28, 0x09	; 9
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	8a 83       	std	Y+2, r24	; 0x02
    1b94:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    1b96:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STATUS_REG, GLOBAL_Interrupt_Enable_BIT);
    1b98:	af e5       	ldi	r26, 0x5F	; 95
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ef e5       	ldi	r30, 0x5F	; 95
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 68       	ori	r24, 0x80	; 128
    1ba4:	8c 93       	st	X, r24

	switch (Timer) {
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	39 87       	std	Y+9, r19	; 0x09
    1bae:	28 87       	std	Y+8, r18	; 0x08
    1bb0:	88 85       	ldd	r24, Y+8	; 0x08
    1bb2:	99 85       	ldd	r25, Y+9	; 0x09
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <TIM_Interrupt_Enable+0x3e>
    1bba:	4f c0       	rjmp	.+158    	; 0x1c5a <TIM_Interrupt_Enable+0xdc>
    1bbc:	28 85       	ldd	r18, Y+8	; 0x08
    1bbe:	39 85       	ldd	r19, Y+9	; 0x09
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	39 f1       	breq	.+78     	; 0x1c14 <TIM_Interrupt_Enable+0x96>
    1bc6:	88 85       	ldd	r24, Y+8	; 0x08
    1bc8:	99 85       	ldd	r25, Y+9	; 0x09
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <TIM_Interrupt_Enable+0x52>
    1bce:	43 c0       	rjmp	.+134    	; 0x1c56 <TIM_Interrupt_Enable+0xd8>
	case TIMER0:
		switch (interrupt) {
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	3f 83       	std	Y+7, r19	; 0x07
    1bd8:	2e 83       	std	Y+6, r18	; 0x06
    1bda:	8e 81       	ldd	r24, Y+6	; 0x06
    1bdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	31 f0       	breq	.+12     	; 0x1bee <TIM_Interrupt_Enable+0x70>
    1be2:	2e 81       	ldd	r18, Y+6	; 0x06
    1be4:	3f 81       	ldd	r19, Y+7	; 0x07
    1be6:	21 30       	cpi	r18, 0x01	; 1
    1be8:	31 05       	cpc	r19, r1
    1bea:	49 f0       	breq	.+18     	; 0x1bfe <TIM_Interrupt_Enable+0x80>
    1bec:	10 c0       	rjmp	.+32     	; 0x1c0e <TIM_Interrupt_Enable+0x90>
		case TIM0OVF:
			SET_BIT(TIMS_InterruptMask_REG, TIM0_OverFlow_Interrupt_Enable_BIT);
    1bee:	a9 e5       	ldi	r26, 0x59	; 89
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e9 e5       	ldi	r30, 0x59	; 89
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	81 60       	ori	r24, 0x01	; 1
    1bfa:	8c 93       	st	X, r24
    1bfc:	2e c0       	rjmp	.+92     	; 0x1c5a <TIM_Interrupt_Enable+0xdc>
			break;
		case TIM0COMP:
			SET_BIT(TIMS_InterruptMask_REG,
    1bfe:	a9 e5       	ldi	r26, 0x59	; 89
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e9 e5       	ldi	r30, 0x59	; 89
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	82 60       	ori	r24, 0x02	; 2
    1c0a:	8c 93       	st	X, r24
    1c0c:	26 c0       	rjmp	.+76     	; 0x1c5a <TIM_Interrupt_Enable+0xdc>
					TIM0_OutputComp_Interrupt_Enable_BIT);
			break;
		default:
			retVal = EXIT_FAILURE;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	23 c0       	rjmp	.+70     	; 0x1c5a <TIM_Interrupt_Enable+0xdc>
		}
		break;
	case TIMER1:
		break;
	case TIMER2:
		switch (interrupt) {
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3d 83       	std	Y+5, r19	; 0x05
    1c1c:	2c 83       	std	Y+4, r18	; 0x04
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	9d 81       	ldd	r25, Y+5	; 0x05
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f0       	breq	.+26     	; 0x1c40 <TIM_Interrupt_Enable+0xc2>
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	21 30       	cpi	r18, 0x01	; 1
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	81 f4       	brne	.+32     	; 0x1c50 <TIM_Interrupt_Enable+0xd2>
		case TIM2OVF:
			SET_BIT(TIMS_InterruptMask_REG, TIM2_OverFlow_Interrupt_Enable_BIT);
    1c30:	a9 e5       	ldi	r26, 0x59	; 89
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e9 e5       	ldi	r30, 0x59	; 89
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	80 64       	ori	r24, 0x40	; 64
    1c3c:	8c 93       	st	X, r24
    1c3e:	0d c0       	rjmp	.+26     	; 0x1c5a <TIM_Interrupt_Enable+0xdc>
			break;
		case TIM2COMP:
			SET_BIT(TIMS_InterruptMask_REG,
    1c40:	a9 e5       	ldi	r26, 0x59	; 89
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e9 e5       	ldi	r30, 0x59	; 89
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	80 68       	ori	r24, 0x80	; 128
    1c4c:	8c 93       	st	X, r24
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <TIM_Interrupt_Enable+0xdc>
					TIM2_OutputComp_Interrupt_Enable_BIT);
			break;
		default:
			retVal = EXIT_FAILURE;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <TIM_Interrupt_Enable+0xdc>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5c:	29 96       	adiw	r28, 0x09	; 9
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <TIM_Interrupt_Disable>:
TIM_ERROR_t TIM_Interrupt_Disable(TIM_SELECT_t Timer, TIM_Interrupt_t interrupt) {
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	29 97       	sbiw	r28, 0x09	; 9
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	8a 83       	std	Y+2, r24	; 0x02
    1c84:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    1c86:	19 82       	std	Y+1, r1	; 0x01
	switch (Timer) {
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	39 87       	std	Y+9, r19	; 0x09
    1c90:	28 87       	std	Y+8, r18	; 0x08
    1c92:	88 85       	ldd	r24, Y+8	; 0x08
    1c94:	99 85       	ldd	r25, Y+9	; 0x09
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <TIM_Interrupt_Disable+0x30>
    1c9c:	4f c0       	rjmp	.+158    	; 0x1d3c <TIM_Interrupt_Disable+0xce>
    1c9e:	28 85       	ldd	r18, Y+8	; 0x08
    1ca0:	39 85       	ldd	r19, Y+9	; 0x09
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	39 f1       	breq	.+78     	; 0x1cf6 <TIM_Interrupt_Disable+0x88>
    1ca8:	88 85       	ldd	r24, Y+8	; 0x08
    1caa:	99 85       	ldd	r25, Y+9	; 0x09
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <TIM_Interrupt_Disable+0x44>
    1cb0:	43 c0       	rjmp	.+134    	; 0x1d38 <TIM_Interrupt_Disable+0xca>
	case TIMER0:
		switch (interrupt) {
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3f 83       	std	Y+7, r19	; 0x07
    1cba:	2e 83       	std	Y+6, r18	; 0x06
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	31 f0       	breq	.+12     	; 0x1cd0 <TIM_Interrupt_Disable+0x62>
    1cc4:	2e 81       	ldd	r18, Y+6	; 0x06
    1cc6:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc8:	21 30       	cpi	r18, 0x01	; 1
    1cca:	31 05       	cpc	r19, r1
    1ccc:	49 f0       	breq	.+18     	; 0x1ce0 <TIM_Interrupt_Disable+0x72>
    1cce:	10 c0       	rjmp	.+32     	; 0x1cf0 <TIM_Interrupt_Disable+0x82>
		case TIM0OVF:
			CLEAR_BIT(TIMS_InterruptMask_REG,
    1cd0:	a9 e5       	ldi	r26, 0x59	; 89
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e9 e5       	ldi	r30, 0x59	; 89
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	8e 7f       	andi	r24, 0xFE	; 254
    1cdc:	8c 93       	st	X, r24
    1cde:	2e c0       	rjmp	.+92     	; 0x1d3c <TIM_Interrupt_Disable+0xce>
					TIM0_OverFlow_Interrupt_Enable_BIT);
			break;
		case TIM0COMP:
			CLEAR_BIT(TIMS_InterruptMask_REG,
    1ce0:	a9 e5       	ldi	r26, 0x59	; 89
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e9 e5       	ldi	r30, 0x59	; 89
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8d 7f       	andi	r24, 0xFD	; 253
    1cec:	8c 93       	st	X, r24
    1cee:	26 c0       	rjmp	.+76     	; 0x1d3c <TIM_Interrupt_Disable+0xce>
					TIM0_OutputComp_Interrupt_Enable_BIT);
			break;
		default:
			retVal = EXIT_FAILURE;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	23 c0       	rjmp	.+70     	; 0x1d3c <TIM_Interrupt_Disable+0xce>
		}
		break;
	case TIMER1:
		break;
	case TIMER2:
		switch (interrupt) {
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3d 83       	std	Y+5, r19	; 0x05
    1cfe:	2c 83       	std	Y+4, r18	; 0x04
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	69 f0       	breq	.+26     	; 0x1d22 <TIM_Interrupt_Disable+0xb4>
    1d08:	2c 81       	ldd	r18, Y+4	; 0x04
    1d0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d0c:	21 30       	cpi	r18, 0x01	; 1
    1d0e:	31 05       	cpc	r19, r1
    1d10:	81 f4       	brne	.+32     	; 0x1d32 <TIM_Interrupt_Disable+0xc4>
		case TIM2OVF:
			CLEAR_BIT(TIMS_InterruptMask_REG,
    1d12:	a9 e5       	ldi	r26, 0x59	; 89
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e9 e5       	ldi	r30, 0x59	; 89
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 7b       	andi	r24, 0xBF	; 191
    1d1e:	8c 93       	st	X, r24
    1d20:	0d c0       	rjmp	.+26     	; 0x1d3c <TIM_Interrupt_Disable+0xce>
					TIM2_OverFlow_Interrupt_Enable_BIT);
			break;
		case TIM2COMP:
			CLEAR_BIT(TIMS_InterruptMask_REG,
    1d22:	a9 e5       	ldi	r26, 0x59	; 89
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e9 e5       	ldi	r30, 0x59	; 89
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 77       	andi	r24, 0x7F	; 127
    1d2e:	8c 93       	st	X, r24
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <TIM_Interrupt_Disable+0xce>
					TIM2_OutputComp_Interrupt_Enable_BIT);
			break;
		default:
			retVal = EXIT_FAILURE;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <TIM_Interrupt_Disable+0xce>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d3e:	29 96       	adiw	r28, 0x09	; 9
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <TIM_Flag_Get>:
TIM_FLAG_STAT_t TIM_Flag_Get(TIM_SELECT_t Timer, TIM_Interrupt_t interrupt) {
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	29 97       	sbiw	r28, 0x09	; 9
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	6b 83       	std	Y+3, r22	; 0x03
	TIM_FLAG_STAT_t retVal = TIM_FLAG_DOWN;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	switch (Timer) {
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	39 87       	std	Y+9, r19	; 0x09
    1d74:	28 87       	std	Y+8, r18	; 0x08
    1d76:	88 85       	ldd	r24, Y+8	; 0x08
    1d78:	99 85       	ldd	r25, Y+9	; 0x09
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <TIM_Flag_Get+0x32>
    1d80:	59 c0       	rjmp	.+178    	; 0x1e34 <TIM_Flag_Get+0xe4>
    1d82:	28 85       	ldd	r18, Y+8	; 0x08
    1d84:	39 85       	ldd	r19, Y+9	; 0x09
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	41 f1       	breq	.+80     	; 0x1ddc <TIM_Flag_Get+0x8c>
    1d8c:	88 85       	ldd	r24, Y+8	; 0x08
    1d8e:	99 85       	ldd	r25, Y+9	; 0x09
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <TIM_Flag_Get+0x46>
    1d94:	4d c0       	rjmp	.+154    	; 0x1e30 <TIM_Flag_Get+0xe0>
	case TIMER0:
		switch (interrupt) {
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	3f 83       	std	Y+7, r19	; 0x07
    1d9e:	2e 83       	std	Y+6, r18	; 0x06
    1da0:	8e 81       	ldd	r24, Y+6	; 0x06
    1da2:	9f 81       	ldd	r25, Y+7	; 0x07
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	31 f0       	breq	.+12     	; 0x1db4 <TIM_Flag_Get+0x64>
    1da8:	2e 81       	ldd	r18, Y+6	; 0x06
    1daa:	3f 81       	ldd	r19, Y+7	; 0x07
    1dac:	21 30       	cpi	r18, 0x01	; 1
    1dae:	31 05       	cpc	r19, r1
    1db0:	39 f0       	breq	.+14     	; 0x1dc0 <TIM_Flag_Get+0x70>
    1db2:	11 c0       	rjmp	.+34     	; 0x1dd6 <TIM_Flag_Get+0x86>
		case TIM0OVF:
			retVal = READ_BIT(TIMS_InterruptFlag_REG,
    1db4:	e8 e5       	ldi	r30, 0x58	; 88
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	81 70       	andi	r24, 0x01	; 1
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	3a c0       	rjmp	.+116    	; 0x1e34 <TIM_Flag_Get+0xe4>
					TIM0_OVF_Interrupt_Flg_BIT);
			break;
		case TIM0COMP:
			retVal = READ_BIT(TIMS_InterruptFlag_REG,
    1dc0:	e8 e5       	ldi	r30, 0x58	; 88
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	88 2f       	mov	r24, r24
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	82 70       	andi	r24, 0x02	; 2
    1dcc:	90 70       	andi	r25, 0x00	; 0
    1dce:	95 95       	asr	r25
    1dd0:	87 95       	ror	r24
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	2f c0       	rjmp	.+94     	; 0x1e34 <TIM_Flag_Get+0xe4>
					TIM0_OC_Interrupt_Flg_BIT);
			break;
		default:
			retVal = EXIT_FAILURE;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	2c c0       	rjmp	.+88     	; 0x1e34 <TIM_Flag_Get+0xe4>

		break;
	case TIMER1:
		break;
	case TIMER2:
		switch (interrupt) {
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	3d 83       	std	Y+5, r19	; 0x05
    1de4:	2c 83       	std	Y+4, r18	; 0x04
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	b1 f0       	breq	.+44     	; 0x1e1a <TIM_Flag_Get+0xca>
    1dee:	2c 81       	ldd	r18, Y+4	; 0x04
    1df0:	3d 81       	ldd	r19, Y+5	; 0x05
    1df2:	21 30       	cpi	r18, 0x01	; 1
    1df4:	31 05       	cpc	r19, r1
    1df6:	c9 f4       	brne	.+50     	; 0x1e2a <TIM_Flag_Get+0xda>
		case TIM2OVF:
			retVal = READ_BIT(TIMS_InterruptFlag_REG,
    1df8:	e8 e5       	ldi	r30, 0x58	; 88
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 2f       	mov	r24, r24
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	80 74       	andi	r24, 0x40	; 64
    1e04:	90 70       	andi	r25, 0x00	; 0
    1e06:	08 2e       	mov	r0, r24
    1e08:	89 2f       	mov	r24, r25
    1e0a:	00 0c       	add	r0, r0
    1e0c:	88 1f       	adc	r24, r24
    1e0e:	99 0b       	sbc	r25, r25
    1e10:	00 0c       	add	r0, r0
    1e12:	88 1f       	adc	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	0d c0       	rjmp	.+26     	; 0x1e34 <TIM_Flag_Get+0xe4>
					TIM2_OVF_Interrupt_Flg_BIT);
			break;
		case TIM2COMP:
			retVal = READ_BIT(TIMS_InterruptFlag_REG,
    1e1a:	e8 e5       	ldi	r30, 0x58	; 88
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 1f       	adc	r24, r24
    1e22:	88 27       	eor	r24, r24
    1e24:	88 1f       	adc	r24, r24
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <TIM_Flag_Get+0xe4>
					TIM2_OC_Interrupt_Flg_BIT);
			break;
		default:
			retVal = EXIT_FAILURE;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <TIM_Flag_Get+0xe4>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	89 83       	std	Y+1, r24	; 0x01
	}

	return retVal;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e36:	29 96       	adiw	r28, 0x09	; 9
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <TIM_Flag_Reset>:
TIM_ERROR_t TIM_Flag_Reset(TIM_SELECT_t Timer, TIM_Interrupt_t interrupt) {
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	29 97       	sbiw	r28, 0x09	; 9
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	8a 83       	std	Y+2, r24	; 0x02
    1e5e:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    1e60:	19 82       	std	Y+1, r1	; 0x01
	switch (Timer) {
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	39 87       	std	Y+9, r19	; 0x09
    1e6a:	28 87       	std	Y+8, r18	; 0x08
    1e6c:	88 85       	ldd	r24, Y+8	; 0x08
    1e6e:	99 85       	ldd	r25, Y+9	; 0x09
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	91 05       	cpc	r25, r1
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <TIM_Flag_Reset+0x30>
    1e76:	57 c0       	rjmp	.+174    	; 0x1f26 <TIM_Flag_Reset+0xde>
    1e78:	28 85       	ldd	r18, Y+8	; 0x08
    1e7a:	39 85       	ldd	r19, Y+9	; 0x09
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	31 05       	cpc	r19, r1
    1e80:	59 f1       	breq	.+86     	; 0x1ed8 <TIM_Flag_Reset+0x90>
    1e82:	88 85       	ldd	r24, Y+8	; 0x08
    1e84:	99 85       	ldd	r25, Y+9	; 0x09
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <TIM_Flag_Reset+0x44>
    1e8a:	4b c0       	rjmp	.+150    	; 0x1f22 <TIM_Flag_Reset+0xda>
	case TIMER0:
		switch (interrupt) {
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	3f 83       	std	Y+7, r19	; 0x07
    1e94:	2e 83       	std	Y+6, r18	; 0x06
    1e96:	8e 81       	ldd	r24, Y+6	; 0x06
    1e98:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <TIM_Flag_Reset+0x62>
    1e9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ea2:	21 30       	cpi	r18, 0x01	; 1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	59 f0       	breq	.+22     	; 0x1ebe <TIM_Flag_Reset+0x76>
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <TIM_Flag_Reset+0x8a>
		case TIM0OVF:
			retVal = SET_BIT(TIMS_InterruptFlag_REG,
    1eaa:	a8 e5       	ldi	r26, 0x58	; 88
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e8 e5       	ldi	r30, 0x58	; 88
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	81 60       	ori	r24, 0x01	; 1
    1eb6:	8c 93       	st	X, r24
    1eb8:	8c 91       	ld	r24, X
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	34 c0       	rjmp	.+104    	; 0x1f26 <TIM_Flag_Reset+0xde>
					TIM0_OVF_Interrupt_Flg_BIT);
			break;
		case TIM0COMP:
			retVal = SET_BIT(TIMS_InterruptFlag_REG, TIM0_OC_Interrupt_Flg_BIT);
    1ebe:	a8 e5       	ldi	r26, 0x58	; 88
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e8 e5       	ldi	r30, 0x58	; 88
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	82 60       	ori	r24, 0x02	; 2
    1eca:	8c 93       	st	X, r24
    1ecc:	8c 91       	ld	r24, X
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	2a c0       	rjmp	.+84     	; 0x1f26 <TIM_Flag_Reset+0xde>
			break;
		default:
			retVal = EXIT_FAILURE;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	27 c0       	rjmp	.+78     	; 0x1f26 <TIM_Flag_Reset+0xde>

		break;
	case TIMER1:
		break;
	case TIMER2:
		switch (interrupt) {
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	3d 83       	std	Y+5, r19	; 0x05
    1ee0:	2c 83       	std	Y+4, r18	; 0x04
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	79 f0       	breq	.+30     	; 0x1f08 <TIM_Flag_Reset+0xc0>
    1eea:	2c 81       	ldd	r18, Y+4	; 0x04
    1eec:	3d 81       	ldd	r19, Y+5	; 0x05
    1eee:	21 30       	cpi	r18, 0x01	; 1
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	a1 f4       	brne	.+40     	; 0x1f1c <TIM_Flag_Reset+0xd4>
		case TIM2OVF:
			retVal = SET_BIT(TIMS_InterruptFlag_REG,
    1ef4:	a8 e5       	ldi	r26, 0x58	; 88
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e8 e5       	ldi	r30, 0x58	; 88
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	80 64       	ori	r24, 0x40	; 64
    1f00:	8c 93       	st	X, r24
    1f02:	8c 91       	ld	r24, X
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <TIM_Flag_Reset+0xde>
					TIM2_OVF_Interrupt_Flg_BIT);
			break;
		case TIM2COMP:
			retVal = SET_BIT(TIMS_InterruptFlag_REG, TIM2_OC_Interrupt_Flg_BIT);
    1f08:	a8 e5       	ldi	r26, 0x58	; 88
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e8 e5       	ldi	r30, 0x58	; 88
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	80 68       	ori	r24, 0x80	; 128
    1f14:	8c 93       	st	X, r24
    1f16:	8c 91       	ld	r24, X
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	05 c0       	rjmp	.+10     	; 0x1f26 <TIM_Flag_Reset+0xde>
			break;
		default:
			retVal = EXIT_FAILURE;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <TIM_Flag_Reset+0xde>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f28:	29 96       	adiw	r28, 0x09	; 9
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <TIM_Init_OC_PIN>:
TIM_ERROR_t TIM_Init_OC_PIN(TIM_SELECT_t Timer,
		TIM_CMPMATCH_OUTPUT_t compareMatch_output_mode) {
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <TIM_Init_OC_PIN+0x6>
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <TIM_Init_OC_PIN+0x8>
    1f42:	0f 92       	push	r0
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	8a 83       	std	Y+2, r24	; 0x02
    1f4a:	6b 83       	std	Y+3, r22	; 0x03
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    1f4c:	19 82       	std	Y+1, r1	; 0x01
	switch (Timer) {
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	3d 83       	std	Y+5, r19	; 0x05
    1f56:	2c 83       	std	Y+4, r18	; 0x04
    1f58:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	91 05       	cpc	r25, r1
    1f60:	29 f1       	breq	.+74     	; 0x1fac <TIM_Init_OC_PIN+0x72>
    1f62:	2c 81       	ldd	r18, Y+4	; 0x04
    1f64:	3d 81       	ldd	r19, Y+5	; 0x05
    1f66:	22 30       	cpi	r18, 0x02	; 2
    1f68:	31 05       	cpc	r19, r1
    1f6a:	89 f0       	breq	.+34     	; 0x1f8e <TIM_Init_OC_PIN+0x54>
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	d1 f4       	brne	.+52     	; 0x1fa8 <TIM_Init_OC_PIN+0x6e>
	case TIMER0:
		if (compareMatch_output_mode != CO_DISABLED_MODE) {
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	88 23       	and	r24, r24
    1f78:	39 f0       	breq	.+14     	; 0x1f88 <TIM_Init_OC_PIN+0x4e>
			retVal = DIO_SetPinDirection(PORTB, PIN3, PIN_OUTPUT);
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	63 e0       	ldi	r22, 0x03	; 3
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	12 c0       	rjmp	.+36     	; 0x1fac <TIM_Init_OC_PIN+0x72>
		} else {
			retVal = EXIT_FAILURE;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <TIM_Init_OC_PIN+0x72>
		}
		break;
	case TIMER1:
		break;
	case TIMER2:
		if (compareMatch_output_mode != CO_DISABLED_MODE) {
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	88 23       	and	r24, r24
    1f92:	39 f0       	breq	.+14     	; 0x1fa2 <TIM_Init_OC_PIN+0x68>
			retVal = DIO_SetPinDirection(PORTD, PIN7, PIN_OUTPUT);
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	67 e0       	ldi	r22, 0x07	; 7
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	05 c0       	rjmp	.+10     	; 0x1fac <TIM_Init_OC_PIN+0x72>
		} else {
			retVal = EXIT_FAILURE;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <TIM_Init_OC_PIN+0x72>
		}
		break;
	default:
		retVal = EXIT_FAILURE;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <__vector_11>:
void __vector_11(void) {
    1fbe:	1f 92       	push	r1
    1fc0:	0f 92       	push	r0
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	0f 92       	push	r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	2f 93       	push	r18
    1fca:	3f 93       	push	r19
    1fcc:	4f 93       	push	r20
    1fce:	5f 93       	push	r21
    1fd0:	6f 93       	push	r22
    1fd2:	7f 93       	push	r23
    1fd4:	8f 93       	push	r24
    1fd6:	9f 93       	push	r25
    1fd8:	af 93       	push	r26
    1fda:	bf 93       	push	r27
    1fdc:	ef 93       	push	r30
    1fde:	ff 93       	push	r31
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
	if (TIM0_OVFAction_callback != NULL)
    1fe8:	80 91 98 01 	lds	r24, 0x0198
    1fec:	90 91 99 01 	lds	r25, 0x0199
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	29 f0       	breq	.+10     	; 0x1ffe <__vector_11+0x40>
		TIM0_OVFAction_callback();
    1ff4:	e0 91 98 01 	lds	r30, 0x0198
    1ff8:	f0 91 99 01 	lds	r31, 0x0199
    1ffc:	09 95       	icall
}
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	bf 91       	pop	r27
    2008:	af 91       	pop	r26
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	7f 91       	pop	r23
    2010:	6f 91       	pop	r22
    2012:	5f 91       	pop	r21
    2014:	4f 91       	pop	r20
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <__vector_10>:
void __vector_10(void) {
    2024:	1f 92       	push	r1
    2026:	0f 92       	push	r0
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	0f 92       	push	r0
    202c:	11 24       	eor	r1, r1
    202e:	2f 93       	push	r18
    2030:	3f 93       	push	r19
    2032:	4f 93       	push	r20
    2034:	5f 93       	push	r21
    2036:	6f 93       	push	r22
    2038:	7f 93       	push	r23
    203a:	8f 93       	push	r24
    203c:	9f 93       	push	r25
    203e:	af 93       	push	r26
    2040:	bf 93       	push	r27
    2042:	ef 93       	push	r30
    2044:	ff 93       	push	r31
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
	if (TIM0_OCAction_callback != NULL)
    204e:	80 91 9a 01 	lds	r24, 0x019A
    2052:	90 91 9b 01 	lds	r25, 0x019B
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	29 f0       	breq	.+10     	; 0x2064 <__vector_10+0x40>
		TIM0_OCAction_callback();
    205a:	e0 91 9a 01 	lds	r30, 0x019A
    205e:	f0 91 9b 01 	lds	r31, 0x019B
    2062:	09 95       	icall
}
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	ff 91       	pop	r31
    206a:	ef 91       	pop	r30
    206c:	bf 91       	pop	r27
    206e:	af 91       	pop	r26
    2070:	9f 91       	pop	r25
    2072:	8f 91       	pop	r24
    2074:	7f 91       	pop	r23
    2076:	6f 91       	pop	r22
    2078:	5f 91       	pop	r21
    207a:	4f 91       	pop	r20
    207c:	3f 91       	pop	r19
    207e:	2f 91       	pop	r18
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_5>:
void __vector_5(void) {
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	11 24       	eor	r1, r1
    2094:	2f 93       	push	r18
    2096:	3f 93       	push	r19
    2098:	4f 93       	push	r20
    209a:	5f 93       	push	r21
    209c:	6f 93       	push	r22
    209e:	7f 93       	push	r23
    20a0:	8f 93       	push	r24
    20a2:	9f 93       	push	r25
    20a4:	af 93       	push	r26
    20a6:	bf 93       	push	r27
    20a8:	ef 93       	push	r30
    20aa:	ff 93       	push	r31
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	if (TIM2_OVFAction_callback != NULL)
    20b4:	80 91 9c 01 	lds	r24, 0x019C
    20b8:	90 91 9d 01 	lds	r25, 0x019D
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	29 f0       	breq	.+10     	; 0x20ca <__vector_5+0x40>
		TIM2_OVFAction_callback();
    20c0:	e0 91 9c 01 	lds	r30, 0x019C
    20c4:	f0 91 9d 01 	lds	r31, 0x019D
    20c8:	09 95       	icall
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	ff 91       	pop	r31
    20d0:	ef 91       	pop	r30
    20d2:	bf 91       	pop	r27
    20d4:	af 91       	pop	r26
    20d6:	9f 91       	pop	r25
    20d8:	8f 91       	pop	r24
    20da:	7f 91       	pop	r23
    20dc:	6f 91       	pop	r22
    20de:	5f 91       	pop	r21
    20e0:	4f 91       	pop	r20
    20e2:	3f 91       	pop	r19
    20e4:	2f 91       	pop	r18
    20e6:	0f 90       	pop	r0
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	0f 90       	pop	r0
    20ec:	1f 90       	pop	r1
    20ee:	18 95       	reti

000020f0 <__vector_4>:
void __vector_4(void) {
    20f0:	1f 92       	push	r1
    20f2:	0f 92       	push	r0
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	0f 92       	push	r0
    20f8:	11 24       	eor	r1, r1
    20fa:	2f 93       	push	r18
    20fc:	3f 93       	push	r19
    20fe:	4f 93       	push	r20
    2100:	5f 93       	push	r21
    2102:	6f 93       	push	r22
    2104:	7f 93       	push	r23
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	af 93       	push	r26
    210c:	bf 93       	push	r27
    210e:	ef 93       	push	r30
    2110:	ff 93       	push	r31
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	if (TIM2_OCAction_callback != NULL)
    211a:	80 91 9e 01 	lds	r24, 0x019E
    211e:	90 91 9f 01 	lds	r25, 0x019F
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	29 f0       	breq	.+10     	; 0x2130 <__vector_4+0x40>
		TIM2_OCAction_callback();
    2126:	e0 91 9e 01 	lds	r30, 0x019E
    212a:	f0 91 9f 01 	lds	r31, 0x019F
    212e:	09 95       	icall
}
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	ff 91       	pop	r31
    2136:	ef 91       	pop	r30
    2138:	bf 91       	pop	r27
    213a:	af 91       	pop	r26
    213c:	9f 91       	pop	r25
    213e:	8f 91       	pop	r24
    2140:	7f 91       	pop	r23
    2142:	6f 91       	pop	r22
    2144:	5f 91       	pop	r21
    2146:	4f 91       	pop	r20
    2148:	3f 91       	pop	r19
    214a:	2f 91       	pop	r18
    214c:	0f 90       	pop	r0
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	0f 90       	pop	r0
    2152:	1f 90       	pop	r1
    2154:	18 95       	reti

00002156 <TIM_Delay_US>:

TIM_ERROR_t TIM_Delay_US(TIM_SELECT_t Timer, Delay_value_t delayVal) {
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	2b 97       	sbiw	r28, 0x0b	; 11
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	4e 83       	std	Y+6, r20	; 0x06
    216e:	5f 83       	std	Y+7, r21	; 0x07
    2170:	68 87       	std	Y+8, r22	; 0x08
    2172:	79 87       	std	Y+9, r23	; 0x09
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    2174:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t i = 0;
    2176:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t quotant = delayVal / 256;
    2178:	8e 81       	ldd	r24, Y+6	; 0x06
    217a:	9f 81       	ldd	r25, Y+7	; 0x07
    217c:	a8 85       	ldd	r26, Y+8	; 0x08
    217e:	b9 85       	ldd	r27, Y+9	; 0x09
    2180:	89 2f       	mov	r24, r25
    2182:	9a 2f       	mov	r25, r26
    2184:	ab 2f       	mov	r26, r27
    2186:	bb 27       	eor	r27, r27
    2188:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t remainder = delayVal % 256;
    218a:	8e 81       	ldd	r24, Y+6	; 0x06
    218c:	89 83       	std	Y+1, r24	; 0x01
	switch (Timer) {
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	3b 87       	std	Y+11, r19	; 0x0b
    2196:	2a 87       	std	Y+10, r18	; 0x0a
    2198:	8a 85       	ldd	r24, Y+10	; 0x0a
    219a:	9b 85       	ldd	r25, Y+11	; 0x0b
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	39 f0       	breq	.+14     	; 0x21ae <TIM_Delay_US+0x58>
    21a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    21a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    21a4:	22 30       	cpi	r18, 0x02	; 2
    21a6:	31 05       	cpc	r19, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <TIM_Delay_US+0x56>
    21aa:	50 c0       	rjmp	.+160    	; 0x224c <TIM_Delay_US+0xf6>
    21ac:	9a c0       	rjmp	.+308    	; 0x22e2 <TIM_Delay_US+0x18c>
	case TIMER0:
		if (remainder != 0) {
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	88 23       	and	r24, r24
    21b2:	51 f1       	breq	.+84     	; 0x2208 <TIM_Delay_US+0xb2>
			TIM_SetTimerPreLoadVal(Timer, 255 - remainder);
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	8f ef       	ldi	r24, 0xFF	; 255
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	82 1b       	sub	r24, r18
    21c0:	93 0b       	sbc	r25, r19
    21c2:	9c 01       	movw	r18, r24
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	b9 01       	movw	r22, r18
    21c8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <TIM_SetTimerPreLoadVal>
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	62 e0       	ldi	r22, 0x02	; 2
    21d0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
			while (TIM_Flag_Get(Timer, TIM0OVF) != 1) {
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	09 f4       	brne	.+2      	; 0x21e2 <TIM_Delay_US+0x8c>
    21e0:	80 c0       	rjmp	.+256    	; 0x22e2 <TIM_Delay_US+0x18c>
    21e2:	0d c0       	rjmp	.+26     	; 0x21fe <TIM_Delay_US+0xa8>
				while (i <= quotant) {
					if (TIM_Flag_Get(Timer, TIM0OVF) == 1) {
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	39 f4       	brne	.+14     	; 0x21fe <TIM_Delay_US+0xa8>
						TIM_Flag_Reset(Timer, TIM0OVF);
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TIM_Flag_Reset>
						i++;
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	8b 83       	std	Y+3, r24	; 0x03
	case TIMER0:
		if (remainder != 0) {
			TIM_SetTimerPreLoadVal(Timer, 255 - remainder);
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
			while (TIM_Flag_Get(Timer, TIM0OVF) != 1) {
				while (i <= quotant) {
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	89 17       	cp	r24, r25
    2204:	78 f7       	brcc	.-34     	; 0x21e4 <TIM_Delay_US+0x8e>
    2206:	6d c0       	rjmp	.+218    	; 0x22e2 <TIM_Delay_US+0x18c>
						i++;
					}
				}
				break;
			}
		} else if (remainder == 0) {
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	88 23       	and	r24, r24
    220c:	09 f0       	breq	.+2      	; 0x2210 <TIM_Delay_US+0xba>
    220e:	69 c0       	rjmp	.+210    	; 0x22e2 <TIM_Delay_US+0x18c>
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	62 e0       	ldi	r22, 0x02	; 2
    2214:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
			while (TIM_Flag_Get(Timer, TIM0OVF) != 1) {
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	09 f4       	brne	.+2      	; 0x2226 <TIM_Delay_US+0xd0>
    2224:	5e c0       	rjmp	.+188    	; 0x22e2 <TIM_Delay_US+0x18c>
    2226:	0d c0       	rjmp	.+26     	; 0x2242 <TIM_Delay_US+0xec>
				while (i < quotant) {
					if (TIM_Flag_Get(Timer, TIM0OVF) == 1) {
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	39 f4       	brne	.+14     	; 0x2242 <TIM_Delay_US+0xec>
						TIM_Flag_Reset(Timer, TIM0OVF);
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TIM_Flag_Reset>
						i++;
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	8b 83       	std	Y+3, r24	; 0x03
				break;
			}
		} else if (remainder == 0) {
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
			while (TIM_Flag_Get(Timer, TIM0OVF) != 1) {
				while (i < quotant) {
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	98 17       	cp	r25, r24
    2248:	78 f3       	brcs	.-34     	; 0x2228 <TIM_Delay_US+0xd2>
    224a:	4b c0       	rjmp	.+150    	; 0x22e2 <TIM_Delay_US+0x18c>
			}

		}
		break;
	case TIMER2:
		if (remainder != 0) {
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	88 23       	and	r24, r24
    2250:	49 f1       	breq	.+82     	; 0x22a4 <TIM_Delay_US+0x14e>
			TIM_SetTimerPreLoadVal(Timer, 255 - remainder);
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	82 1b       	sub	r24, r18
    225e:	93 0b       	sbc	r25, r19
    2260:	9c 01       	movw	r18, r24
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	b9 01       	movw	r22, r18
    2266:	0e 94 1b 0a 	call	0x1436	; 0x1436 <TIM_SetTimerPreLoadVal>
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	62 e0       	ldi	r22, 0x02	; 2
    226e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
			while (TIM_Flag_Get(Timer, TIM2OVF) != 1) {
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	91 f1       	breq	.+100    	; 0x22e2 <TIM_Delay_US+0x18c>
    227e:	0d c0       	rjmp	.+26     	; 0x229a <TIM_Delay_US+0x144>
				while (i <= quotant) {
					if (TIM_Flag_Get(Timer, TIM2OVF) == 1) {
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	39 f4       	brne	.+14     	; 0x229a <TIM_Delay_US+0x144>
						TIM_Flag_Reset(Timer, TIM2OVF);
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TIM_Flag_Reset>
						i++;
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	8f 5f       	subi	r24, 0xFF	; 255
    2298:	8b 83       	std	Y+3, r24	; 0x03
	case TIMER2:
		if (remainder != 0) {
			TIM_SetTimerPreLoadVal(Timer, 255 - remainder);
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
			while (TIM_Flag_Get(Timer, TIM2OVF) != 1) {
				while (i <= quotant) {
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	89 17       	cp	r24, r25
    22a0:	78 f7       	brcc	.-34     	; 0x2280 <TIM_Delay_US+0x12a>
    22a2:	1f c0       	rjmp	.+62     	; 0x22e2 <TIM_Delay_US+0x18c>
						i++;
					}
				}
				break;
			}
		} else if (remainder == 0) {
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	88 23       	and	r24, r24
    22a8:	e1 f4       	brne	.+56     	; 0x22e2 <TIM_Delay_US+0x18c>
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	62 e0       	ldi	r22, 0x02	; 2
    22ae:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
			while (TIM_Flag_Get(Timer, TIM2OVF) != 1) {
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    22ba:	81 30       	cpi	r24, 0x01	; 1
    22bc:	91 f0       	breq	.+36     	; 0x22e2 <TIM_Delay_US+0x18c>
    22be:	0d c0       	rjmp	.+26     	; 0x22da <TIM_Delay_US+0x184>
				while (i < quotant) {
					if (TIM_Flag_Get(Timer, TIM2OVF) == 1) {
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	39 f4       	brne	.+14     	; 0x22da <TIM_Delay_US+0x184>
						TIM_Flag_Reset(Timer, TIM2OVF);
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	61 e0       	ldi	r22, 0x01	; 1
    22d0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TIM_Flag_Reset>
						i++;
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	8b 83       	std	Y+3, r24	; 0x03
				break;
			}
		} else if (remainder == 0) {
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
			while (TIM_Flag_Get(Timer, TIM2OVF) != 1) {
				while (i < quotant) {
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	98 17       	cp	r25, r24
    22e0:	78 f3       	brcs	.-34     	; 0x22c0 <TIM_Delay_US+0x16a>

		}
		break;

	}
	return retVal;
    22e2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    22e4:	2b 96       	adiw	r28, 0x0b	; 11
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <TIM_Delay_MS>:
TIM_ERROR_t TIM_Delay_MS(TIM_SELECT_t Timer, Delay_value_t delayVal) {
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	61 97       	sbiw	r28, 0x11	; 17
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	8b 87       	std	Y+11, r24	; 0x0b
    230c:	4c 87       	std	Y+12, r20	; 0x0c
    230e:	5d 87       	std	Y+13, r21	; 0x0d
    2310:	6e 87       	std	Y+14, r22	; 0x0e
    2312:	7f 87       	std	Y+15, r23	; 0x0f
	TIM_ERROR_t retVal = EXIT_SUCCESFUL;
    2314:	1a 86       	std	Y+10, r1	; 0x0a
	uint32_t i = 0;
    2316:	1e 82       	std	Y+6, r1	; 0x06
    2318:	1f 82       	std	Y+7, r1	; 0x07
    231a:	18 86       	std	Y+8, r1	; 0x08
    231c:	19 86       	std	Y+9, r1	; 0x09
	uint32_t quotant = delayVal*1000 / 256;
    231e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2320:	9d 85       	ldd	r25, Y+13	; 0x0d
    2322:	ae 85       	ldd	r26, Y+14	; 0x0e
    2324:	bf 85       	ldd	r27, Y+15	; 0x0f
    2326:	28 ee       	ldi	r18, 0xE8	; 232
    2328:	33 e0       	ldi	r19, 0x03	; 3
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 25 23 	call	0x464a	; 0x464a <__mulsi3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	89 2f       	mov	r24, r25
    233c:	9a 2f       	mov	r25, r26
    233e:	ab 2f       	mov	r26, r27
    2340:	bb 27       	eor	r27, r27
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	ac 83       	std	Y+4, r26	; 0x04
    2348:	bd 83       	std	Y+5, r27	; 0x05
	uint8_t remainder = delayVal*1000 % 256;
    234a:	8c 85       	ldd	r24, Y+12	; 0x0c
    234c:	9d 85       	ldd	r25, Y+13	; 0x0d
    234e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2350:	bf 85       	ldd	r27, Y+15	; 0x0f
    2352:	28 ee       	ldi	r18, 0xE8	; 232
    2354:	33 e0       	ldi	r19, 0x03	; 3
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 25 23 	call	0x464a	; 0x464a <__mulsi3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	89 83       	std	Y+1, r24	; 0x01
	switch (Timer) {
    2368:	8b 85       	ldd	r24, Y+11	; 0x0b
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	39 8b       	std	Y+17, r19	; 0x11
    2370:	28 8b       	std	Y+16, r18	; 0x10
    2372:	88 89       	ldd	r24, Y+16	; 0x10
    2374:	99 89       	ldd	r25, Y+17	; 0x11
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	39 f0       	breq	.+14     	; 0x2388 <TIM_Delay_MS+0x92>
    237a:	28 89       	ldd	r18, Y+16	; 0x10
    237c:	39 89       	ldd	r19, Y+17	; 0x11
    237e:	22 30       	cpi	r18, 0x02	; 2
    2380:	31 05       	cpc	r19, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <TIM_Delay_MS+0x90>
    2384:	72 c0       	rjmp	.+228    	; 0x246a <TIM_Delay_MS+0x174>
    2386:	df c0       	rjmp	.+446    	; 0x2546 <TIM_Delay_MS+0x250>
	case TIMER0:
		if (remainder != 0) {
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	88 23       	and	r24, r24
    238c:	d9 f1       	breq	.+118    	; 0x2404 <TIM_Delay_MS+0x10e>
			TIM_SetTimerPreLoadVal(Timer, 255 - remainder);
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	8f ef       	ldi	r24, 0xFF	; 255
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	82 1b       	sub	r24, r18
    239a:	93 0b       	sbc	r25, r19
    239c:	9c 01       	movw	r18, r24
    239e:	8b 85       	ldd	r24, Y+11	; 0x0b
    23a0:	b9 01       	movw	r22, r18
    23a2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <TIM_SetTimerPreLoadVal>
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
    23a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    23a8:	62 e0       	ldi	r22, 0x02	; 2
    23aa:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
			while (TIM_Flag_Get(Timer, TIM0OVF) != 1) {
    23ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    23b6:	81 30       	cpi	r24, 0x01	; 1
    23b8:	09 f4       	brne	.+2      	; 0x23bc <TIM_Delay_MS+0xc6>
    23ba:	c5 c0       	rjmp	.+394    	; 0x2546 <TIM_Delay_MS+0x250>
    23bc:	15 c0       	rjmp	.+42     	; 0x23e8 <TIM_Delay_MS+0xf2>
				while (i <= quotant) {
					if (TIM_Flag_Get(Timer, TIM0OVF) == 1) {
    23be:	8b 85       	ldd	r24, Y+11	; 0x0b
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	79 f4       	brne	.+30     	; 0x23e8 <TIM_Delay_MS+0xf2>
						TIM_Flag_Reset(Timer, TIM0OVF);
    23ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TIM_Flag_Reset>
						i++;
    23d2:	8e 81       	ldd	r24, Y+6	; 0x06
    23d4:	9f 81       	ldd	r25, Y+7	; 0x07
    23d6:	a8 85       	ldd	r26, Y+8	; 0x08
    23d8:	b9 85       	ldd	r27, Y+9	; 0x09
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	a1 1d       	adc	r26, r1
    23de:	b1 1d       	adc	r27, r1
    23e0:	8e 83       	std	Y+6, r24	; 0x06
    23e2:	9f 83       	std	Y+7, r25	; 0x07
    23e4:	a8 87       	std	Y+8, r26	; 0x08
    23e6:	b9 87       	std	Y+9, r27	; 0x09
	case TIMER0:
		if (remainder != 0) {
			TIM_SetTimerPreLoadVal(Timer, 255 - remainder);
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
			while (TIM_Flag_Get(Timer, TIM0OVF) != 1) {
				while (i <= quotant) {
    23e8:	2e 81       	ldd	r18, Y+6	; 0x06
    23ea:	3f 81       	ldd	r19, Y+7	; 0x07
    23ec:	48 85       	ldd	r20, Y+8	; 0x08
    23ee:	59 85       	ldd	r21, Y+9	; 0x09
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	9b 81       	ldd	r25, Y+3	; 0x03
    23f4:	ac 81       	ldd	r26, Y+4	; 0x04
    23f6:	bd 81       	ldd	r27, Y+5	; 0x05
    23f8:	82 17       	cp	r24, r18
    23fa:	93 07       	cpc	r25, r19
    23fc:	a4 07       	cpc	r26, r20
    23fe:	b5 07       	cpc	r27, r21
    2400:	f0 f6       	brcc	.-68     	; 0x23be <TIM_Delay_MS+0xc8>
    2402:	a1 c0       	rjmp	.+322    	; 0x2546 <TIM_Delay_MS+0x250>
						i++;
					}
				}
				break;
			}
		} else if (remainder == 0) {
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	88 23       	and	r24, r24
    2408:	09 f0       	breq	.+2      	; 0x240c <TIM_Delay_MS+0x116>
    240a:	9d c0       	rjmp	.+314    	; 0x2546 <TIM_Delay_MS+0x250>
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
    240c:	8b 85       	ldd	r24, Y+11	; 0x0b
    240e:	62 e0       	ldi	r22, 0x02	; 2
    2410:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
			while (TIM_Flag_Get(Timer, TIM0OVF) != 1) {
    2414:	8b 85       	ldd	r24, Y+11	; 0x0b
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	09 f4       	brne	.+2      	; 0x2422 <TIM_Delay_MS+0x12c>
    2420:	92 c0       	rjmp	.+292    	; 0x2546 <TIM_Delay_MS+0x250>
    2422:	15 c0       	rjmp	.+42     	; 0x244e <TIM_Delay_MS+0x158>
				while (i < quotant) {
					if (TIM_Flag_Get(Timer, TIM0OVF) == 1) {
    2424:	8b 85       	ldd	r24, Y+11	; 0x0b
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	79 f4       	brne	.+30     	; 0x244e <TIM_Delay_MS+0x158>
						TIM_Flag_Reset(Timer, TIM0OVF);
    2430:	8b 85       	ldd	r24, Y+11	; 0x0b
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TIM_Flag_Reset>
						i++;
    2438:	8e 81       	ldd	r24, Y+6	; 0x06
    243a:	9f 81       	ldd	r25, Y+7	; 0x07
    243c:	a8 85       	ldd	r26, Y+8	; 0x08
    243e:	b9 85       	ldd	r27, Y+9	; 0x09
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	a1 1d       	adc	r26, r1
    2444:	b1 1d       	adc	r27, r1
    2446:	8e 83       	std	Y+6, r24	; 0x06
    2448:	9f 83       	std	Y+7, r25	; 0x07
    244a:	a8 87       	std	Y+8, r26	; 0x08
    244c:	b9 87       	std	Y+9, r27	; 0x09
				break;
			}
		} else if (remainder == 0) {
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
			while (TIM_Flag_Get(Timer, TIM0OVF) != 1) {
				while (i < quotant) {
    244e:	2e 81       	ldd	r18, Y+6	; 0x06
    2450:	3f 81       	ldd	r19, Y+7	; 0x07
    2452:	48 85       	ldd	r20, Y+8	; 0x08
    2454:	59 85       	ldd	r21, Y+9	; 0x09
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	9b 81       	ldd	r25, Y+3	; 0x03
    245a:	ac 81       	ldd	r26, Y+4	; 0x04
    245c:	bd 81       	ldd	r27, Y+5	; 0x05
    245e:	28 17       	cp	r18, r24
    2460:	39 07       	cpc	r19, r25
    2462:	4a 07       	cpc	r20, r26
    2464:	5b 07       	cpc	r21, r27
    2466:	f0 f2       	brcs	.-68     	; 0x2424 <TIM_Delay_MS+0x12e>
    2468:	6e c0       	rjmp	.+220    	; 0x2546 <TIM_Delay_MS+0x250>
			}

		}
		break;
	case TIMER2:
		if (remainder != 0) {
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	88 23       	and	r24, r24
    246e:	d9 f1       	breq	.+118    	; 0x24e6 <TIM_Delay_MS+0x1f0>
			TIM_SetTimerPreLoadVal(Timer, 255 - remainder);
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	82 1b       	sub	r24, r18
    247c:	93 0b       	sbc	r25, r19
    247e:	9c 01       	movw	r18, r24
    2480:	8b 85       	ldd	r24, Y+11	; 0x0b
    2482:	b9 01       	movw	r22, r18
    2484:	0e 94 1b 0a 	call	0x1436	; 0x1436 <TIM_SetTimerPreLoadVal>
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
    2488:	8b 85       	ldd	r24, Y+11	; 0x0b
    248a:	62 e0       	ldi	r22, 0x02	; 2
    248c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
			while (TIM_Flag_Get(Timer, TIM2OVF) != 1) {
    2490:	8b 85       	ldd	r24, Y+11	; 0x0b
    2492:	61 e0       	ldi	r22, 0x01	; 1
    2494:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	09 f4       	brne	.+2      	; 0x249e <TIM_Delay_MS+0x1a8>
    249c:	54 c0       	rjmp	.+168    	; 0x2546 <TIM_Delay_MS+0x250>
    249e:	15 c0       	rjmp	.+42     	; 0x24ca <TIM_Delay_MS+0x1d4>
				while (i <= quotant) {
					if (TIM_Flag_Get(Timer, TIM2OVF) == 1) {
    24a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	79 f4       	brne	.+30     	; 0x24ca <TIM_Delay_MS+0x1d4>
						TIM_Flag_Reset(Timer, TIM2OVF);
    24ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ae:	61 e0       	ldi	r22, 0x01	; 1
    24b0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TIM_Flag_Reset>
						i++;
    24b4:	8e 81       	ldd	r24, Y+6	; 0x06
    24b6:	9f 81       	ldd	r25, Y+7	; 0x07
    24b8:	a8 85       	ldd	r26, Y+8	; 0x08
    24ba:	b9 85       	ldd	r27, Y+9	; 0x09
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	a1 1d       	adc	r26, r1
    24c0:	b1 1d       	adc	r27, r1
    24c2:	8e 83       	std	Y+6, r24	; 0x06
    24c4:	9f 83       	std	Y+7, r25	; 0x07
    24c6:	a8 87       	std	Y+8, r26	; 0x08
    24c8:	b9 87       	std	Y+9, r27	; 0x09
	case TIMER2:
		if (remainder != 0) {
			TIM_SetTimerPreLoadVal(Timer, 255 - remainder);
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
			while (TIM_Flag_Get(Timer, TIM2OVF) != 1) {
				while (i <= quotant) {
    24ca:	2e 81       	ldd	r18, Y+6	; 0x06
    24cc:	3f 81       	ldd	r19, Y+7	; 0x07
    24ce:	48 85       	ldd	r20, Y+8	; 0x08
    24d0:	59 85       	ldd	r21, Y+9	; 0x09
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	9b 81       	ldd	r25, Y+3	; 0x03
    24d6:	ac 81       	ldd	r26, Y+4	; 0x04
    24d8:	bd 81       	ldd	r27, Y+5	; 0x05
    24da:	82 17       	cp	r24, r18
    24dc:	93 07       	cpc	r25, r19
    24de:	a4 07       	cpc	r26, r20
    24e0:	b5 07       	cpc	r27, r21
    24e2:	f0 f6       	brcc	.-68     	; 0x24a0 <TIM_Delay_MS+0x1aa>
    24e4:	30 c0       	rjmp	.+96     	; 0x2546 <TIM_Delay_MS+0x250>
						i++;
					}
				}
				break;
			}
		} else if (remainder == 0) {
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	88 23       	and	r24, r24
    24ea:	69 f5       	brne	.+90     	; 0x2546 <TIM_Delay_MS+0x250>
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
    24ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ee:	62 e0       	ldi	r22, 0x02	; 2
    24f0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIM_CLK_SLCT>
			while (TIM_Flag_Get(Timer, TIM2OVF) != 1) {
    24f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	19 f1       	breq	.+70     	; 0x2546 <TIM_Delay_MS+0x250>
    2500:	15 c0       	rjmp	.+42     	; 0x252c <TIM_Delay_MS+0x236>
				while (i < quotant) {
					if (TIM_Flag_Get(Timer, TIM2OVF) == 1) {
    2502:	8b 85       	ldd	r24, Y+11	; 0x0b
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TIM_Flag_Get>
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	79 f4       	brne	.+30     	; 0x252c <TIM_Delay_MS+0x236>
						TIM_Flag_Reset(Timer, TIM2OVF);
    250e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2510:	61 e0       	ldi	r22, 0x01	; 1
    2512:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TIM_Flag_Reset>
						i++;
    2516:	8e 81       	ldd	r24, Y+6	; 0x06
    2518:	9f 81       	ldd	r25, Y+7	; 0x07
    251a:	a8 85       	ldd	r26, Y+8	; 0x08
    251c:	b9 85       	ldd	r27, Y+9	; 0x09
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	a1 1d       	adc	r26, r1
    2522:	b1 1d       	adc	r27, r1
    2524:	8e 83       	std	Y+6, r24	; 0x06
    2526:	9f 83       	std	Y+7, r25	; 0x07
    2528:	a8 87       	std	Y+8, r26	; 0x08
    252a:	b9 87       	std	Y+9, r27	; 0x09
				break;
			}
		} else if (remainder == 0) {
			TIM_CLK_SLCT(Timer, _SYSCLK_DivideBy8);
			while (TIM_Flag_Get(Timer, TIM2OVF) != 1) {
				while (i < quotant) {
    252c:	2e 81       	ldd	r18, Y+6	; 0x06
    252e:	3f 81       	ldd	r19, Y+7	; 0x07
    2530:	48 85       	ldd	r20, Y+8	; 0x08
    2532:	59 85       	ldd	r21, Y+9	; 0x09
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	9b 81       	ldd	r25, Y+3	; 0x03
    2538:	ac 81       	ldd	r26, Y+4	; 0x04
    253a:	bd 81       	ldd	r27, Y+5	; 0x05
    253c:	28 17       	cp	r18, r24
    253e:	39 07       	cpc	r19, r25
    2540:	4a 07       	cpc	r20, r26
    2542:	5b 07       	cpc	r21, r27
    2544:	f0 f2       	brcs	.-68     	; 0x2502 <TIM_Delay_MS+0x20c>

		}
		break;

	}
	return retVal;
    2546:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2548:	61 96       	adiw	r28, 0x11	; 17
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <DIO_PortInit>:
#include "../DIO/DIO_DRIVER_TypeDef.h"
#include "../DIO/DIO_DRIVER.h"
#include "../DIO/DIO_DRIVER_Priv.h"

DIO_ERROR_RETVAL_t DIO_PortInit(DIO_PORT_ID_t DIO_port,
		DIO_DIRECTION_t DIO_direction) {
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	00 d0       	rcall	.+0      	; 0x2560 <DIO_PortInit+0x6>
    2560:	00 d0       	rcall	.+0      	; 0x2562 <DIO_PortInit+0x8>
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	8a 83       	std	Y+2, r24	; 0x02
    256a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    256c:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD)
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	85 30       	cpi	r24, 0x05	; 5
    2572:	08 f0       	brcs	.+2      	; 0x2576 <DIO_PortInit+0x1c>
    2574:	3d c0       	rjmp	.+122    	; 0x25f0 <DIO_PortInit+0x96>
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	88 23       	and	r24, r24
    257a:	19 f0       	breq	.+6      	; 0x2582 <DIO_PortInit+0x28>
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	8f 3f       	cpi	r24, 0xFF	; 255
    2580:	b9 f5       	brne	.+110    	; 0x25f0 <DIO_PortInit+0x96>
			&& (DIO_direction == PORT_INPUT || DIO_direction == PORT_OUTPUT)) {
		switch (DIO_port) {
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	3d 83       	std	Y+5, r19	; 0x05
    258a:	2c 83       	std	Y+4, r18	; 0x04
    258c:	8c 81       	ldd	r24, Y+4	; 0x04
    258e:	9d 81       	ldd	r25, Y+5	; 0x05
    2590:	82 30       	cpi	r24, 0x02	; 2
    2592:	91 05       	cpc	r25, r1
    2594:	d9 f0       	breq	.+54     	; 0x25cc <DIO_PortInit+0x72>
    2596:	2c 81       	ldd	r18, Y+4	; 0x04
    2598:	3d 81       	ldd	r19, Y+5	; 0x05
    259a:	23 30       	cpi	r18, 0x03	; 3
    259c:	31 05       	cpc	r19, r1
    259e:	34 f4       	brge	.+12     	; 0x25ac <DIO_PortInit+0x52>
    25a0:	8c 81       	ldd	r24, Y+4	; 0x04
    25a2:	9d 81       	ldd	r25, Y+5	; 0x05
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	91 05       	cpc	r25, r1
    25a8:	61 f0       	breq	.+24     	; 0x25c2 <DIO_PortInit+0x68>
    25aa:	1f c0       	rjmp	.+62     	; 0x25ea <DIO_PortInit+0x90>
    25ac:	2c 81       	ldd	r18, Y+4	; 0x04
    25ae:	3d 81       	ldd	r19, Y+5	; 0x05
    25b0:	23 30       	cpi	r18, 0x03	; 3
    25b2:	31 05       	cpc	r19, r1
    25b4:	81 f0       	breq	.+32     	; 0x25d6 <DIO_PortInit+0x7c>
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ba:	84 30       	cpi	r24, 0x04	; 4
    25bc:	91 05       	cpc	r25, r1
    25be:	81 f0       	breq	.+32     	; 0x25e0 <DIO_PortInit+0x86>
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <DIO_PortInit+0x90>
		case PORTA:
			WRITE_REG(DDRA_Register, DIO_direction);
    25c2:	ea e3       	ldi	r30, 0x3A	; 58
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	80 83       	st	Z, r24
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <DIO_PortInit+0x9a>
			break;
		case PORTB:
			WRITE_REG(DDRB_Register, DIO_direction);
    25cc:	e7 e3       	ldi	r30, 0x37	; 55
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	80 83       	st	Z, r24
    25d4:	0f c0       	rjmp	.+30     	; 0x25f4 <DIO_PortInit+0x9a>
			break;
		case PORTC:
			WRITE_REG(DDRC_Register, DIO_direction);
    25d6:	e4 e3       	ldi	r30, 0x34	; 52
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	80 83       	st	Z, r24
    25de:	0a c0       	rjmp	.+20     	; 0x25f4 <DIO_PortInit+0x9a>
			break;
		case PORTD:
			WRITE_REG(DDRD_Register, DIO_direction);
    25e0:	e1 e3       	ldi	r30, 0x31	; 49
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	80 83       	st	Z, r24
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <DIO_PortInit+0x9a>
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <DIO_PortInit+0x9a>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <DIO_SetPortVal>:
DIO_ERROR_RETVAL_t DIO_SetPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <DIO_SetPortVal+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <DIO_SetPortVal+0x8>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8a 83       	std	Y+2, r24	; 0x02
    2616:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    2618:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	85 30       	cpi	r24, 0x05	; 5
    261e:	08 f0       	brcs	.+2      	; 0x2622 <DIO_SetPortVal+0x1c>
    2620:	57 c0       	rjmp	.+174    	; 0x26d0 <DIO_SetPortVal+0xca>
		switch (DIO_port) {
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	3d 83       	std	Y+5, r19	; 0x05
    262a:	2c 83       	std	Y+4, r18	; 0x04
    262c:	8c 81       	ldd	r24, Y+4	; 0x04
    262e:	9d 81       	ldd	r25, Y+5	; 0x05
    2630:	82 30       	cpi	r24, 0x02	; 2
    2632:	91 05       	cpc	r25, r1
    2634:	19 f1       	breq	.+70     	; 0x267c <DIO_SetPortVal+0x76>
    2636:	2c 81       	ldd	r18, Y+4	; 0x04
    2638:	3d 81       	ldd	r19, Y+5	; 0x05
    263a:	23 30       	cpi	r18, 0x03	; 3
    263c:	31 05       	cpc	r19, r1
    263e:	34 f4       	brge	.+12     	; 0x264c <DIO_SetPortVal+0x46>
    2640:	8c 81       	ldd	r24, Y+4	; 0x04
    2642:	9d 81       	ldd	r25, Y+5	; 0x05
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	91 05       	cpc	r25, r1
    2648:	61 f0       	breq	.+24     	; 0x2662 <DIO_SetPortVal+0x5c>
    264a:	3f c0       	rjmp	.+126    	; 0x26ca <DIO_SetPortVal+0xc4>
    264c:	2c 81       	ldd	r18, Y+4	; 0x04
    264e:	3d 81       	ldd	r19, Y+5	; 0x05
    2650:	23 30       	cpi	r18, 0x03	; 3
    2652:	31 05       	cpc	r19, r1
    2654:	01 f1       	breq	.+64     	; 0x2696 <DIO_SetPortVal+0x90>
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	9d 81       	ldd	r25, Y+5	; 0x05
    265a:	84 30       	cpi	r24, 0x04	; 4
    265c:	91 05       	cpc	r25, r1
    265e:	41 f1       	breq	.+80     	; 0x26b0 <DIO_SetPortVal+0xaa>
    2660:	34 c0       	rjmp	.+104    	; 0x26ca <DIO_SetPortVal+0xc4>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, value);
    2662:	ab e3       	ldi	r26, 0x3B	; 59
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	eb e3       	ldi	r30, 0x3B	; 59
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	98 2f       	mov	r25, r24
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	80 95       	com	r24
    2672:	98 23       	and	r25, r24
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	89 2b       	or	r24, r25
    2678:	8c 93       	st	X, r24
    267a:	2c c0       	rjmp	.+88     	; 0x26d4 <DIO_SetPortVal+0xce>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, value);
    267c:	a8 e3       	ldi	r26, 0x38	; 56
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e8 e3       	ldi	r30, 0x38	; 56
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	98 2f       	mov	r25, r24
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	80 95       	com	r24
    268c:	98 23       	and	r25, r24
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	89 2b       	or	r24, r25
    2692:	8c 93       	st	X, r24
    2694:	1f c0       	rjmp	.+62     	; 0x26d4 <DIO_SetPortVal+0xce>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, value);
    2696:	a5 e3       	ldi	r26, 0x35	; 53
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e5 e3       	ldi	r30, 0x35	; 53
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	98 2f       	mov	r25, r24
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	80 95       	com	r24
    26a6:	98 23       	and	r25, r24
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	89 2b       	or	r24, r25
    26ac:	8c 93       	st	X, r24
    26ae:	12 c0       	rjmp	.+36     	; 0x26d4 <DIO_SetPortVal+0xce>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, value);
    26b0:	a2 e3       	ldi	r26, 0x32	; 50
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e2 e3       	ldi	r30, 0x32	; 50
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	98 2f       	mov	r25, r24
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	80 95       	com	r24
    26c0:	98 23       	and	r25, r24
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	89 2b       	or	r24, r25
    26c6:	8c 93       	st	X, r24
    26c8:	05 c0       	rjmp	.+10     	; 0x26d4 <DIO_SetPortVal+0xce>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <DIO_SetPortVal+0xce>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <DIO_ClrPortVal>:
DIO_ERROR_RETVAL_t DIO_ClrPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	29 97       	sbiw	r28, 0x09	; 9
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	8a 83       	std	Y+2, r24	; 0x02
    26fc:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    26fe:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	85 30       	cpi	r24, 0x05	; 5
    2704:	08 f0       	brcs	.+2      	; 0x2708 <DIO_ClrPortVal+0x22>
    2706:	53 c0       	rjmp	.+166    	; 0x27ae <DIO_ClrPortVal+0xc8>
		switch (DIO_port) {
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	39 87       	std	Y+9, r19	; 0x09
    2710:	28 87       	std	Y+8, r18	; 0x08
    2712:	88 85       	ldd	r24, Y+8	; 0x08
    2714:	99 85       	ldd	r25, Y+9	; 0x09
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	91 05       	cpc	r25, r1
    271a:	11 f1       	breq	.+68     	; 0x2760 <DIO_ClrPortVal+0x7a>
    271c:	28 85       	ldd	r18, Y+8	; 0x08
    271e:	39 85       	ldd	r19, Y+9	; 0x09
    2720:	23 30       	cpi	r18, 0x03	; 3
    2722:	31 05       	cpc	r19, r1
    2724:	34 f4       	brge	.+12     	; 0x2732 <DIO_ClrPortVal+0x4c>
    2726:	88 85       	ldd	r24, Y+8	; 0x08
    2728:	99 85       	ldd	r25, Y+9	; 0x09
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	91 05       	cpc	r25, r1
    272e:	61 f0       	breq	.+24     	; 0x2748 <DIO_ClrPortVal+0x62>
    2730:	3b c0       	rjmp	.+118    	; 0x27a8 <DIO_ClrPortVal+0xc2>
    2732:	28 85       	ldd	r18, Y+8	; 0x08
    2734:	39 85       	ldd	r19, Y+9	; 0x09
    2736:	23 30       	cpi	r18, 0x03	; 3
    2738:	31 05       	cpc	r19, r1
    273a:	f1 f0       	breq	.+60     	; 0x2778 <DIO_ClrPortVal+0x92>
    273c:	88 85       	ldd	r24, Y+8	; 0x08
    273e:	99 85       	ldd	r25, Y+9	; 0x09
    2740:	84 30       	cpi	r24, 0x04	; 4
    2742:	91 05       	cpc	r25, r1
    2744:	29 f1       	breq	.+74     	; 0x2790 <DIO_ClrPortVal+0xaa>
    2746:	30 c0       	rjmp	.+96     	; 0x27a8 <DIO_ClrPortVal+0xc2>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, ~value);
    2748:	eb e3       	ldi	r30, 0x3B	; 59
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	90 81       	ld	r25, Z
    274e:	eb e3       	ldi	r30, 0x3B	; 59
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	88 2f       	mov	r24, r24
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	80 95       	com	r24
    275a:	90 95       	com	r25
    275c:	80 83       	st	Z, r24
    275e:	29 c0       	rjmp	.+82     	; 0x27b2 <DIO_ClrPortVal+0xcc>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, ~value);
    2760:	e8 e3       	ldi	r30, 0x38	; 56
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	20 81       	ld	r18, Z
    2766:	e8 e3       	ldi	r30, 0x38	; 56
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	88 2f       	mov	r24, r24
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	80 95       	com	r24
    2772:	90 95       	com	r25
    2774:	80 83       	st	Z, r24
    2776:	1d c0       	rjmp	.+58     	; 0x27b2 <DIO_ClrPortVal+0xcc>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, ~value);
    2778:	e5 e3       	ldi	r30, 0x35	; 53
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	30 81       	ld	r19, Z
    277e:	e5 e3       	ldi	r30, 0x35	; 53
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	80 95       	com	r24
    278a:	90 95       	com	r25
    278c:	80 83       	st	Z, r24
    278e:	11 c0       	rjmp	.+34     	; 0x27b2 <DIO_ClrPortVal+0xcc>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, ~value);
    2790:	e2 e3       	ldi	r30, 0x32	; 50
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	e2 e3       	ldi	r30, 0x32	; 50
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	80 95       	com	r24
    27a2:	90 95       	com	r25
    27a4:	80 83       	st	Z, r24
    27a6:	05 c0       	rjmp	.+10     	; 0x27b2 <DIO_ClrPortVal+0xcc>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <DIO_ClrPortVal+0xcc>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b4:	29 96       	adiw	r28, 0x09	; 9
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <DIO_GetPortVal>:
Byte DIO_GetPortVal(DIO_PORT_ID_t DIO_port) {
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <DIO_GetPortVal+0x6>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <DIO_GetPortVal+0x8>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	8a 83       	std	Y+2, r24	; 0x02
	Byte RETVAL = EXIT_FAILURE;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD)) {
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	85 30       	cpi	r24, 0x05	; 5
    27dc:	b8 f5       	brcc	.+110    	; 0x284c <DIO_GetPortVal+0x86>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	3c 83       	std	Y+4, r19	; 0x04
    27e6:	2b 83       	std	Y+3, r18	; 0x03
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	82 30       	cpi	r24, 0x02	; 2
    27ee:	91 05       	cpc	r25, r1
    27f0:	d9 f0       	breq	.+54     	; 0x2828 <DIO_GetPortVal+0x62>
    27f2:	2b 81       	ldd	r18, Y+3	; 0x03
    27f4:	3c 81       	ldd	r19, Y+4	; 0x04
    27f6:	23 30       	cpi	r18, 0x03	; 3
    27f8:	31 05       	cpc	r19, r1
    27fa:	34 f4       	brge	.+12     	; 0x2808 <DIO_GetPortVal+0x42>
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	91 05       	cpc	r25, r1
    2804:	61 f0       	breq	.+24     	; 0x281e <DIO_GetPortVal+0x58>
    2806:	1f c0       	rjmp	.+62     	; 0x2846 <DIO_GetPortVal+0x80>
    2808:	2b 81       	ldd	r18, Y+3	; 0x03
    280a:	3c 81       	ldd	r19, Y+4	; 0x04
    280c:	23 30       	cpi	r18, 0x03	; 3
    280e:	31 05       	cpc	r19, r1
    2810:	81 f0       	breq	.+32     	; 0x2832 <DIO_GetPortVal+0x6c>
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	84 30       	cpi	r24, 0x04	; 4
    2818:	91 05       	cpc	r25, r1
    281a:	81 f0       	breq	.+32     	; 0x283c <DIO_GetPortVal+0x76>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <DIO_GetPortVal+0x80>
		case PORTA:
			RETVAL = READ_REG(PINA_Register);
    281e:	e9 e3       	ldi	r30, 0x39	; 57
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <DIO_GetPortVal+0x8a>
			break;
		case PORTB:
			RETVAL = READ_REG(PINB_Register);
    2828:	e6 e3       	ldi	r30, 0x36	; 54
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	0f c0       	rjmp	.+30     	; 0x2850 <DIO_GetPortVal+0x8a>
			break;
		case PORTC:
			RETVAL = READ_REG(PINC_Register);
    2832:	e3 e3       	ldi	r30, 0x33	; 51
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <DIO_GetPortVal+0x8a>
			break;
		case PORTD:
			RETVAL = READ_REG(PIND_Register);
    283c:	e0 e3       	ldi	r30, 0x30	; 48
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	05 c0       	rjmp	.+10     	; 0x2850 <DIO_GetPortVal+0x8a>
			break;
		default:
			RETVAL = EXIT_FAILURE;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <DIO_GetPortVal+0x8a>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	89 83       	std	Y+1, r24	; 0x01
	}
	return RETVAL;
    2850:	89 81       	ldd	r24, Y+1	; 0x01
}
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <DIO_TogPortVal>:
DIO_ERROR_RETVAL_t DIO_TogPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	00 d0       	rcall	.+0      	; 0x2866 <DIO_TogPortVal+0x6>
    2866:	00 d0       	rcall	.+0      	; 0x2868 <DIO_TogPortVal+0x8>
    2868:	0f 92       	push	r0
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	8a 83       	std	Y+2, r24	; 0x02
    2870:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    2872:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	85 30       	cpi	r24, 0x05	; 5
    2878:	08 f0       	brcs	.+2      	; 0x287c <DIO_TogPortVal+0x1c>
    287a:	67 c0       	rjmp	.+206    	; 0x294a <DIO_TogPortVal+0xea>
		switch (DIO_port) {
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	3d 83       	std	Y+5, r19	; 0x05
    2884:	2c 83       	std	Y+4, r18	; 0x04
    2886:	8c 81       	ldd	r24, Y+4	; 0x04
    2888:	9d 81       	ldd	r25, Y+5	; 0x05
    288a:	82 30       	cpi	r24, 0x02	; 2
    288c:	91 05       	cpc	r25, r1
    288e:	39 f1       	breq	.+78     	; 0x28de <DIO_TogPortVal+0x7e>
    2890:	2c 81       	ldd	r18, Y+4	; 0x04
    2892:	3d 81       	ldd	r19, Y+5	; 0x05
    2894:	23 30       	cpi	r18, 0x03	; 3
    2896:	31 05       	cpc	r19, r1
    2898:	34 f4       	brge	.+12     	; 0x28a6 <DIO_TogPortVal+0x46>
    289a:	8c 81       	ldd	r24, Y+4	; 0x04
    289c:	9d 81       	ldd	r25, Y+5	; 0x05
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	91 05       	cpc	r25, r1
    28a2:	61 f0       	breq	.+24     	; 0x28bc <DIO_TogPortVal+0x5c>
    28a4:	4f c0       	rjmp	.+158    	; 0x2944 <DIO_TogPortVal+0xe4>
    28a6:	2c 81       	ldd	r18, Y+4	; 0x04
    28a8:	3d 81       	ldd	r19, Y+5	; 0x05
    28aa:	23 30       	cpi	r18, 0x03	; 3
    28ac:	31 05       	cpc	r19, r1
    28ae:	41 f1       	breq	.+80     	; 0x2900 <DIO_TogPortVal+0xa0>
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	9d 81       	ldd	r25, Y+5	; 0x05
    28b4:	84 30       	cpi	r24, 0x04	; 4
    28b6:	91 05       	cpc	r25, r1
    28b8:	a1 f1       	breq	.+104    	; 0x2922 <DIO_TogPortVal+0xc2>
    28ba:	44 c0       	rjmp	.+136    	; 0x2944 <DIO_TogPortVal+0xe4>
		case PORTA:
			if (READ_REG(DDRA_Register) == PORT_OUTPUT) {
    28bc:	ea e3       	ldi	r30, 0x3A	; 58
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 3f       	cpi	r24, 0xFF	; 255
    28c4:	49 f4       	brne	.+18     	; 0x28d8 <DIO_TogPortVal+0x78>
				TOG_REG(PORTA_Register, value);
    28c6:	ab e3       	ldi	r26, 0x3B	; 59
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	eb e3       	ldi	r30, 0x3B	; 59
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	90 81       	ld	r25, Z
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	89 27       	eor	r24, r25
    28d4:	8c 93       	st	X, r24
    28d6:	3b c0       	rjmp	.+118    	; 0x294e <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	38 c0       	rjmp	.+112    	; 0x294e <DIO_TogPortVal+0xee>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PORT_OUTPUT) {
    28de:	e7 e3       	ldi	r30, 0x37	; 55
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	8f 3f       	cpi	r24, 0xFF	; 255
    28e6:	49 f4       	brne	.+18     	; 0x28fa <DIO_TogPortVal+0x9a>
				TOG_REG(PORTB_Register, value);
    28e8:	a8 e3       	ldi	r26, 0x38	; 56
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e8 e3       	ldi	r30, 0x38	; 56
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	90 81       	ld	r25, Z
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	89 27       	eor	r24, r25
    28f6:	8c 93       	st	X, r24
    28f8:	2a c0       	rjmp	.+84     	; 0x294e <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	27 c0       	rjmp	.+78     	; 0x294e <DIO_TogPortVal+0xee>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PORT_OUTPUT) {
    2900:	e4 e3       	ldi	r30, 0x34	; 52
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	8f 3f       	cpi	r24, 0xFF	; 255
    2908:	49 f4       	brne	.+18     	; 0x291c <DIO_TogPortVal+0xbc>
				TOG_REG(PORTC_Register, value);
    290a:	a5 e3       	ldi	r26, 0x35	; 53
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e5 e3       	ldi	r30, 0x35	; 53
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	90 81       	ld	r25, Z
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	89 27       	eor	r24, r25
    2918:	8c 93       	st	X, r24
    291a:	19 c0       	rjmp	.+50     	; 0x294e <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	16 c0       	rjmp	.+44     	; 0x294e <DIO_TogPortVal+0xee>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PORT_OUTPUT) {
    2922:	e1 e3       	ldi	r30, 0x31	; 49
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	8f 3f       	cpi	r24, 0xFF	; 255
    292a:	49 f4       	brne	.+18     	; 0x293e <DIO_TogPortVal+0xde>
				TOG_REG(PORTD_Register, value);
    292c:	a2 e3       	ldi	r26, 0x32	; 50
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e2 e3       	ldi	r30, 0x32	; 50
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	90 81       	ld	r25, Z
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	89 27       	eor	r24, r25
    293a:	8c 93       	st	X, r24
    293c:	08 c0       	rjmp	.+16     	; 0x294e <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	05 c0       	rjmp	.+10     	; 0x294e <DIO_TogPortVal+0xee>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	02 c0       	rjmp	.+4      	; 0x294e <DIO_TogPortVal+0xee>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    294e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <DIO_SetPinDirection>:
/*main APIs*/
uint8_t DIO_SetPinDirection(uint8_t PortName, uint8_t PinNo,
		uint8_t PinDirection) {
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	28 97       	sbiw	r28, 0x08	; 8
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	8a 83       	std	Y+2, r24	; 0x02
    2976:	6b 83       	std	Y+3, r22	; 0x03
    2978:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    297a:	19 82       	std	Y+1, r1	; 0x01

	if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	85 30       	cpi	r24, 0x05	; 5
    2980:	08 f0       	brcs	.+2      	; 0x2984 <DIO_SetPinDirection+0x24>
    2982:	fa c0       	rjmp	.+500    	; 0x2b78 <DIO_SetPinDirection+0x218>
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	88 30       	cpi	r24, 0x08	; 8
    2988:	08 f0       	brcs	.+2      	; 0x298c <DIO_SetPinDirection+0x2c>
    298a:	f6 c0       	rjmp	.+492    	; 0x2b78 <DIO_SetPinDirection+0x218>
		if (PinDirection == PIN_OUTPUT) {
    298c:	8c 81       	ldd	r24, Y+4	; 0x04
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	09 f0       	breq	.+2      	; 0x2994 <DIO_SetPinDirection+0x34>
    2992:	73 c0       	rjmp	.+230    	; 0x2a7a <DIO_SetPinDirection+0x11a>

			switch (PortName) {
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	38 87       	std	Y+8, r19	; 0x08
    299c:	2f 83       	std	Y+7, r18	; 0x07
    299e:	8f 81       	ldd	r24, Y+7	; 0x07
    29a0:	98 85       	ldd	r25, Y+8	; 0x08
    29a2:	82 30       	cpi	r24, 0x02	; 2
    29a4:	91 05       	cpc	r25, r1
    29a6:	51 f1       	breq	.+84     	; 0x29fc <DIO_SetPinDirection+0x9c>
    29a8:	2f 81       	ldd	r18, Y+7	; 0x07
    29aa:	38 85       	ldd	r19, Y+8	; 0x08
    29ac:	23 30       	cpi	r18, 0x03	; 3
    29ae:	31 05       	cpc	r19, r1
    29b0:	34 f4       	brge	.+12     	; 0x29be <DIO_SetPinDirection+0x5e>
    29b2:	8f 81       	ldd	r24, Y+7	; 0x07
    29b4:	98 85       	ldd	r25, Y+8	; 0x08
    29b6:	81 30       	cpi	r24, 0x01	; 1
    29b8:	91 05       	cpc	r25, r1
    29ba:	61 f0       	breq	.+24     	; 0x29d4 <DIO_SetPinDirection+0x74>
    29bc:	5b c0       	rjmp	.+182    	; 0x2a74 <DIO_SetPinDirection+0x114>
    29be:	2f 81       	ldd	r18, Y+7	; 0x07
    29c0:	38 85       	ldd	r19, Y+8	; 0x08
    29c2:	23 30       	cpi	r18, 0x03	; 3
    29c4:	31 05       	cpc	r19, r1
    29c6:	71 f1       	breq	.+92     	; 0x2a24 <DIO_SetPinDirection+0xc4>
    29c8:	8f 81       	ldd	r24, Y+7	; 0x07
    29ca:	98 85       	ldd	r25, Y+8	; 0x08
    29cc:	84 30       	cpi	r24, 0x04	; 4
    29ce:	91 05       	cpc	r25, r1
    29d0:	e9 f1       	breq	.+122    	; 0x2a4c <DIO_SetPinDirection+0xec>
    29d2:	50 c0       	rjmp	.+160    	; 0x2a74 <DIO_SetPinDirection+0x114>
			case PORTA:
				SET_BIT(DDRA_Register, PinNo);
    29d4:	aa e3       	ldi	r26, 0x3A	; 58
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	ea e3       	ldi	r30, 0x3A	; 58
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	48 2f       	mov	r20, r24
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	02 2e       	mov	r0, r18
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <DIO_SetPinDirection+0x92>
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	0a 94       	dec	r0
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <DIO_SetPinDirection+0x8e>
    29f6:	84 2b       	or	r24, r20
    29f8:	8c 93       	st	X, r24
    29fa:	c0 c0       	rjmp	.+384    	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				SET_BIT(DDRB_Register, PinNo);
    29fc:	a7 e3       	ldi	r26, 0x37	; 55
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e7 e3       	ldi	r30, 0x37	; 55
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	48 2f       	mov	r20, r24
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	02 2e       	mov	r0, r18
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <DIO_SetPinDirection+0xba>
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	0a 94       	dec	r0
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <DIO_SetPinDirection+0xb6>
    2a1e:	84 2b       	or	r24, r20
    2a20:	8c 93       	st	X, r24
    2a22:	ac c0       	rjmp	.+344    	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				SET_BIT(DDRC_Register, PinNo);
    2a24:	a4 e3       	ldi	r26, 0x34	; 52
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e4 e3       	ldi	r30, 0x34	; 52
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	48 2f       	mov	r20, r24
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	02 2e       	mov	r0, r18
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <DIO_SetPinDirection+0xe2>
    2a3e:	88 0f       	add	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	0a 94       	dec	r0
    2a44:	e2 f7       	brpl	.-8      	; 0x2a3e <DIO_SetPinDirection+0xde>
    2a46:	84 2b       	or	r24, r20
    2a48:	8c 93       	st	X, r24
    2a4a:	98 c0       	rjmp	.+304    	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				SET_BIT(DDRD_Register, PinNo);
    2a4c:	a1 e3       	ldi	r26, 0x31	; 49
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e1 e3       	ldi	r30, 0x31	; 49
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	48 2f       	mov	r20, r24
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	02 2e       	mov	r0, r18
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <DIO_SetPinDirection+0x10a>
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	0a 94       	dec	r0
    2a6c:	e2 f7       	brpl	.-8      	; 0x2a66 <DIO_SetPinDirection+0x106>
    2a6e:	84 2b       	or	r24, r20
    2a70:	8c 93       	st	X, r24
    2a72:	84 c0       	rjmp	.+264    	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	89 83       	std	Y+1, r24	; 0x01
    2a78:	81 c0       	rjmp	.+258    	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			}
		} else if (PinDirection == PIN_INPUT) {
    2a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7c:	88 23       	and	r24, r24
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <DIO_SetPinDirection+0x122>
    2a80:	78 c0       	rjmp	.+240    	; 0x2b72 <DIO_SetPinDirection+0x212>

			switch (PortName) {
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	3e 83       	std	Y+6, r19	; 0x06
    2a8a:	2d 83       	std	Y+5, r18	; 0x05
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a90:	82 30       	cpi	r24, 0x02	; 2
    2a92:	91 05       	cpc	r25, r1
    2a94:	61 f1       	breq	.+88     	; 0x2aee <DIO_SetPinDirection+0x18e>
    2a96:	2d 81       	ldd	r18, Y+5	; 0x05
    2a98:	3e 81       	ldd	r19, Y+6	; 0x06
    2a9a:	23 30       	cpi	r18, 0x03	; 3
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	34 f4       	brge	.+12     	; 0x2aac <DIO_SetPinDirection+0x14c>
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	69 f0       	breq	.+26     	; 0x2ac4 <DIO_SetPinDirection+0x164>
    2aaa:	60 c0       	rjmp	.+192    	; 0x2b6c <DIO_SetPinDirection+0x20c>
    2aac:	2d 81       	ldd	r18, Y+5	; 0x05
    2aae:	3e 81       	ldd	r19, Y+6	; 0x06
    2ab0:	23 30       	cpi	r18, 0x03	; 3
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	89 f1       	breq	.+98     	; 0x2b18 <DIO_SetPinDirection+0x1b8>
    2ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aba:	84 30       	cpi	r24, 0x04	; 4
    2abc:	91 05       	cpc	r25, r1
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <DIO_SetPinDirection+0x162>
    2ac0:	40 c0       	rjmp	.+128    	; 0x2b42 <DIO_SetPinDirection+0x1e2>
    2ac2:	54 c0       	rjmp	.+168    	; 0x2b6c <DIO_SetPinDirection+0x20c>
			case PORTA:
				CLEAR_BIT(DDRA_Register, PinNo);
    2ac4:	aa e3       	ldi	r26, 0x3A	; 58
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	ea e3       	ldi	r30, 0x3A	; 58
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	48 2f       	mov	r20, r24
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	02 2e       	mov	r0, r18
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <DIO_SetPinDirection+0x182>
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	0a 94       	dec	r0
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <DIO_SetPinDirection+0x17e>
    2ae6:	80 95       	com	r24
    2ae8:	84 23       	and	r24, r20
    2aea:	8c 93       	st	X, r24
    2aec:	47 c0       	rjmp	.+142    	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				CLEAR_BIT(DDRB_Register, PinNo);
    2aee:	a7 e3       	ldi	r26, 0x37	; 55
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e7 e3       	ldi	r30, 0x37	; 55
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	48 2f       	mov	r20, r24
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	02 2e       	mov	r0, r18
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <DIO_SetPinDirection+0x1ac>
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	0a 94       	dec	r0
    2b0e:	e2 f7       	brpl	.-8      	; 0x2b08 <DIO_SetPinDirection+0x1a8>
    2b10:	80 95       	com	r24
    2b12:	84 23       	and	r24, r20
    2b14:	8c 93       	st	X, r24
    2b16:	32 c0       	rjmp	.+100    	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				CLEAR_BIT(DDRC_Register, PinNo);
    2b18:	a4 e3       	ldi	r26, 0x34	; 52
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e4 e3       	ldi	r30, 0x34	; 52
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	48 2f       	mov	r20, r24
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 2e       	mov	r0, r18
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <DIO_SetPinDirection+0x1d6>
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	0a 94       	dec	r0
    2b38:	e2 f7       	brpl	.-8      	; 0x2b32 <DIO_SetPinDirection+0x1d2>
    2b3a:	80 95       	com	r24
    2b3c:	84 23       	and	r24, r20
    2b3e:	8c 93       	st	X, r24
    2b40:	1d c0       	rjmp	.+58     	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				CLEAR_BIT(DDRD_Register, PinNo);
    2b42:	a1 e3       	ldi	r26, 0x31	; 49
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e1 e3       	ldi	r30, 0x31	; 49
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	48 2f       	mov	r20, r24
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	02 2e       	mov	r0, r18
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <DIO_SetPinDirection+0x200>
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	0a 94       	dec	r0
    2b62:	e2 f7       	brpl	.-8      	; 0x2b5c <DIO_SetPinDirection+0x1fc>
    2b64:	80 95       	com	r24
    2b66:	84 23       	and	r24, r20
    2b68:	8c 93       	st	X, r24
    2b6a:	08 c0       	rjmp	.+16     	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	05 c0       	rjmp	.+10     	; 0x2b7c <DIO_SetPinDirection+0x21c>
				break;
			}
		}

		else {
			ErrorValue = EXIT_FAILURE;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <DIO_SetPinDirection+0x21c>
		}
	}

	else {
		ErrorValue = EXIT_FAILURE;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b7e:	28 96       	adiw	r28, 0x08	; 8
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	08 95       	ret

00002b90 <DIO_WritePin>:
uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	28 97       	sbiw	r28, 0x08	; 8
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	8a 83       	std	Y+2, r24	; 0x02
    2ba6:	6b 83       	std	Y+3, r22	; 0x03
    2ba8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    2baa:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	85 30       	cpi	r24, 0x05	; 5
    2bb0:	08 f0       	brcs	.+2      	; 0x2bb4 <DIO_WritePin+0x24>
    2bb2:	0f c2       	rjmp	.+1054   	; 0x2fd2 <DIO_WritePin+0x442>
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	88 30       	cpi	r24, 0x08	; 8
    2bb8:	08 f0       	brcs	.+2      	; 0x2bbc <DIO_WritePin+0x2c>
    2bba:	0b c2       	rjmp	.+1046   	; 0x2fd2 <DIO_WritePin+0x442>
			if (PinValue == PIN_HIGH) {
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	81 30       	cpi	r24, 0x01	; 1
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <DIO_WritePin+0x34>
    2bc2:	fe c0       	rjmp	.+508    	; 0x2dc0 <DIO_WritePin+0x230>

				switch (PortName) {
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	38 87       	std	Y+8, r19	; 0x08
    2bcc:	2f 83       	std	Y+7, r18	; 0x07
    2bce:	4f 81       	ldd	r20, Y+7	; 0x07
    2bd0:	58 85       	ldd	r21, Y+8	; 0x08
    2bd2:	42 30       	cpi	r20, 0x02	; 2
    2bd4:	51 05       	cpc	r21, r1
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <DIO_WritePin+0x4a>
    2bd8:	4e c0       	rjmp	.+156    	; 0x2c76 <DIO_WritePin+0xe6>
    2bda:	8f 81       	ldd	r24, Y+7	; 0x07
    2bdc:	98 85       	ldd	r25, Y+8	; 0x08
    2bde:	83 30       	cpi	r24, 0x03	; 3
    2be0:	91 05       	cpc	r25, r1
    2be2:	34 f4       	brge	.+12     	; 0x2bf0 <DIO_WritePin+0x60>
    2be4:	2f 81       	ldd	r18, Y+7	; 0x07
    2be6:	38 85       	ldd	r19, Y+8	; 0x08
    2be8:	21 30       	cpi	r18, 0x01	; 1
    2bea:	31 05       	cpc	r19, r1
    2bec:	71 f0       	breq	.+28     	; 0x2c0a <DIO_WritePin+0x7a>
    2bee:	e5 c0       	rjmp	.+458    	; 0x2dba <DIO_WritePin+0x22a>
    2bf0:	4f 81       	ldd	r20, Y+7	; 0x07
    2bf2:	58 85       	ldd	r21, Y+8	; 0x08
    2bf4:	43 30       	cpi	r20, 0x03	; 3
    2bf6:	51 05       	cpc	r21, r1
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <DIO_WritePin+0x6c>
    2bfa:	73 c0       	rjmp	.+230    	; 0x2ce2 <DIO_WritePin+0x152>
    2bfc:	8f 81       	ldd	r24, Y+7	; 0x07
    2bfe:	98 85       	ldd	r25, Y+8	; 0x08
    2c00:	84 30       	cpi	r24, 0x04	; 4
    2c02:	91 05       	cpc	r25, r1
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <DIO_WritePin+0x78>
    2c06:	a3 c0       	rjmp	.+326    	; 0x2d4e <DIO_WritePin+0x1be>
    2c08:	d8 c0       	rjmp	.+432    	; 0x2dba <DIO_WritePin+0x22a>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    2c0a:	ea e3       	ldi	r30, 0x3A	; 58
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	48 2f       	mov	r20, r24
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <DIO_WritePin+0x94>
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	2a 95       	dec	r18
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <DIO_WritePin+0x90>
    2c28:	9a 01       	movw	r18, r20
    2c2a:	28 23       	and	r18, r24
    2c2c:	39 23       	and	r19, r25
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a9 01       	movw	r20, r18
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <DIO_WritePin+0xac>
    2c38:	55 95       	asr	r21
    2c3a:	47 95       	ror	r20
    2c3c:	8a 95       	dec	r24
    2c3e:	e2 f7       	brpl	.-8      	; 0x2c38 <DIO_WritePin+0xa8>
    2c40:	ca 01       	movw	r24, r20
    2c42:	81 30       	cpi	r24, 0x01	; 1
    2c44:	91 05       	cpc	r25, r1
    2c46:	a1 f4       	brne	.+40     	; 0x2c70 <DIO_WritePin+0xe0>
						SET_BIT(PORTA_Register, PinNo);
    2c48:	ab e3       	ldi	r26, 0x3B	; 59
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	eb e3       	ldi	r30, 0x3B	; 59
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	48 2f       	mov	r20, r24
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	02 2e       	mov	r0, r18
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <DIO_WritePin+0xd6>
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	0a 94       	dec	r0
    2c68:	e2 f7       	brpl	.-8      	; 0x2c62 <DIO_WritePin+0xd2>
    2c6a:	84 2b       	or	r24, r20
    2c6c:	8c 93       	st	X, r24
    2c6e:	b3 c1       	rjmp	.+870    	; 0x2fd6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	b0 c1       	rjmp	.+864    	; 0x2fd6 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    2c76:	e7 e3       	ldi	r30, 0x37	; 55
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	48 2f       	mov	r20, r24
    2c7e:	50 e0       	ldi	r21, 0x00	; 0
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <DIO_WritePin+0x100>
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	2a 95       	dec	r18
    2c92:	e2 f7       	brpl	.-8      	; 0x2c8c <DIO_WritePin+0xfc>
    2c94:	9a 01       	movw	r18, r20
    2c96:	28 23       	and	r18, r24
    2c98:	39 23       	and	r19, r25
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a9 01       	movw	r20, r18
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <DIO_WritePin+0x118>
    2ca4:	55 95       	asr	r21
    2ca6:	47 95       	ror	r20
    2ca8:	8a 95       	dec	r24
    2caa:	e2 f7       	brpl	.-8      	; 0x2ca4 <DIO_WritePin+0x114>
    2cac:	ca 01       	movw	r24, r20
    2cae:	81 30       	cpi	r24, 0x01	; 1
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	a1 f4       	brne	.+40     	; 0x2cdc <DIO_WritePin+0x14c>
						SET_BIT(PORTB_Register, PinNo);
    2cb4:	a8 e3       	ldi	r26, 0x38	; 56
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e8 e3       	ldi	r30, 0x38	; 56
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	48 2f       	mov	r20, r24
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	02 2e       	mov	r0, r18
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <DIO_WritePin+0x142>
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	0a 94       	dec	r0
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <DIO_WritePin+0x13e>
    2cd6:	84 2b       	or	r24, r20
    2cd8:	8c 93       	st	X, r24
    2cda:	7d c1       	rjmp	.+762    	; 0x2fd6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	7a c1       	rjmp	.+756    	; 0x2fd6 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    2ce2:	e4 e3       	ldi	r30, 0x34	; 52
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	48 2f       	mov	r20, r24
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <DIO_WritePin+0x16c>
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	2a 95       	dec	r18
    2cfe:	e2 f7       	brpl	.-8      	; 0x2cf8 <DIO_WritePin+0x168>
    2d00:	9a 01       	movw	r18, r20
    2d02:	28 23       	and	r18, r24
    2d04:	39 23       	and	r19, r25
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	88 2f       	mov	r24, r24
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a9 01       	movw	r20, r18
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <DIO_WritePin+0x184>
    2d10:	55 95       	asr	r21
    2d12:	47 95       	ror	r20
    2d14:	8a 95       	dec	r24
    2d16:	e2 f7       	brpl	.-8      	; 0x2d10 <DIO_WritePin+0x180>
    2d18:	ca 01       	movw	r24, r20
    2d1a:	81 30       	cpi	r24, 0x01	; 1
    2d1c:	91 05       	cpc	r25, r1
    2d1e:	a1 f4       	brne	.+40     	; 0x2d48 <DIO_WritePin+0x1b8>
						SET_BIT(PORTC_Register, PinNo);
    2d20:	a5 e3       	ldi	r26, 0x35	; 53
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e5 e3       	ldi	r30, 0x35	; 53
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	48 2f       	mov	r20, r24
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	02 2e       	mov	r0, r18
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <DIO_WritePin+0x1ae>
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	0a 94       	dec	r0
    2d40:	e2 f7       	brpl	.-8      	; 0x2d3a <DIO_WritePin+0x1aa>
    2d42:	84 2b       	or	r24, r20
    2d44:	8c 93       	st	X, r24
    2d46:	47 c1       	rjmp	.+654    	; 0x2fd6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	44 c1       	rjmp	.+648    	; 0x2fd6 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    2d4e:	e1 e3       	ldi	r30, 0x31	; 49
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	48 2f       	mov	r20, r24
    2d56:	50 e0       	ldi	r21, 0x00	; 0
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <DIO_WritePin+0x1d8>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	2a 95       	dec	r18
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <DIO_WritePin+0x1d4>
    2d6c:	9a 01       	movw	r18, r20
    2d6e:	28 23       	and	r18, r24
    2d70:	39 23       	and	r19, r25
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	88 2f       	mov	r24, r24
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	a9 01       	movw	r20, r18
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <DIO_WritePin+0x1f0>
    2d7c:	55 95       	asr	r21
    2d7e:	47 95       	ror	r20
    2d80:	8a 95       	dec	r24
    2d82:	e2 f7       	brpl	.-8      	; 0x2d7c <DIO_WritePin+0x1ec>
    2d84:	ca 01       	movw	r24, r20
    2d86:	81 30       	cpi	r24, 0x01	; 1
    2d88:	91 05       	cpc	r25, r1
    2d8a:	a1 f4       	brne	.+40     	; 0x2db4 <DIO_WritePin+0x224>
						SET_BIT(PORTD_Register, PinNo);
    2d8c:	a2 e3       	ldi	r26, 0x32	; 50
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e2 e3       	ldi	r30, 0x32	; 50
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	48 2f       	mov	r20, r24
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	02 2e       	mov	r0, r18
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <DIO_WritePin+0x21a>
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	0a 94       	dec	r0
    2dac:	e2 f7       	brpl	.-8      	; 0x2da6 <DIO_WritePin+0x216>
    2dae:	84 2b       	or	r24, r20
    2db0:	8c 93       	st	X, r24
    2db2:	11 c1       	rjmp	.+546    	; 0x2fd6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	0e c1       	rjmp	.+540    	; 0x2fd6 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	0b c1       	rjmp	.+534    	; 0x2fd6 <DIO_WritePin+0x446>
					break;
				}
			} else if (PinValue == PIN_LOW) {
    2dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc2:	88 23       	and	r24, r24
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <DIO_WritePin+0x238>
    2dc6:	02 c1       	rjmp	.+516    	; 0x2fcc <DIO_WritePin+0x43c>

				switch (PortName) {
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	3e 83       	std	Y+6, r19	; 0x06
    2dd0:	2d 83       	std	Y+5, r18	; 0x05
    2dd2:	4d 81       	ldd	r20, Y+5	; 0x05
    2dd4:	5e 81       	ldd	r21, Y+6	; 0x06
    2dd6:	42 30       	cpi	r20, 0x02	; 2
    2dd8:	51 05       	cpc	r21, r1
    2dda:	09 f4       	brne	.+2      	; 0x2dde <DIO_WritePin+0x24e>
    2ddc:	4f c0       	rjmp	.+158    	; 0x2e7c <DIO_WritePin+0x2ec>
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	83 30       	cpi	r24, 0x03	; 3
    2de4:	91 05       	cpc	r25, r1
    2de6:	34 f4       	brge	.+12     	; 0x2df4 <DIO_WritePin+0x264>
    2de8:	2d 81       	ldd	r18, Y+5	; 0x05
    2dea:	3e 81       	ldd	r19, Y+6	; 0x06
    2dec:	21 30       	cpi	r18, 0x01	; 1
    2dee:	31 05       	cpc	r19, r1
    2df0:	71 f0       	breq	.+28     	; 0x2e0e <DIO_WritePin+0x27e>
    2df2:	e9 c0       	rjmp	.+466    	; 0x2fc6 <DIO_WritePin+0x436>
    2df4:	4d 81       	ldd	r20, Y+5	; 0x05
    2df6:	5e 81       	ldd	r21, Y+6	; 0x06
    2df8:	43 30       	cpi	r20, 0x03	; 3
    2dfa:	51 05       	cpc	r21, r1
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <DIO_WritePin+0x270>
    2dfe:	75 c0       	rjmp	.+234    	; 0x2eea <DIO_WritePin+0x35a>
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	84 30       	cpi	r24, 0x04	; 4
    2e06:	91 05       	cpc	r25, r1
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <DIO_WritePin+0x27c>
    2e0a:	a6 c0       	rjmp	.+332    	; 0x2f58 <DIO_WritePin+0x3c8>
    2e0c:	dc c0       	rjmp	.+440    	; 0x2fc6 <DIO_WritePin+0x436>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    2e0e:	ea e3       	ldi	r30, 0x3A	; 58
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	48 2f       	mov	r20, r24
    2e16:	50 e0       	ldi	r21, 0x00	; 0
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <DIO_WritePin+0x298>
    2e24:	88 0f       	add	r24, r24
    2e26:	99 1f       	adc	r25, r25
    2e28:	2a 95       	dec	r18
    2e2a:	e2 f7       	brpl	.-8      	; 0x2e24 <DIO_WritePin+0x294>
    2e2c:	9a 01       	movw	r18, r20
    2e2e:	28 23       	and	r18, r24
    2e30:	39 23       	and	r19, r25
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	88 2f       	mov	r24, r24
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	a9 01       	movw	r20, r18
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <DIO_WritePin+0x2b0>
    2e3c:	55 95       	asr	r21
    2e3e:	47 95       	ror	r20
    2e40:	8a 95       	dec	r24
    2e42:	e2 f7       	brpl	.-8      	; 0x2e3c <DIO_WritePin+0x2ac>
    2e44:	ca 01       	movw	r24, r20
    2e46:	81 30       	cpi	r24, 0x01	; 1
    2e48:	91 05       	cpc	r25, r1
    2e4a:	a9 f4       	brne	.+42     	; 0x2e76 <DIO_WritePin+0x2e6>
						CLEAR_BIT(PORTA_Register, PinNo);
    2e4c:	ab e3       	ldi	r26, 0x3B	; 59
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	eb e3       	ldi	r30, 0x3B	; 59
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	48 2f       	mov	r20, r24
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	02 2e       	mov	r0, r18
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <DIO_WritePin+0x2da>
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	0a 94       	dec	r0
    2e6c:	e2 f7       	brpl	.-8      	; 0x2e66 <DIO_WritePin+0x2d6>
    2e6e:	80 95       	com	r24
    2e70:	84 23       	and	r24, r20
    2e72:	8c 93       	st	X, r24
    2e74:	b0 c0       	rjmp	.+352    	; 0x2fd6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	ad c0       	rjmp	.+346    	; 0x2fd6 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    2e7c:	e7 e3       	ldi	r30, 0x37	; 55
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	48 2f       	mov	r20, r24
    2e84:	50 e0       	ldi	r21, 0x00	; 0
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <DIO_WritePin+0x306>
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	2a 95       	dec	r18
    2e98:	e2 f7       	brpl	.-8      	; 0x2e92 <DIO_WritePin+0x302>
    2e9a:	9a 01       	movw	r18, r20
    2e9c:	28 23       	and	r18, r24
    2e9e:	39 23       	and	r19, r25
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	a9 01       	movw	r20, r18
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <DIO_WritePin+0x31e>
    2eaa:	55 95       	asr	r21
    2eac:	47 95       	ror	r20
    2eae:	8a 95       	dec	r24
    2eb0:	e2 f7       	brpl	.-8      	; 0x2eaa <DIO_WritePin+0x31a>
    2eb2:	ca 01       	movw	r24, r20
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	a9 f4       	brne	.+42     	; 0x2ee4 <DIO_WritePin+0x354>
						CLEAR_BIT(PORTB_Register, PinNo);
    2eba:	a8 e3       	ldi	r26, 0x38	; 56
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	e8 e3       	ldi	r30, 0x38	; 56
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	48 2f       	mov	r20, r24
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	28 2f       	mov	r18, r24
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	02 2e       	mov	r0, r18
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <DIO_WritePin+0x348>
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	0a 94       	dec	r0
    2eda:	e2 f7       	brpl	.-8      	; 0x2ed4 <DIO_WritePin+0x344>
    2edc:	80 95       	com	r24
    2ede:	84 23       	and	r24, r20
    2ee0:	8c 93       	st	X, r24
    2ee2:	79 c0       	rjmp	.+242    	; 0x2fd6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	76 c0       	rjmp	.+236    	; 0x2fd6 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    2eea:	e4 e3       	ldi	r30, 0x34	; 52
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	48 2f       	mov	r20, r24
    2ef2:	50 e0       	ldi	r21, 0x00	; 0
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	28 2f       	mov	r18, r24
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	02 c0       	rjmp	.+4      	; 0x2f04 <DIO_WritePin+0x374>
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	2a 95       	dec	r18
    2f06:	e2 f7       	brpl	.-8      	; 0x2f00 <DIO_WritePin+0x370>
    2f08:	9a 01       	movw	r18, r20
    2f0a:	28 23       	and	r18, r24
    2f0c:	39 23       	and	r19, r25
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	88 2f       	mov	r24, r24
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a9 01       	movw	r20, r18
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <DIO_WritePin+0x38c>
    2f18:	55 95       	asr	r21
    2f1a:	47 95       	ror	r20
    2f1c:	8a 95       	dec	r24
    2f1e:	e2 f7       	brpl	.-8      	; 0x2f18 <DIO_WritePin+0x388>
    2f20:	ca 01       	movw	r24, r20
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	91 05       	cpc	r25, r1
    2f26:	a9 f4       	brne	.+42     	; 0x2f52 <DIO_WritePin+0x3c2>
						CLEAR_BIT(PORTC_Register, PinNo);
    2f28:	a5 e3       	ldi	r26, 0x35	; 53
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	e5 e3       	ldi	r30, 0x35	; 53
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	48 2f       	mov	r20, r24
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	02 2e       	mov	r0, r18
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <DIO_WritePin+0x3b6>
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	0a 94       	dec	r0
    2f48:	e2 f7       	brpl	.-8      	; 0x2f42 <DIO_WritePin+0x3b2>
    2f4a:	80 95       	com	r24
    2f4c:	84 23       	and	r24, r20
    2f4e:	8c 93       	st	X, r24
    2f50:	42 c0       	rjmp	.+132    	; 0x2fd6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	3f c0       	rjmp	.+126    	; 0x2fd6 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    2f58:	e1 e3       	ldi	r30, 0x31	; 49
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	48 2f       	mov	r20, r24
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	28 2f       	mov	r18, r24
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <DIO_WritePin+0x3e2>
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	2a 95       	dec	r18
    2f74:	e2 f7       	brpl	.-8      	; 0x2f6e <DIO_WritePin+0x3de>
    2f76:	9a 01       	movw	r18, r20
    2f78:	28 23       	and	r18, r24
    2f7a:	39 23       	and	r19, r25
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a9 01       	movw	r20, r18
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <DIO_WritePin+0x3fa>
    2f86:	55 95       	asr	r21
    2f88:	47 95       	ror	r20
    2f8a:	8a 95       	dec	r24
    2f8c:	e2 f7       	brpl	.-8      	; 0x2f86 <DIO_WritePin+0x3f6>
    2f8e:	ca 01       	movw	r24, r20
    2f90:	81 30       	cpi	r24, 0x01	; 1
    2f92:	91 05       	cpc	r25, r1
    2f94:	a9 f4       	brne	.+42     	; 0x2fc0 <DIO_WritePin+0x430>
						CLEAR_BIT(PORTD_Register, PinNo);
    2f96:	a2 e3       	ldi	r26, 0x32	; 50
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	e2 e3       	ldi	r30, 0x32	; 50
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	48 2f       	mov	r20, r24
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	02 2e       	mov	r0, r18
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <DIO_WritePin+0x424>
    2fb0:	88 0f       	add	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	0a 94       	dec	r0
    2fb6:	e2 f7       	brpl	.-8      	; 0x2fb0 <DIO_WritePin+0x420>
    2fb8:	80 95       	com	r24
    2fba:	84 23       	and	r24, r20
    2fbc:	8c 93       	st	X, r24
    2fbe:	0b c0       	rjmp	.+22     	; 0x2fd6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	89 83       	std	Y+1, r24	; 0x01
    2fc4:	08 c0       	rjmp	.+16     	; 0x2fd6 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	05 c0       	rjmp	.+10     	; 0x2fd6 <DIO_WritePin+0x446>
					break;
				}
			} else {
				ErrorValue = EXIT_FAILURE;
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	89 83       	std	Y+1, r24	; 0x01
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <DIO_WritePin+0x446>
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd8:	28 96       	adiw	r28, 0x08	; 8
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <DIO_TogglePin>:
uint8_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <DIO_TogglePin+0x6>
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <DIO_TogglePin+0x8>
    2ff2:	0f 92       	push	r0
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	8a 83       	std	Y+2, r24	; 0x02
    2ffa:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    2ffc:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	85 30       	cpi	r24, 0x05	; 5
    3002:	08 f0       	brcs	.+2      	; 0x3006 <DIO_TogglePin+0x1c>
    3004:	02 c1       	rjmp	.+516    	; 0x320a <DIO_TogglePin+0x220>
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	88 30       	cpi	r24, 0x08	; 8
    300a:	08 f0       	brcs	.+2      	; 0x300e <DIO_TogglePin+0x24>
    300c:	fe c0       	rjmp	.+508    	; 0x320a <DIO_TogglePin+0x220>
			switch (PortName) {
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	28 2f       	mov	r18, r24
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	3d 83       	std	Y+5, r19	; 0x05
    3016:	2c 83       	std	Y+4, r18	; 0x04
    3018:	4c 81       	ldd	r20, Y+4	; 0x04
    301a:	5d 81       	ldd	r21, Y+5	; 0x05
    301c:	42 30       	cpi	r20, 0x02	; 2
    301e:	51 05       	cpc	r21, r1
    3020:	09 f4       	brne	.+2      	; 0x3024 <DIO_TogglePin+0x3a>
    3022:	4e c0       	rjmp	.+156    	; 0x30c0 <DIO_TogglePin+0xd6>
    3024:	8c 81       	ldd	r24, Y+4	; 0x04
    3026:	9d 81       	ldd	r25, Y+5	; 0x05
    3028:	83 30       	cpi	r24, 0x03	; 3
    302a:	91 05       	cpc	r25, r1
    302c:	34 f4       	brge	.+12     	; 0x303a <DIO_TogglePin+0x50>
    302e:	2c 81       	ldd	r18, Y+4	; 0x04
    3030:	3d 81       	ldd	r19, Y+5	; 0x05
    3032:	21 30       	cpi	r18, 0x01	; 1
    3034:	31 05       	cpc	r19, r1
    3036:	71 f0       	breq	.+28     	; 0x3054 <DIO_TogglePin+0x6a>
    3038:	e5 c0       	rjmp	.+458    	; 0x3204 <DIO_TogglePin+0x21a>
    303a:	4c 81       	ldd	r20, Y+4	; 0x04
    303c:	5d 81       	ldd	r21, Y+5	; 0x05
    303e:	43 30       	cpi	r20, 0x03	; 3
    3040:	51 05       	cpc	r21, r1
    3042:	09 f4       	brne	.+2      	; 0x3046 <DIO_TogglePin+0x5c>
    3044:	73 c0       	rjmp	.+230    	; 0x312c <DIO_TogglePin+0x142>
    3046:	8c 81       	ldd	r24, Y+4	; 0x04
    3048:	9d 81       	ldd	r25, Y+5	; 0x05
    304a:	84 30       	cpi	r24, 0x04	; 4
    304c:	91 05       	cpc	r25, r1
    304e:	09 f4       	brne	.+2      	; 0x3052 <DIO_TogglePin+0x68>
    3050:	a3 c0       	rjmp	.+326    	; 0x3198 <DIO_TogglePin+0x1ae>
    3052:	d8 c0       	rjmp	.+432    	; 0x3204 <DIO_TogglePin+0x21a>
			case PORTA:
				if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    3054:	ea e3       	ldi	r30, 0x3A	; 58
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	48 2f       	mov	r20, r24
    305c:	50 e0       	ldi	r21, 0x00	; 0
    305e:	8b 81       	ldd	r24, Y+3	; 0x03
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	02 c0       	rjmp	.+4      	; 0x306e <DIO_TogglePin+0x84>
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	2a 95       	dec	r18
    3070:	e2 f7       	brpl	.-8      	; 0x306a <DIO_TogglePin+0x80>
    3072:	9a 01       	movw	r18, r20
    3074:	28 23       	and	r18, r24
    3076:	39 23       	and	r19, r25
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	88 2f       	mov	r24, r24
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	a9 01       	movw	r20, r18
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <DIO_TogglePin+0x9c>
    3082:	55 95       	asr	r21
    3084:	47 95       	ror	r20
    3086:	8a 95       	dec	r24
    3088:	e2 f7       	brpl	.-8      	; 0x3082 <DIO_TogglePin+0x98>
    308a:	ca 01       	movw	r24, r20
    308c:	81 30       	cpi	r24, 0x01	; 1
    308e:	91 05       	cpc	r25, r1
    3090:	a1 f4       	brne	.+40     	; 0x30ba <DIO_TogglePin+0xd0>
					TOG_BIT(PORTA_Register, PinNo);
    3092:	ab e3       	ldi	r26, 0x3B	; 59
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	eb e3       	ldi	r30, 0x3B	; 59
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	48 2f       	mov	r20, r24
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	02 2e       	mov	r0, r18
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <DIO_TogglePin+0xc6>
    30ac:	88 0f       	add	r24, r24
    30ae:	99 1f       	adc	r25, r25
    30b0:	0a 94       	dec	r0
    30b2:	e2 f7       	brpl	.-8      	; 0x30ac <DIO_TogglePin+0xc2>
    30b4:	84 27       	eor	r24, r20
    30b6:	8c 93       	st	X, r24
    30b8:	aa c0       	rjmp	.+340    	; 0x320e <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	a7 c0       	rjmp	.+334    	; 0x320e <DIO_TogglePin+0x224>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    30c0:	e7 e3       	ldi	r30, 0x37	; 55
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	80 81       	ld	r24, Z
    30c6:	48 2f       	mov	r20, r24
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <DIO_TogglePin+0xf0>
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	2a 95       	dec	r18
    30dc:	e2 f7       	brpl	.-8      	; 0x30d6 <DIO_TogglePin+0xec>
    30de:	9a 01       	movw	r18, r20
    30e0:	28 23       	and	r18, r24
    30e2:	39 23       	and	r19, r25
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	88 2f       	mov	r24, r24
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	a9 01       	movw	r20, r18
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <DIO_TogglePin+0x108>
    30ee:	55 95       	asr	r21
    30f0:	47 95       	ror	r20
    30f2:	8a 95       	dec	r24
    30f4:	e2 f7       	brpl	.-8      	; 0x30ee <DIO_TogglePin+0x104>
    30f6:	ca 01       	movw	r24, r20
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	91 05       	cpc	r25, r1
    30fc:	a1 f4       	brne	.+40     	; 0x3126 <DIO_TogglePin+0x13c>
					TOG_BIT(PORTB_Register, PinNo);
    30fe:	a8 e3       	ldi	r26, 0x38	; 56
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e8 e3       	ldi	r30, 0x38	; 56
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	48 2f       	mov	r20, r24
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	02 2e       	mov	r0, r18
    3116:	02 c0       	rjmp	.+4      	; 0x311c <DIO_TogglePin+0x132>
    3118:	88 0f       	add	r24, r24
    311a:	99 1f       	adc	r25, r25
    311c:	0a 94       	dec	r0
    311e:	e2 f7       	brpl	.-8      	; 0x3118 <DIO_TogglePin+0x12e>
    3120:	84 27       	eor	r24, r20
    3122:	8c 93       	st	X, r24
    3124:	74 c0       	rjmp	.+232    	; 0x320e <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	89 83       	std	Y+1, r24	; 0x01
    312a:	71 c0       	rjmp	.+226    	; 0x320e <DIO_TogglePin+0x224>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    312c:	e4 e3       	ldi	r30, 0x34	; 52
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	48 2f       	mov	r20, r24
    3134:	50 e0       	ldi	r21, 0x00	; 0
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <DIO_TogglePin+0x15c>
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	2a 95       	dec	r18
    3148:	e2 f7       	brpl	.-8      	; 0x3142 <DIO_TogglePin+0x158>
    314a:	9a 01       	movw	r18, r20
    314c:	28 23       	and	r18, r24
    314e:	39 23       	and	r19, r25
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	a9 01       	movw	r20, r18
    3158:	02 c0       	rjmp	.+4      	; 0x315e <DIO_TogglePin+0x174>
    315a:	55 95       	asr	r21
    315c:	47 95       	ror	r20
    315e:	8a 95       	dec	r24
    3160:	e2 f7       	brpl	.-8      	; 0x315a <DIO_TogglePin+0x170>
    3162:	ca 01       	movw	r24, r20
    3164:	81 30       	cpi	r24, 0x01	; 1
    3166:	91 05       	cpc	r25, r1
    3168:	a1 f4       	brne	.+40     	; 0x3192 <DIO_TogglePin+0x1a8>
					TOG_BIT(PORTC_Register, PinNo);
    316a:	a5 e3       	ldi	r26, 0x35	; 53
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e5 e3       	ldi	r30, 0x35	; 53
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	48 2f       	mov	r20, r24
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	28 2f       	mov	r18, r24
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	02 2e       	mov	r0, r18
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <DIO_TogglePin+0x19e>
    3184:	88 0f       	add	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	0a 94       	dec	r0
    318a:	e2 f7       	brpl	.-8      	; 0x3184 <DIO_TogglePin+0x19a>
    318c:	84 27       	eor	r24, r20
    318e:	8c 93       	st	X, r24
    3190:	3e c0       	rjmp	.+124    	; 0x320e <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	3b c0       	rjmp	.+118    	; 0x320e <DIO_TogglePin+0x224>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    3198:	e1 e3       	ldi	r30, 0x31	; 49
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	48 2f       	mov	r20, r24
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	02 c0       	rjmp	.+4      	; 0x31b2 <DIO_TogglePin+0x1c8>
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	2a 95       	dec	r18
    31b4:	e2 f7       	brpl	.-8      	; 0x31ae <DIO_TogglePin+0x1c4>
    31b6:	9a 01       	movw	r18, r20
    31b8:	28 23       	and	r18, r24
    31ba:	39 23       	and	r19, r25
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	88 2f       	mov	r24, r24
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	a9 01       	movw	r20, r18
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <DIO_TogglePin+0x1e0>
    31c6:	55 95       	asr	r21
    31c8:	47 95       	ror	r20
    31ca:	8a 95       	dec	r24
    31cc:	e2 f7       	brpl	.-8      	; 0x31c6 <DIO_TogglePin+0x1dc>
    31ce:	ca 01       	movw	r24, r20
    31d0:	81 30       	cpi	r24, 0x01	; 1
    31d2:	91 05       	cpc	r25, r1
    31d4:	a1 f4       	brne	.+40     	; 0x31fe <DIO_TogglePin+0x214>
					TOG_BIT(PORTD_Register, PinNo);
    31d6:	a2 e3       	ldi	r26, 0x32	; 50
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e2 e3       	ldi	r30, 0x32	; 50
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	48 2f       	mov	r20, r24
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	02 2e       	mov	r0, r18
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <DIO_TogglePin+0x20a>
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	0a 94       	dec	r0
    31f6:	e2 f7       	brpl	.-8      	; 0x31f0 <DIO_TogglePin+0x206>
    31f8:	84 27       	eor	r24, r20
    31fa:	8c 93       	st	X, r24
    31fc:	08 c0       	rjmp	.+16     	; 0x320e <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	05 c0       	rjmp	.+10     	; 0x320e <DIO_TogglePin+0x224>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	89 83       	std	Y+1, r24	; 0x01
    3208:	02 c0       	rjmp	.+4      	; 0x320e <DIO_TogglePin+0x224>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    320e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <DIO_ReadPin>:
uint8_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	27 97       	sbiw	r28, 0x07	; 7
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	8a 83       	std	Y+2, r24	; 0x02
    3236:	6b 83       	std	Y+3, r22	; 0x03
    3238:	5d 83       	std	Y+5, r21	; 0x05
    323a:	4c 83       	std	Y+4, r20	; 0x04
	Byte RETVAL = EXIT_SUCCESFUL;
    323c:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	85 30       	cpi	r24, 0x05	; 5
    3242:	08 f0       	brcs	.+2      	; 0x3246 <DIO_ReadPin+0x26>
    3244:	a9 c0       	rjmp	.+338    	; 0x3398 <DIO_ReadPin+0x178>
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	88 30       	cpi	r24, 0x08	; 8
    324a:	08 f0       	brcs	.+2      	; 0x324e <DIO_ReadPin+0x2e>
    324c:	a5 c0       	rjmp	.+330    	; 0x3398 <DIO_ReadPin+0x178>

			switch (PortName) {
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	3f 83       	std	Y+7, r19	; 0x07
    3256:	2e 83       	std	Y+6, r18	; 0x06
    3258:	4e 81       	ldd	r20, Y+6	; 0x06
    325a:	5f 81       	ldd	r21, Y+7	; 0x07
    325c:	42 30       	cpi	r20, 0x02	; 2
    325e:	51 05       	cpc	r21, r1
    3260:	c1 f1       	breq	.+112    	; 0x32d2 <DIO_ReadPin+0xb2>
    3262:	8e 81       	ldd	r24, Y+6	; 0x06
    3264:	9f 81       	ldd	r25, Y+7	; 0x07
    3266:	83 30       	cpi	r24, 0x03	; 3
    3268:	91 05       	cpc	r25, r1
    326a:	34 f4       	brge	.+12     	; 0x3278 <DIO_ReadPin+0x58>
    326c:	2e 81       	ldd	r18, Y+6	; 0x06
    326e:	3f 81       	ldd	r19, Y+7	; 0x07
    3270:	21 30       	cpi	r18, 0x01	; 1
    3272:	31 05       	cpc	r19, r1
    3274:	71 f0       	breq	.+28     	; 0x3292 <DIO_ReadPin+0x72>
    3276:	8d c0       	rjmp	.+282    	; 0x3392 <DIO_ReadPin+0x172>
    3278:	4e 81       	ldd	r20, Y+6	; 0x06
    327a:	5f 81       	ldd	r21, Y+7	; 0x07
    327c:	43 30       	cpi	r20, 0x03	; 3
    327e:	51 05       	cpc	r21, r1
    3280:	09 f4       	brne	.+2      	; 0x3284 <DIO_ReadPin+0x64>
    3282:	47 c0       	rjmp	.+142    	; 0x3312 <DIO_ReadPin+0xf2>
    3284:	8e 81       	ldd	r24, Y+6	; 0x06
    3286:	9f 81       	ldd	r25, Y+7	; 0x07
    3288:	84 30       	cpi	r24, 0x04	; 4
    328a:	91 05       	cpc	r25, r1
    328c:	09 f4       	brne	.+2      	; 0x3290 <DIO_ReadPin+0x70>
    328e:	61 c0       	rjmp	.+194    	; 0x3352 <DIO_ReadPin+0x132>
    3290:	80 c0       	rjmp	.+256    	; 0x3392 <DIO_ReadPin+0x172>
			case PORTA:
				*PinData = READ_BIT(PINA_Register, PinNo);
    3292:	e9 e3       	ldi	r30, 0x39	; 57
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	80 81       	ld	r24, Z
    3298:	48 2f       	mov	r20, r24
    329a:	50 e0       	ldi	r21, 0x00	; 0
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	02 c0       	rjmp	.+4      	; 0x32ac <DIO_ReadPin+0x8c>
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	2a 95       	dec	r18
    32ae:	e2 f7       	brpl	.-8      	; 0x32a8 <DIO_ReadPin+0x88>
    32b0:	9a 01       	movw	r18, r20
    32b2:	28 23       	and	r18, r24
    32b4:	39 23       	and	r19, r25
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	88 2f       	mov	r24, r24
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a9 01       	movw	r20, r18
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <DIO_ReadPin+0xa4>
    32c0:	55 95       	asr	r21
    32c2:	47 95       	ror	r20
    32c4:	8a 95       	dec	r24
    32c6:	e2 f7       	brpl	.-8      	; 0x32c0 <DIO_ReadPin+0xa0>
    32c8:	ca 01       	movw	r24, r20
    32ca:	ec 81       	ldd	r30, Y+4	; 0x04
    32cc:	fd 81       	ldd	r31, Y+5	; 0x05
    32ce:	80 83       	st	Z, r24
    32d0:	65 c0       	rjmp	.+202    	; 0x339c <DIO_ReadPin+0x17c>
				break;
			case PORTB:
				*PinData = READ_BIT(PINB_Register, PinNo);
    32d2:	e6 e3       	ldi	r30, 0x36	; 54
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	48 2f       	mov	r20, r24
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	28 2f       	mov	r18, r24
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <DIO_ReadPin+0xcc>
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	2a 95       	dec	r18
    32ee:	e2 f7       	brpl	.-8      	; 0x32e8 <DIO_ReadPin+0xc8>
    32f0:	9a 01       	movw	r18, r20
    32f2:	28 23       	and	r18, r24
    32f4:	39 23       	and	r19, r25
    32f6:	8b 81       	ldd	r24, Y+3	; 0x03
    32f8:	88 2f       	mov	r24, r24
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	a9 01       	movw	r20, r18
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <DIO_ReadPin+0xe4>
    3300:	55 95       	asr	r21
    3302:	47 95       	ror	r20
    3304:	8a 95       	dec	r24
    3306:	e2 f7       	brpl	.-8      	; 0x3300 <DIO_ReadPin+0xe0>
    3308:	ca 01       	movw	r24, r20
    330a:	ec 81       	ldd	r30, Y+4	; 0x04
    330c:	fd 81       	ldd	r31, Y+5	; 0x05
    330e:	80 83       	st	Z, r24
    3310:	45 c0       	rjmp	.+138    	; 0x339c <DIO_ReadPin+0x17c>
				break;
			case PORTC:
				*PinData = READ_BIT(PINC_Register, PinNo);
    3312:	e3 e3       	ldi	r30, 0x33	; 51
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	48 2f       	mov	r20, r24
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	02 c0       	rjmp	.+4      	; 0x332c <DIO_ReadPin+0x10c>
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	2a 95       	dec	r18
    332e:	e2 f7       	brpl	.-8      	; 0x3328 <DIO_ReadPin+0x108>
    3330:	9a 01       	movw	r18, r20
    3332:	28 23       	and	r18, r24
    3334:	39 23       	and	r19, r25
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	88 2f       	mov	r24, r24
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	a9 01       	movw	r20, r18
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <DIO_ReadPin+0x124>
    3340:	55 95       	asr	r21
    3342:	47 95       	ror	r20
    3344:	8a 95       	dec	r24
    3346:	e2 f7       	brpl	.-8      	; 0x3340 <DIO_ReadPin+0x120>
    3348:	ca 01       	movw	r24, r20
    334a:	ec 81       	ldd	r30, Y+4	; 0x04
    334c:	fd 81       	ldd	r31, Y+5	; 0x05
    334e:	80 83       	st	Z, r24
    3350:	25 c0       	rjmp	.+74     	; 0x339c <DIO_ReadPin+0x17c>
				break;
			case PORTD:
				*PinData = READ_BIT(PIND_Register, PinNo);
    3352:	e0 e3       	ldi	r30, 0x30	; 48
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	48 2f       	mov	r20, r24
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	28 2f       	mov	r18, r24
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	02 c0       	rjmp	.+4      	; 0x336c <DIO_ReadPin+0x14c>
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	2a 95       	dec	r18
    336e:	e2 f7       	brpl	.-8      	; 0x3368 <DIO_ReadPin+0x148>
    3370:	9a 01       	movw	r18, r20
    3372:	28 23       	and	r18, r24
    3374:	39 23       	and	r19, r25
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	88 2f       	mov	r24, r24
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	a9 01       	movw	r20, r18
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <DIO_ReadPin+0x164>
    3380:	55 95       	asr	r21
    3382:	47 95       	ror	r20
    3384:	8a 95       	dec	r24
    3386:	e2 f7       	brpl	.-8      	; 0x3380 <DIO_ReadPin+0x160>
    3388:	ca 01       	movw	r24, r20
    338a:	ec 81       	ldd	r30, Y+4	; 0x04
    338c:	fd 81       	ldd	r31, Y+5	; 0x05
    338e:	80 83       	st	Z, r24
    3390:	05 c0       	rjmp	.+10     	; 0x339c <DIO_ReadPin+0x17c>
				break;
			default:
				RETVAL = EXIT_FAILURE;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	02 c0       	rjmp	.+4      	; 0x339c <DIO_ReadPin+0x17c>
			}
		} else {
			RETVAL = EXIT_FAILURE;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	89 83       	std	Y+1, r24	; 0x01
		}

		return RETVAL;
    339c:	89 81       	ldd	r24, Y+1	; 0x01
}
    339e:	27 96       	adiw	r28, 0x07	; 7
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	08 95       	ret

000033b0 <DIO_EnablePinPullup>:
uint8_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <DIO_EnablePinPullup+0x6>
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <DIO_EnablePinPullup+0x8>
    33b8:	0f 92       	push	r0
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	8a 83       	std	Y+2, r24	; 0x02
    33c0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    33c2:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	85 30       	cpi	r24, 0x05	; 5
    33c8:	08 f0       	brcs	.+2      	; 0x33cc <DIO_EnablePinPullup+0x1c>
    33ca:	99 c0       	rjmp	.+306    	; 0x34fe <DIO_EnablePinPullup+0x14e>
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	88 30       	cpi	r24, 0x08	; 8
    33d0:	08 f0       	brcs	.+2      	; 0x33d4 <DIO_EnablePinPullup+0x24>
    33d2:	95 c0       	rjmp	.+298    	; 0x34fe <DIO_EnablePinPullup+0x14e>
			/* Check on the Required PORT Number */
			switch (PortName) {
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	28 2f       	mov	r18, r24
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	3d 83       	std	Y+5, r19	; 0x05
    33dc:	2c 83       	std	Y+4, r18	; 0x04
    33de:	8c 81       	ldd	r24, Y+4	; 0x04
    33e0:	9d 81       	ldd	r25, Y+5	; 0x05
    33e2:	82 30       	cpi	r24, 0x02	; 2
    33e4:	91 05       	cpc	r25, r1
    33e6:	a1 f1       	breq	.+104    	; 0x3450 <DIO_EnablePinPullup+0xa0>
    33e8:	2c 81       	ldd	r18, Y+4	; 0x04
    33ea:	3d 81       	ldd	r19, Y+5	; 0x05
    33ec:	23 30       	cpi	r18, 0x03	; 3
    33ee:	31 05       	cpc	r19, r1
    33f0:	34 f4       	brge	.+12     	; 0x33fe <DIO_EnablePinPullup+0x4e>
    33f2:	8c 81       	ldd	r24, Y+4	; 0x04
    33f4:	9d 81       	ldd	r25, Y+5	; 0x05
    33f6:	81 30       	cpi	r24, 0x01	; 1
    33f8:	91 05       	cpc	r25, r1
    33fa:	71 f0       	breq	.+28     	; 0x3418 <DIO_EnablePinPullup+0x68>
    33fc:	7d c0       	rjmp	.+250    	; 0x34f8 <DIO_EnablePinPullup+0x148>
    33fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3400:	3d 81       	ldd	r19, Y+5	; 0x05
    3402:	23 30       	cpi	r18, 0x03	; 3
    3404:	31 05       	cpc	r19, r1
    3406:	09 f4       	brne	.+2      	; 0x340a <DIO_EnablePinPullup+0x5a>
    3408:	3f c0       	rjmp	.+126    	; 0x3488 <DIO_EnablePinPullup+0xd8>
    340a:	8c 81       	ldd	r24, Y+4	; 0x04
    340c:	9d 81       	ldd	r25, Y+5	; 0x05
    340e:	84 30       	cpi	r24, 0x04	; 4
    3410:	91 05       	cpc	r25, r1
    3412:	09 f4       	brne	.+2      	; 0x3416 <DIO_EnablePinPullup+0x66>
    3414:	55 c0       	rjmp	.+170    	; 0x34c0 <DIO_EnablePinPullup+0x110>
    3416:	70 c0       	rjmp	.+224    	; 0x34f8 <DIO_EnablePinPullup+0x148>
			case PORTA:
				if (READ_REG(DDRA_Register) == PIN_INPUT) {
    3418:	ea e3       	ldi	r30, 0x3A	; 58
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	88 23       	and	r24, r24
    3420:	a1 f4       	brne	.+40     	; 0x344a <DIO_EnablePinPullup+0x9a>
					SET_BIT(PORTA_Register, PinNo);
    3422:	ab e3       	ldi	r26, 0x3B	; 59
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	eb e3       	ldi	r30, 0x3B	; 59
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	48 2f       	mov	r20, r24
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	02 2e       	mov	r0, r18
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <DIO_EnablePinPullup+0x90>
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	0a 94       	dec	r0
    3442:	e2 f7       	brpl	.-8      	; 0x343c <DIO_EnablePinPullup+0x8c>
    3444:	84 2b       	or	r24, r20
    3446:	8c 93       	st	X, r24
    3448:	5c c0       	rjmp	.+184    	; 0x3502 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	89 83       	std	Y+1, r24	; 0x01
    344e:	59 c0       	rjmp	.+178    	; 0x3502 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTB:
				if (READ_REG(DDRB_Register) == PIN_INPUT) {
    3450:	e7 e3       	ldi	r30, 0x37	; 55
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	88 23       	and	r24, r24
    3458:	a1 f4       	brne	.+40     	; 0x3482 <DIO_EnablePinPullup+0xd2>
					SET_BIT(PORTB_Register, PinNo);
    345a:	a8 e3       	ldi	r26, 0x38	; 56
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	e8 e3       	ldi	r30, 0x38	; 56
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	80 81       	ld	r24, Z
    3464:	48 2f       	mov	r20, r24
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	28 2f       	mov	r18, r24
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	02 2e       	mov	r0, r18
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <DIO_EnablePinPullup+0xc8>
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	0a 94       	dec	r0
    347a:	e2 f7       	brpl	.-8      	; 0x3474 <DIO_EnablePinPullup+0xc4>
    347c:	84 2b       	or	r24, r20
    347e:	8c 93       	st	X, r24
    3480:	40 c0       	rjmp	.+128    	; 0x3502 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	89 83       	std	Y+1, r24	; 0x01
    3486:	3d c0       	rjmp	.+122    	; 0x3502 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTC:
				if (READ_REG(DDRC_Register) == PIN_INPUT) {
    3488:	e4 e3       	ldi	r30, 0x34	; 52
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	88 23       	and	r24, r24
    3490:	a1 f4       	brne	.+40     	; 0x34ba <DIO_EnablePinPullup+0x10a>
					SET_BIT(PORTC_Register, PinNo);
    3492:	a5 e3       	ldi	r26, 0x35	; 53
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	e5 e3       	ldi	r30, 0x35	; 53
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	48 2f       	mov	r20, r24
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	28 2f       	mov	r18, r24
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	02 2e       	mov	r0, r18
    34aa:	02 c0       	rjmp	.+4      	; 0x34b0 <DIO_EnablePinPullup+0x100>
    34ac:	88 0f       	add	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	0a 94       	dec	r0
    34b2:	e2 f7       	brpl	.-8      	; 0x34ac <DIO_EnablePinPullup+0xfc>
    34b4:	84 2b       	or	r24, r20
    34b6:	8c 93       	st	X, r24
    34b8:	24 c0       	rjmp	.+72     	; 0x3502 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	89 83       	std	Y+1, r24	; 0x01
    34be:	21 c0       	rjmp	.+66     	; 0x3502 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTD:
				if (READ_REG(DDRD_Register) == PIN_INPUT) {
    34c0:	e1 e3       	ldi	r30, 0x31	; 49
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	88 23       	and	r24, r24
    34c8:	a1 f4       	brne	.+40     	; 0x34f2 <DIO_EnablePinPullup+0x142>
					SET_BIT(PORTD_Register, PinNo);
    34ca:	a2 e3       	ldi	r26, 0x32	; 50
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	e2 e3       	ldi	r30, 0x32	; 50
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	48 2f       	mov	r20, r24
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	02 2e       	mov	r0, r18
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <DIO_EnablePinPullup+0x138>
    34e4:	88 0f       	add	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	0a 94       	dec	r0
    34ea:	e2 f7       	brpl	.-8      	; 0x34e4 <DIO_EnablePinPullup+0x134>
    34ec:	84 2b       	or	r24, r20
    34ee:	8c 93       	st	X, r24
    34f0:	08 c0       	rjmp	.+16     	; 0x3502 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	89 83       	std	Y+1, r24	; 0x01
    34f6:	05 c0       	rjmp	.+10     	; 0x3502 <DIO_EnablePinPullup+0x152>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	89 83       	std	Y+1, r24	; 0x01
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <DIO_EnablePinPullup+0x152>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    3502:	89 81       	ldd	r24, Y+1	; 0x01
}
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	08 95       	ret

00003514 <ADC_Init>:
#include "ADC.h"

void static (*ADC_Conversion_Complete_callback)(void) = NULL;

uint8_t ADC_Init(uint8_t ADC_Number)
{
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	00 d0       	rcall	.+0      	; 0x351a <ADC_Init+0x6>
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
    3520:	8f ef       	ldi	r24, 0xFF	; 255
    3522:	89 83       	std	Y+1, r24	; 0x01
	/*Set the data adjustment*/
	MODIFY_REG(ADC_MultiplixerSelectionReg, ADC_ConversionValueLeftAdjust_MSK,
    3524:	a7 e2       	ldi	r26, 0x27	; 39
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	e7 e2       	ldi	r30, 0x27	; 39
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	80 62       	ori	r24, 0x20	; 32
    3530:	8c 93       	st	X, r24
			ADC_ReadingAdjustment<<ADC_ConversionValueLeftAdjust_BIT);
	/*Setting the voltage reference*/
	ADC_SetVref();
    3532:	0e 94 32 1b 	call	0x3664	; 0x3664 <ADC_SetVref>
	/*Prescalar from configuration files*/
	ADC_SetPrescalar();
    3536:	0e 94 47 1b 	call	0x368e	; 0x368e <ADC_SetPrescalar>
//	//for debug.
//	DIO_SetPortVal(PORTB,ADC_MultiplixerSelectionReg);
	/*setting the trigger source*/
	ADC_SetTrigerringSource();
    353a:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <ADC_SetTrigerringSource>
	/*clearing interrupt flag*/
	SET_BIT(ADC_ControlAndStatusReg,ADC_InterruptFlag_BIT);
    353e:	a6 e2       	ldi	r26, 0x26	; 38
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	e6 e2       	ldi	r30, 0x26	; 38
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	80 61       	ori	r24, 0x10	; 16
    354a:	8c 93       	st	X, r24
	/*enable ADC module*/
	SET_BIT(ADC_ControlAndStatusReg,ADC_Enable_BIT);
    354c:	a6 e2       	ldi	r26, 0x26	; 38
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	e6 e2       	ldi	r30, 0x26	; 38
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	80 68       	ori	r24, 0x80	; 128
    3558:	8c 93       	st	X, r24
	return ErrRetVal;
    355a:	89 81       	ldd	r24, Y+1	; 0x01
}
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <ADC_StartConversion>:
uint8_t ADC_StartConversion(uint8_t ADC_Number)
{
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	00 d0       	rcall	.+0      	; 0x356c <ADC_StartConversion+0x6>
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
    3572:	8f ef       	ldi	r24, 0xFF	; 255
    3574:	89 83       	std	Y+1, r24	; 0x01
	/*channel selection*/
	ADC_ChannelSelect();
    3576:	0e 94 1e 1b 	call	0x363c	; 0x363c <ADC_ChannelSelect>
	/*Set start conversion bit*/
	SET_BIT(ADC_ControlAndStatusReg,ADC_StartConversion_BIT);
    357a:	a6 e2       	ldi	r26, 0x26	; 38
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	e6 e2       	ldi	r30, 0x26	; 38
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	80 64       	ori	r24, 0x40	; 64
    3586:	8c 93       	st	X, r24
	if(READ_BIT(ADC_ControlAndStatusReg,ADC_Enable_BIT))
    3588:	e6 e2       	ldi	r30, 0x26	; 38
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	88 1f       	adc	r24, r24
    3590:	88 27       	eor	r24, r24
    3592:	88 1f       	adc	r24, r24
    3594:	88 2f       	mov	r24, r24
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	90 70       	andi	r25, 0x00	; 0
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	11 f0       	breq	.+4      	; 0x35a2 <ADC_StartConversion+0x3c>
	{
//		SET_BIT(ADC_ControlAndStatusReg,ADC_InterruptFlag_BIT);
		ErrRetVal= OperationSuccess;
    359e:	19 82       	std	Y+1, r1	; 0x01
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <ADC_StartConversion+0x40>
	}
	else
	{
		ErrRetVal=OperationFail;
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <ADC_GetConversionResult>:
uint8_t ADC_GetConversionResult(uint16_t* Result)
{
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <ADC_GetConversionResult+0x6>
    35b8:	0f 92       	push	r0
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	9b 83       	std	Y+3, r25	; 0x03
    35c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
    35c2:	8f ef       	ldi	r24, 0xFF	; 255
    35c4:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(ADC_ControlAndStatusReg,ADC_StartConversion_BIT)==0)
    35c6:	e6 e2       	ldi	r30, 0x26	; 38
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	80 74       	andi	r24, 0x40	; 64
    35d2:	90 70       	andi	r25, 0x00	; 0
    35d4:	08 2e       	mov	r0, r24
    35d6:	89 2f       	mov	r24, r25
    35d8:	00 0c       	add	r0, r0
    35da:	88 1f       	adc	r24, r24
    35dc:	99 0b       	sbc	r25, r25
    35de:	00 0c       	add	r0, r0
    35e0:	88 1f       	adc	r24, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	09 f5       	brne	.+66     	; 0x362a <ADC_GetConversionResult+0x78>
	{

		if (ADC_ReadingAdjustment == ADC_LeftAdjusted)
		{
			*Result = (ADC_DataReg >> 6);
    35e8:	e4 e2       	ldi	r30, 0x24	; 36
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	80 81       	ld	r24, Z
    35ee:	91 81       	ldd	r25, Z+1	; 0x01
    35f0:	00 24       	eor	r0, r0
    35f2:	88 0f       	add	r24, r24
    35f4:	99 1f       	adc	r25, r25
    35f6:	00 1c       	adc	r0, r0
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	00 1c       	adc	r0, r0
    35fe:	89 2f       	mov	r24, r25
    3600:	90 2d       	mov	r25, r0
    3602:	ea 81       	ldd	r30, Y+2	; 0x02
    3604:	fb 81       	ldd	r31, Y+3	; 0x03
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	80 83       	st	Z, r24
		} else
		{
			*Result = ADC_DataReg;
		}
		SET_BIT(ADC_ControlAndStatusReg,ADC_InterruptFlag_BIT);//Try
    360a:	a6 e2       	ldi	r26, 0x26	; 38
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e6 e2       	ldi	r30, 0x26	; 38
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	80 61       	ori	r24, 0x10	; 16
    3616:	8c 93       	st	X, r24
		ErrRetVal = OperationSuccess;
    3618:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(ADC_ControlAndStatusReg,ADC_InterruptFlag_BIT);
    361a:	a6 e2       	ldi	r26, 0x26	; 38
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	e6 e2       	ldi	r30, 0x26	; 38
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	80 81       	ld	r24, Z
    3624:	80 61       	ori	r24, 0x10	; 16
    3626:	8c 93       	st	X, r24
    3628:	02 c0       	rjmp	.+4      	; 0x362e <ADC_GetConversionResult+0x7c>
	}
	else
	{
		ErrRetVal = OperationFail;
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
    362e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <ADC_ChannelSelect>:

uint8_t ADC_ChannelSelect()/*in ADC Start Conversion*/
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	0f 92       	push	r0
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
    3646:	8f ef       	ldi	r24, 0xFF	; 255
    3648:	89 83       	std	Y+1, r24	; 0x01
	switch(ADC_SelectedChannel)
	{
	case ADC_SingleEnded_Channel_0:
	case ADC_Differential_Positive_ADC_0_Negative_ADC_0_Gain_10:
	case ADC_Differential_Positive_ADC_0_Negative_ADC_0_Gain_200:
		MODIFY_REG(ADC_MultiplixerSelectionReg, ADC_MUX_SelectionBits_MSK,
    364a:	a7 e2       	ldi	r26, 0x27	; 39
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	e7 e2       	ldi	r30, 0x27	; 39
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	80 77       	andi	r24, 0x70	; 112
    3656:	8c 93       	st	X, r24
				ADC_SelectedChannel);
		ErrRetVal=OperationSuccess;
    3658:	19 82       	std	Y+1, r1	; 0x01
		ErrRetVal=OperationSuccess;
		break;
	default:
		ErrRetVal=OperationFail;
	}
	return ErrRetVal;
    365a:	89 81       	ldd	r24, Y+1	; 0x01
}
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <ADC_SetVref>:
uint8_t ADC_SetVref()/*in initialization*/
{
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	0f 92       	push	r0
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
    366e:	8f ef       	ldi	r24, 0xFF	; 255
    3670:	89 83       	std	Y+1, r24	; 0x01
	MODIFY_REG(ADC_MultiplixerSelectionReg, ADC_VoltageReference_MSK,
    3672:	a7 e2       	ldi	r26, 0x27	; 39
    3674:	b0 e0       	ldi	r27, 0x00	; 0
    3676:	e7 e2       	ldi	r30, 0x27	; 39
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	8f 73       	andi	r24, 0x3F	; 63
    367e:	80 64       	ori	r24, 0x40	; 64
    3680:	8c 93       	st	X, r24
			ADC_VoltageRef<<ADC_VoltageReferenceStarting_BIT);
	ErrRetVal=OperationSuccess;
    3682:	19 82       	std	Y+1, r1	; 0x01
	return ErrRetVal;
    3684:	89 81       	ldd	r24, Y+1	; 0x01
}
    3686:	0f 90       	pop	r0
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <ADC_SetPrescalar>:
uint8_t ADC_SetPrescalar()/*in initialization*/
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	0f 92       	push	r0
    3694:	cd b7       	in	r28, 0x3d	; 61
    3696:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
    3698:	8f ef       	ldi	r24, 0xFF	; 255
    369a:	89 83       	std	Y+1, r24	; 0x01
	MODIFY_REG(ADC_ControlAndStatusReg,ADC_Prescalar_MSK,ADC_Prescalar);
    369c:	a6 e2       	ldi	r26, 0x26	; 38
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	e6 e2       	ldi	r30, 0x26	; 38
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	80 81       	ld	r24, Z
    36a6:	88 7f       	andi	r24, 0xF8	; 248
    36a8:	86 60       	ori	r24, 0x06	; 6
    36aa:	8c 93       	st	X, r24
	ErrRetVal = OperationSuccess;
    36ac:	19 82       	std	Y+1, r1	; 0x01
	return ErrRetVal;
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    36b0:	0f 90       	pop	r0
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <ADC_SetTrigerringSource>:
uint8_t ADC_SetTrigerringSource()/*in initialization*/
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	0f 92       	push	r0
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
    36c2:	8f ef       	ldi	r24, 0xFF	; 255
    36c4:	89 83       	std	Y+1, r24	; 0x01
				ADC_AutoTrigger_Source<<ADC_AutoTriggerStarting_BIT);
		ErrRetVal=OperationSuccess;
	}
	else
	{
		ErrRetVal=OperationFail;
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    36cc:	0f 90       	pop	r0
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	08 95       	ret

000036d4 <ADC_EnableInterrupt>:

uint8_t ADC_EnableInterrupt()
{
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	0f 92       	push	r0
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
    36de:	8f ef       	ldi	r24, 0xFF	; 255
    36e0:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
    36e2:	af e5       	ldi	r26, 0x5F	; 95
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	ef e5       	ldi	r30, 0x5F	; 95
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	80 81       	ld	r24, Z
    36ec:	80 68       	ori	r24, 0x80	; 128
    36ee:	8c 93       	st	X, r24
	SET_BIT(ADC_ControlAndStatusReg, ADC_InterruptEnable_BIT);
    36f0:	a6 e2       	ldi	r26, 0x26	; 38
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	e6 e2       	ldi	r30, 0x26	; 38
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	88 60       	ori	r24, 0x08	; 8
    36fc:	8c 93       	st	X, r24
	return ErrRetVal;
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3700:	0f 90       	pop	r0
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <ADC_DisableInterrupt>:
uint8_t ADC_DisableInterrupt()
{
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	0f 92       	push	r0
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
    3712:	8f ef       	ldi	r24, 0xFF	; 255
    3714:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(ADC_ControlAndStatusReg,ADC_InterruptEnable_BIT);
    3716:	a6 e2       	ldi	r26, 0x26	; 38
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	e6 e2       	ldi	r30, 0x26	; 38
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	80 81       	ld	r24, Z
    3720:	87 7f       	andi	r24, 0xF7	; 247
    3722:	8c 93       	st	X, r24
	return ErrRetVal;
    3724:	89 81       	ldd	r24, Y+1	; 0x01
}
    3726:	0f 90       	pop	r0
    3728:	cf 91       	pop	r28
    372a:	df 91       	pop	r29
    372c:	08 95       	ret

0000372e <ADC_SetCallback>:
uint8_t ADC_SetCallback(uint8_t ADC_Number, void (*callBack)(void))
{
    372e:	df 93       	push	r29
    3730:	cf 93       	push	r28
    3732:	00 d0       	rcall	.+0      	; 0x3734 <ADC_SetCallback+0x6>
    3734:	00 d0       	rcall	.+0      	; 0x3736 <ADC_SetCallback+0x8>
    3736:	cd b7       	in	r28, 0x3d	; 61
    3738:	de b7       	in	r29, 0x3e	; 62
    373a:	8a 83       	std	Y+2, r24	; 0x02
    373c:	7c 83       	std	Y+4, r23	; 0x04
    373e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
    3740:	8f ef       	ldi	r24, 0xFF	; 255
    3742:	89 83       	std	Y+1, r24	; 0x01
	if(callBack!=NULL)
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	31 f0       	breq	.+12     	; 0x3758 <ADC_SetCallback+0x2a>
		ADC_Conversion_Complete_callback=callBack;
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	9c 81       	ldd	r25, Y+4	; 0x04
    3750:	90 93 a1 01 	sts	0x01A1, r25
    3754:	80 93 a0 01 	sts	0x01A0, r24
	return ErrRetVal;
    3758:	89 81       	ldd	r24, Y+1	; 0x01
}
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0
    3762:	cf 91       	pop	r28
    3764:	df 91       	pop	r29
    3766:	08 95       	ret

00003768 <__vector_16>:
void __vector_16(void)
{
    3768:	1f 92       	push	r1
    376a:	0f 92       	push	r0
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	0f 92       	push	r0
    3770:	11 24       	eor	r1, r1
    3772:	2f 93       	push	r18
    3774:	3f 93       	push	r19
    3776:	4f 93       	push	r20
    3778:	5f 93       	push	r21
    377a:	6f 93       	push	r22
    377c:	7f 93       	push	r23
    377e:	8f 93       	push	r24
    3780:	9f 93       	push	r25
    3782:	af 93       	push	r26
    3784:	bf 93       	push	r27
    3786:	ef 93       	push	r30
    3788:	ff 93       	push	r31
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
	if(ADC_Conversion_Complete_callback!=NULL)
    3792:	80 91 a0 01 	lds	r24, 0x01A0
    3796:	90 91 a1 01 	lds	r25, 0x01A1
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	29 f0       	breq	.+10     	; 0x37a8 <__vector_16+0x40>
		ADC_Conversion_Complete_callback();
    379e:	e0 91 a0 01 	lds	r30, 0x01A0
    37a2:	f0 91 a1 01 	lds	r31, 0x01A1
    37a6:	09 95       	icall
}
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	ff 91       	pop	r31
    37ae:	ef 91       	pop	r30
    37b0:	bf 91       	pop	r27
    37b2:	af 91       	pop	r26
    37b4:	9f 91       	pop	r25
    37b6:	8f 91       	pop	r24
    37b8:	7f 91       	pop	r23
    37ba:	6f 91       	pop	r22
    37bc:	5f 91       	pop	r21
    37be:	4f 91       	pop	r20
    37c0:	3f 91       	pop	r19
    37c2:	2f 91       	pop	r18
    37c4:	0f 90       	pop	r0
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	0f 90       	pop	r0
    37ca:	1f 90       	pop	r1
    37cc:	18 95       	reti

000037ce <STR_Length>:
 *      Author: zoldeyck
 */
#include "STD_TYPES.h"
#include "STRING.h"
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
    37ce:	df 93       	push	r29
    37d0:	cf 93       	push	r28
    37d2:	00 d0       	rcall	.+0      	; 0x37d4 <STR_Length+0x6>
    37d4:	00 d0       	rcall	.+0      	; 0x37d6 <STR_Length+0x8>
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	89 83       	std	Y+1, r24	; 0x01
    37de:	7c 83       	std	Y+4, r23	; 0x04
    37e0:	6b 83       	std	Y+3, r22	; 0x03
	*StringLength = 0;
    37e2:	eb 81       	ldd	r30, Y+3	; 0x03
    37e4:	fc 81       	ldd	r31, Y+4	; 0x04
    37e6:	11 82       	std	Z+1, r1	; 0x01
    37e8:	10 82       	st	Z, r1
    37ea:	0e c0       	rjmp	.+28     	; 0x3808 <STR_Length+0x3a>
	while(*String!='\0')
	{
		(*StringLength)++;
    37ec:	eb 81       	ldd	r30, Y+3	; 0x03
    37ee:	fc 81       	ldd	r31, Y+4	; 0x04
    37f0:	80 81       	ld	r24, Z
    37f2:	91 81       	ldd	r25, Z+1	; 0x01
    37f4:	01 96       	adiw	r24, 0x01	; 1
    37f6:	eb 81       	ldd	r30, Y+3	; 0x03
    37f8:	fc 81       	ldd	r31, Y+4	; 0x04
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	80 83       	st	Z, r24
		String++;
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	9a 81       	ldd	r25, Y+2	; 0x02
    3802:	01 96       	adiw	r24, 0x01	; 1
    3804:	9a 83       	std	Y+2, r25	; 0x02
    3806:	89 83       	std	Y+1, r24	; 0x01
#include "STD_TYPES.h"
#include "STRING.h"
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
    3808:	e9 81       	ldd	r30, Y+1	; 0x01
    380a:	fa 81       	ldd	r31, Y+2	; 0x02
    380c:	80 81       	ld	r24, Z
    380e:	88 23       	and	r24, r24
    3810:	69 f7       	brne	.-38     	; 0x37ec <STR_Length+0x1e>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
    3812:	80 e0       	ldi	r24, 0x00	; 0
}
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	cf 91       	pop	r28
    381e:	df 91       	pop	r29
    3820:	08 95       	ret

00003822 <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
    3822:	df 93       	push	r29
    3824:	cf 93       	push	r28
    3826:	00 d0       	rcall	.+0      	; 0x3828 <STR_CharIsNumeric+0x6>
    3828:	0f 92       	push	r0
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	7b 83       	std	Y+3, r23	; 0x03
    3832:	6a 83       	std	Y+2, r22	; 0x02
	if(Character>=48 && Character<=57)
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	80 33       	cpi	r24, 0x30	; 48
    3838:	40 f0       	brcs	.+16     	; 0x384a <STR_CharIsNumeric+0x28>
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	8a 33       	cpi	r24, 0x3A	; 58
    383e:	28 f4       	brcc	.+10     	; 0x384a <STR_CharIsNumeric+0x28>
	{
		*Result=1;
    3840:	ea 81       	ldd	r30, Y+2	; 0x02
    3842:	fb 81       	ldd	r31, Y+3	; 0x03
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	80 83       	st	Z, r24
    3848:	03 c0       	rjmp	.+6      	; 0x3850 <STR_CharIsNumeric+0x2e>
	}
	else
	{
		*Result=0;
    384a:	ea 81       	ldd	r30, Y+2	; 0x02
    384c:	fb 81       	ldd	r31, Y+3	; 0x03
    384e:	10 82       	st	Z, r1
	}
	return 0;
    3850:	80 e0       	ldi	r24, 0x00	; 0
}
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	00 d0       	rcall	.+0      	; 0x3864 <STR_StringIsNumeric+0x6>
    3864:	00 d0       	rcall	.+0      	; 0x3866 <STR_StringIsNumeric+0x8>
    3866:	0f 92       	push	r0
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    386c:	9b 83       	std	Y+3, r25	; 0x03
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	7d 83       	std	Y+5, r23	; 0x05
    3872:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t FunRetVal = 0;
    3874:	19 82       	std	Y+1, r1	; 0x01
    3876:	19 c0       	rjmp	.+50     	; 0x38aa <STR_StringIsNumeric+0x4c>
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
    3878:	ea 81       	ldd	r30, Y+2	; 0x02
    387a:	fb 81       	ldd	r31, Y+3	; 0x03
    387c:	80 81       	ld	r24, Z
    387e:	9e 01       	movw	r18, r28
    3880:	2f 5f       	subi	r18, 0xFF	; 255
    3882:	3f 4f       	sbci	r19, 0xFF	; 255
    3884:	b9 01       	movw	r22, r18
    3886:	0e 94 11 1c 	call	0x3822	; 0x3822 <STR_CharIsNumeric>
		if(!FunRetVal)
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	88 23       	and	r24, r24
    388e:	21 f4       	brne	.+8      	; 0x3898 <STR_StringIsNumeric+0x3a>
		{
			*Result = 0;
    3890:	ec 81       	ldd	r30, Y+4	; 0x04
    3892:	fd 81       	ldd	r31, Y+5	; 0x05
    3894:	10 82       	st	Z, r1
    3896:	0e c0       	rjmp	.+28     	; 0x38b4 <STR_StringIsNumeric+0x56>
			break;
		}
		else
		{
			*Result = 1;
    3898:	ec 81       	ldd	r30, Y+4	; 0x04
    389a:	fd 81       	ldd	r31, Y+5	; 0x05
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	80 83       	st	Z, r24
			String++;
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	9b 81       	ldd	r25, Y+3	; 0x03
    38a4:	01 96       	adiw	r24, 0x01	; 1
    38a6:	9b 83       	std	Y+3, r25	; 0x03
    38a8:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
    38aa:	ea 81       	ldd	r30, Y+2	; 0x02
    38ac:	fb 81       	ldd	r31, Y+3	; 0x03
    38ae:	80 81       	ld	r24, Z
    38b0:	88 23       	and	r24, r24
    38b2:	11 f7       	brne	.-60     	; 0x3878 <STR_StringIsNumeric+0x1a>
			*Result = 1;
			String++;
			continue;
		}
	}
	return 0;
    38b4:	80 e0       	ldi	r24, 0x00	; 0
}
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <STR_CompareString+0x6>
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <STR_CompareString+0x8>
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <STR_CompareString+0xa>
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
    38d4:	9a 83       	std	Y+2, r25	; 0x02
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	7c 83       	std	Y+4, r23	; 0x04
    38da:	6b 83       	std	Y+3, r22	; 0x03
    38dc:	5e 83       	std	Y+6, r21	; 0x06
    38de:	4d 83       	std	Y+5, r20	; 0x05
	while(1)
	{
		if(*String_1==*String_2)
    38e0:	e9 81       	ldd	r30, Y+1	; 0x01
    38e2:	fa 81       	ldd	r31, Y+2	; 0x02
    38e4:	90 81       	ld	r25, Z
    38e6:	eb 81       	ldd	r30, Y+3	; 0x03
    38e8:	fc 81       	ldd	r31, Y+4	; 0x04
    38ea:	80 81       	ld	r24, Z
    38ec:	98 17       	cp	r25, r24
    38ee:	c9 f4       	brne	.+50     	; 0x3922 <STR_CompareString+0x5c>
		{
			*Result = 1;
    38f0:	ed 81       	ldd	r30, Y+5	; 0x05
    38f2:	fe 81       	ldd	r31, Y+6	; 0x06
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	80 83       	st	Z, r24
			String_1++;
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	01 96       	adiw	r24, 0x01	; 1
    38fe:	9a 83       	std	Y+2, r25	; 0x02
    3900:	89 83       	std	Y+1, r24	; 0x01
			String_2++;
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	9c 81       	ldd	r25, Y+4	; 0x04
    3906:	01 96       	adiw	r24, 0x01	; 1
    3908:	9c 83       	std	Y+4, r25	; 0x04
    390a:	8b 83       	std	Y+3, r24	; 0x03
			if(*String_1=='\0'&&*String_2=='\0')
    390c:	e9 81       	ldd	r30, Y+1	; 0x01
    390e:	fa 81       	ldd	r31, Y+2	; 0x02
    3910:	80 81       	ld	r24, Z
    3912:	88 23       	and	r24, r24
    3914:	29 f7       	brne	.-54     	; 0x38e0 <STR_CompareString+0x1a>
    3916:	eb 81       	ldd	r30, Y+3	; 0x03
    3918:	fc 81       	ldd	r31, Y+4	; 0x04
    391a:	80 81       	ld	r24, Z
    391c:	88 23       	and	r24, r24
    391e:	99 f0       	breq	.+38     	; 0x3946 <STR_CompareString+0x80>
    3920:	df cf       	rjmp	.-66     	; 0x38e0 <STR_CompareString+0x1a>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
    3922:	e9 81       	ldd	r30, Y+1	; 0x01
    3924:	fa 81       	ldd	r31, Y+2	; 0x02
    3926:	80 81       	ld	r24, Z
    3928:	88 23       	and	r24, r24
    392a:	51 f4       	brne	.+20     	; 0x3940 <STR_CompareString+0x7a>
    392c:	eb 81       	ldd	r30, Y+3	; 0x03
    392e:	fc 81       	ldd	r31, Y+4	; 0x04
    3930:	80 81       	ld	r24, Z
    3932:	88 23       	and	r24, r24
    3934:	29 f4       	brne	.+10     	; 0x3940 <STR_CompareString+0x7a>
		{
			*Result = 1;
    3936:	ed 81       	ldd	r30, Y+5	; 0x05
    3938:	fe 81       	ldd	r31, Y+6	; 0x06
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	80 83       	st	Z, r24
    393e:	03 c0       	rjmp	.+6      	; 0x3946 <STR_CompareString+0x80>
			break;
		}
		else
		{
			*Result = 0;
    3940:	ed 81       	ldd	r30, Y+5	; 0x05
    3942:	fe 81       	ldd	r31, Y+6	; 0x06
    3944:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
    3946:	80 e0       	ldi	r24, 0x00	; 0
}
    3948:	26 96       	adiw	r28, 0x06	; 6
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	de bf       	out	0x3e, r29	; 62
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	cd bf       	out	0x3d, r28	; 61
    3954:	cf 91       	pop	r28
    3956:	df 91       	pop	r29
    3958:	08 95       	ret

0000395a <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
    395e:	df 93       	push	r29
    3960:	cf 93       	push	r28
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
    3966:	2a 97       	sbiw	r28, 0x0a	; 10
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	f8 94       	cli
    396c:	de bf       	out	0x3e, r29	; 62
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	cd bf       	out	0x3d, r28	; 61
    3972:	98 87       	std	Y+8, r25	; 0x08
    3974:	8f 83       	std	Y+7, r24	; 0x07
    3976:	7a 87       	std	Y+10, r23	; 0x0a
    3978:	69 87       	std	Y+9, r22	; 0x09
	uint32_t Multiplier=1;
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	a0 e0       	ldi	r26, 0x00	; 0
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	8b 83       	std	Y+3, r24	; 0x03
    3984:	9c 83       	std	Y+4, r25	; 0x04
    3986:	ad 83       	std	Y+5, r26	; 0x05
    3988:	be 83       	std	Y+6, r27	; 0x06
	uint8_t* StartOfString=String;
    398a:	8f 81       	ldd	r24, Y+7	; 0x07
    398c:	98 85       	ldd	r25, Y+8	; 0x08
    398e:	9a 83       	std	Y+2, r25	; 0x02
    3990:	89 83       	std	Y+1, r24	; 0x01
	*Number=0;
    3992:	e9 85       	ldd	r30, Y+9	; 0x09
    3994:	fa 85       	ldd	r31, Y+10	; 0x0a
    3996:	11 82       	std	Z+1, r1	; 0x01
    3998:	10 82       	st	Z, r1
    399a:	05 c0       	rjmp	.+10     	; 0x39a6 <STR_String2Number+0x4c>
	while(*String!='\0')
	{
		String++;
    399c:	8f 81       	ldd	r24, Y+7	; 0x07
    399e:	98 85       	ldd	r25, Y+8	; 0x08
    39a0:	01 96       	adiw	r24, 0x01	; 1
    39a2:	98 87       	std	Y+8, r25	; 0x08
    39a4:	8f 83       	std	Y+7, r24	; 0x07
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
    39a6:	ef 81       	ldd	r30, Y+7	; 0x07
    39a8:	f8 85       	ldd	r31, Y+8	; 0x08
    39aa:	80 81       	ld	r24, Z
    39ac:	88 23       	and	r24, r24
    39ae:	b1 f7       	brne	.-20     	; 0x399c <STR_String2Number+0x42>
		String++;
	}

	do
	{
		String--;
    39b0:	8f 81       	ldd	r24, Y+7	; 0x07
    39b2:	98 85       	ldd	r25, Y+8	; 0x08
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	98 87       	std	Y+8, r25	; 0x08
    39b8:	8f 83       	std	Y+7, r24	; 0x07
		(*Number)+=((*String-48)*Multiplier);
    39ba:	e9 85       	ldd	r30, Y+9	; 0x09
    39bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    39be:	00 81       	ld	r16, Z
    39c0:	11 81       	ldd	r17, Z+1	; 0x01
    39c2:	ef 81       	ldd	r30, Y+7	; 0x07
    39c4:	f8 85       	ldd	r31, Y+8	; 0x08
    39c6:	80 81       	ld	r24, Z
    39c8:	88 2f       	mov	r24, r24
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	c0 97       	sbiw	r24, 0x30	; 48
    39ce:	aa 27       	eor	r26, r26
    39d0:	97 fd       	sbrc	r25, 7
    39d2:	a0 95       	com	r26
    39d4:	ba 2f       	mov	r27, r26
    39d6:	2b 81       	ldd	r18, Y+3	; 0x03
    39d8:	3c 81       	ldd	r19, Y+4	; 0x04
    39da:	4d 81       	ldd	r20, Y+5	; 0x05
    39dc:	5e 81       	ldd	r21, Y+6	; 0x06
    39de:	bc 01       	movw	r22, r24
    39e0:	cd 01       	movw	r24, r26
    39e2:	0e 94 25 23 	call	0x464a	; 0x464a <__mulsi3>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	80 0f       	add	r24, r16
    39ec:	91 1f       	adc	r25, r17
    39ee:	e9 85       	ldd	r30, Y+9	; 0x09
    39f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    39f2:	91 83       	std	Z+1, r25	; 0x01
    39f4:	80 83       	st	Z, r24
		Multiplier*=10;
    39f6:	8b 81       	ldd	r24, Y+3	; 0x03
    39f8:	9c 81       	ldd	r25, Y+4	; 0x04
    39fa:	ad 81       	ldd	r26, Y+5	; 0x05
    39fc:	be 81       	ldd	r27, Y+6	; 0x06
    39fe:	2a e0       	ldi	r18, 0x0A	; 10
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	50 e0       	ldi	r21, 0x00	; 0
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	0e 94 25 23 	call	0x464a	; 0x464a <__mulsi3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	8b 83       	std	Y+3, r24	; 0x03
    3a14:	9c 83       	std	Y+4, r25	; 0x04
    3a16:	ad 83       	std	Y+5, r26	; 0x05
    3a18:	be 83       	std	Y+6, r27	; 0x06
	}while(String!=StartOfString);
    3a1a:	2f 81       	ldd	r18, Y+7	; 0x07
    3a1c:	38 85       	ldd	r19, Y+8	; 0x08
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	9a 81       	ldd	r25, Y+2	; 0x02
    3a22:	28 17       	cp	r18, r24
    3a24:	39 07       	cpc	r19, r25
    3a26:	21 f6       	brne	.-120    	; 0x39b0 <STR_String2Number+0x56>
	return 0;
    3a28:	80 e0       	ldi	r24, 0x00	; 0
}
    3a2a:	2a 96       	adiw	r28, 0x0a	; 10
    3a2c:	0f b6       	in	r0, 0x3f	; 63
    3a2e:	f8 94       	cli
    3a30:	de bf       	out	0x3e, r29	; 62
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	cd bf       	out	0x3d, r28	; 61
    3a36:	cf 91       	pop	r28
    3a38:	df 91       	pop	r29
    3a3a:	1f 91       	pop	r17
    3a3c:	0f 91       	pop	r16
    3a3e:	08 95       	ret

00003a40 <STR_Number2String>:
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	00 d0       	rcall	.+0      	; 0x3a46 <STR_Number2String+0x6>
    3a46:	00 d0       	rcall	.+0      	; 0x3a48 <STR_Number2String+0x8>
    3a48:	00 d0       	rcall	.+0      	; 0x3a4a <STR_Number2String+0xa>
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
    3a4e:	69 83       	std	Y+1, r22	; 0x01
    3a50:	7a 83       	std	Y+2, r23	; 0x02
    3a52:	8b 83       	std	Y+3, r24	; 0x03
    3a54:	9c 83       	std	Y+4, r25	; 0x04
    3a56:	5e 83       	std	Y+6, r21	; 0x06
    3a58:	4d 83       	std	Y+5, r20	; 0x05
	if(Number==0)
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a60:	bc 81       	ldd	r27, Y+4	; 0x04
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	a1 05       	cpc	r26, r1
    3a66:	b1 05       	cpc	r27, r1
    3a68:	29 f4       	brne	.+10     	; 0x3a74 <STR_Number2String+0x34>
	{
		*String='0';
    3a6a:	ed 81       	ldd	r30, Y+5	; 0x05
    3a6c:	fe 81       	ldd	r31, Y+6	; 0x06
    3a6e:	80 e3       	ldi	r24, 0x30	; 48
    3a70:	80 83       	st	Z, r24
    3a72:	31 c0       	rjmp	.+98     	; 0x3ad6 <STR_Number2String+0x96>
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	9a 81       	ldd	r25, Y+2	; 0x02
    3a78:	ab 81       	ldd	r26, Y+3	; 0x03
    3a7a:	bc 81       	ldd	r27, Y+4	; 0x04
    3a7c:	2a e0       	ldi	r18, 0x0A	; 10
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	50 e0       	ldi	r21, 0x00	; 0
    3a84:	bc 01       	movw	r22, r24
    3a86:	cd 01       	movw	r24, r26
    3a88:	0e 94 58 23 	call	0x46b0	; 0x46b0 <__udivmodsi4>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	80 5d       	subi	r24, 0xD0	; 208
    3a92:	ed 81       	ldd	r30, Y+5	; 0x05
    3a94:	fe 81       	ldd	r31, Y+6	; 0x06
    3a96:	80 83       	st	Z, r24
			String++;
    3a98:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9c:	01 96       	adiw	r24, 0x01	; 1
    3a9e:	9e 83       	std	Y+6, r25	; 0x06
    3aa0:	8d 83       	std	Y+5, r24	; 0x05
			Number%=10;
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa6:	ab 81       	ldd	r26, Y+3	; 0x03
    3aa8:	bc 81       	ldd	r27, Y+4	; 0x04
    3aaa:	2a e0       	ldi	r18, 0x0A	; 10
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	50 e0       	ldi	r21, 0x00	; 0
    3ab2:	bc 01       	movw	r22, r24
    3ab4:	cd 01       	movw	r24, r26
    3ab6:	0e 94 58 23 	call	0x46b0	; 0x46b0 <__udivmodsi4>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	9a 83       	std	Y+2, r25	; 0x02
    3ac2:	ab 83       	std	Y+3, r26	; 0x03
    3ac4:	bc 83       	std	Y+4, r27	; 0x04
		}while(Number);
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aca:	ab 81       	ldd	r26, Y+3	; 0x03
    3acc:	bc 81       	ldd	r27, Y+4	; 0x04
    3ace:	00 97       	sbiw	r24, 0x00	; 0
    3ad0:	a1 05       	cpc	r26, r1
    3ad2:	b1 05       	cpc	r27, r1
    3ad4:	79 f6       	brne	.-98     	; 0x3a74 <STR_Number2String+0x34>
	}
	STR_StringReverse(String);
    3ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    3ada:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <STR_StringReverse>
	return 0;
    3ade:	80 e0       	ldi	r24, 0x00	; 0
}
    3ae0:	26 96       	adiw	r28, 0x06	; 6
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
    3af2:	df 93       	push	r29
    3af4:	cf 93       	push	r28
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	27 97       	sbiw	r28, 0x07	; 7
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	9f 83       	std	Y+7, r25	; 0x07
    3b08:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t* A = String;
    3b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    3b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    3b0e:	9d 83       	std	Y+5, r25	; 0x05
    3b10:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t* B = String;
    3b12:	8e 81       	ldd	r24, Y+6	; 0x06
    3b14:	9f 81       	ldd	r25, Y+7	; 0x07
    3b16:	9b 83       	std	Y+3, r25	; 0x03
    3b18:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Temp = 0;
    3b1a:	19 82       	std	Y+1, r1	; 0x01
    3b1c:	05 c0       	rjmp	.+10     	; 0x3b28 <STR_StringReverse+0x36>
	while(*B != '\0')
	{
		B++;
    3b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b20:	9b 81       	ldd	r25, Y+3	; 0x03
    3b22:	01 96       	adiw	r24, 0x01	; 1
    3b24:	9b 83       	std	Y+3, r25	; 0x03
    3b26:	8a 83       	std	Y+2, r24	; 0x02
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    3b28:	ea 81       	ldd	r30, Y+2	; 0x02
    3b2a:	fb 81       	ldd	r31, Y+3	; 0x03
    3b2c:	80 81       	ld	r24, Z
    3b2e:	88 23       	and	r24, r24
    3b30:	b1 f7       	brne	.-20     	; 0x3b1e <STR_StringReverse+0x2c>
	{
		B++;
	}
	B--;
    3b32:	8a 81       	ldd	r24, Y+2	; 0x02
    3b34:	9b 81       	ldd	r25, Y+3	; 0x03
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	9b 83       	std	Y+3, r25	; 0x03
    3b3a:	8a 83       	std	Y+2, r24	; 0x02
    3b3c:	18 c0       	rjmp	.+48     	; 0x3b6e <STR_StringReverse+0x7c>
	while(A<B)
	{
		//swap
		Temp=*A;
    3b3e:	ec 81       	ldd	r30, Y+4	; 0x04
    3b40:	fd 81       	ldd	r31, Y+5	; 0x05
    3b42:	80 81       	ld	r24, Z
    3b44:	89 83       	std	Y+1, r24	; 0x01
		*A=*B;
    3b46:	ea 81       	ldd	r30, Y+2	; 0x02
    3b48:	fb 81       	ldd	r31, Y+3	; 0x03
    3b4a:	80 81       	ld	r24, Z
    3b4c:	ec 81       	ldd	r30, Y+4	; 0x04
    3b4e:	fd 81       	ldd	r31, Y+5	; 0x05
    3b50:	80 83       	st	Z, r24
		*B=Temp;
    3b52:	ea 81       	ldd	r30, Y+2	; 0x02
    3b54:	fb 81       	ldd	r31, Y+3	; 0x03
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	80 83       	st	Z, r24
		A++;B--;
    3b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b5e:	01 96       	adiw	r24, 0x01	; 1
    3b60:	9d 83       	std	Y+5, r25	; 0x05
    3b62:	8c 83       	std	Y+4, r24	; 0x04
    3b64:	8a 81       	ldd	r24, Y+2	; 0x02
    3b66:	9b 81       	ldd	r25, Y+3	; 0x03
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	9b 83       	std	Y+3, r25	; 0x03
    3b6c:	8a 83       	std	Y+2, r24	; 0x02
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    3b6e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b70:	3d 81       	ldd	r19, Y+5	; 0x05
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	9b 81       	ldd	r25, Y+3	; 0x03
    3b76:	28 17       	cp	r18, r24
    3b78:	39 07       	cpc	r19, r25
    3b7a:	08 f3       	brcs	.-62     	; 0x3b3e <STR_StringReverse+0x4c>
		Temp=*A;
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
}
    3b7e:	27 96       	adiw	r28, 0x07	; 7
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	cd bf       	out	0x3d, r28	; 61
    3b8a:	cf 91       	pop	r28
    3b8c:	df 91       	pop	r29
    3b8e:	08 95       	ret

00003b90 <PSHBTTN_Init>:
#include "../../MCAL/DIO/DIO_DRIVER_TypeDef.h"
#include "../../MCAL/DIO/DIO_DRIVER.h"
#include "PushButton.h"

PSHBTTN_ERROR_RETVAL_t PSHBTTN_Init(DIO_PORT_ID_t port, DIO_PIN_ID_t pin,
		PSHBTTN_PULLUP_Status_t status){
    3b90:	df 93       	push	r29
    3b92:	cf 93       	push	r28
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <PSHBTTN_Init+0x6>
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <PSHBTTN_Init+0x8>
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	8a 83       	std	Y+2, r24	; 0x02
    3b9e:	6b 83       	std	Y+3, r22	; 0x03
    3ba0:	4c 83       	std	Y+4, r20	; 0x04
	PSHBTTN_ERROR_RETVAL_t retVal = EXIT_SUCCESFUL;
    3ba2:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinDirection(port, pin, PIN_INPUT);
    3ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba6:	6b 81       	ldd	r22, Y+3	; 0x03
    3ba8:	40 e0       	ldi	r20, 0x00	; 0
    3baa:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	if (!status)
    3bae:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb0:	88 23       	and	r24, r24
    3bb2:	21 f4       	brne	.+8      	; 0x3bbc <PSHBTTN_Init+0x2c>
		PSHBTTN_EnablePullUp(port, pin);
    3bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb6:	6b 81       	ldd	r22, Y+3	; 0x03
    3bb8:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <PSHBTTN_EnablePullUp>
	return retVal;
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	cf 91       	pop	r28
    3bc8:	df 91       	pop	r29
    3bca:	08 95       	ret

00003bcc <PSHBTTN_EnablePullUp>:
PSHBTTN_ERROR_RETVAL_t PSHBTTN_EnablePullUp(DIO_PORT_ID_t port,
		DIO_PIN_ID_t pin){
    3bcc:	df 93       	push	r29
    3bce:	cf 93       	push	r28
    3bd0:	00 d0       	rcall	.+0      	; 0x3bd2 <PSHBTTN_EnablePullUp+0x6>
    3bd2:	0f 92       	push	r0
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	8a 83       	std	Y+2, r24	; 0x02
    3bda:	6b 83       	std	Y+3, r22	; 0x03
	PSHBTTN_ERROR_RETVAL_t retVal = EXIT_SUCCESFUL;
    3bdc:	19 82       	std	Y+1, r1	; 0x01
	DIO_EnablePinPullup(port,pin);
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	6b 81       	ldd	r22, Y+3	; 0x03
    3be2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <DIO_EnablePinPullup>
	return retVal;
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3be8:	0f 90       	pop	r0
    3bea:	0f 90       	pop	r0
    3bec:	0f 90       	pop	r0
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	08 95       	ret

00003bf4 <PSHBTTN_Status>:
Byte PSHBTTN_Status (DIO_PORT_ID_t port, DIO_PIN_ID_t pin){
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	27 97       	sbiw	r28, 0x07	; 7
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	8e 83       	std	Y+6, r24	; 0x06
    3c0a:	6f 83       	std	Y+7, r22	; 0x07
	Byte retVal = EXIT_FAILURE;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	89 83       	std	Y+1, r24	; 0x01
	DIO_ReadPin(port, pin,&retVal);
    3c10:	8e 81       	ldd	r24, Y+6	; 0x06
    3c12:	6f 81       	ldd	r22, Y+7	; 0x07
    3c14:	9e 01       	movw	r18, r28
    3c16:	2f 5f       	subi	r18, 0xFF	; 255
    3c18:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1a:	a9 01       	movw	r20, r18
    3c1c:	0e 94 10 19 	call	0x3220	; 0x3220 <DIO_ReadPin>
	if (retVal == 0){
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	88 23       	and	r24, r24
    3c24:	31 f5       	brne	.+76     	; 0x3c72 <PSHBTTN_Status+0x7e>
			for(volatile uint16_t i=0; i<1000; i++)
    3c26:	1b 82       	std	Y+3, r1	; 0x03
    3c28:	1a 82       	std	Y+2, r1	; 0x02
    3c2a:	15 c0       	rjmp	.+42     	; 0x3c56 <PSHBTTN_Status+0x62>
			{
				for(volatile uint8_t j=0; j<16; j++)
    3c2c:	1c 82       	std	Y+4, r1	; 0x04
    3c2e:	0b c0       	rjmp	.+22     	; 0x3c46 <PSHBTTN_Status+0x52>
				{
					for(volatile uint8_t k=0; k<20; k++);}}//dummy delay for 20ms
    3c30:	1d 82       	std	Y+5, r1	; 0x05
    3c32:	03 c0       	rjmp	.+6      	; 0x3c3a <PSHBTTN_Status+0x46>
    3c34:	8d 81       	ldd	r24, Y+5	; 0x05
    3c36:	8f 5f       	subi	r24, 0xFF	; 255
    3c38:	8d 83       	std	Y+5, r24	; 0x05
    3c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3c:	84 31       	cpi	r24, 0x14	; 20
    3c3e:	d0 f3       	brcs	.-12     	; 0x3c34 <PSHBTTN_Status+0x40>
	Byte retVal = EXIT_FAILURE;
	DIO_ReadPin(port, pin,&retVal);
	if (retVal == 0){
			for(volatile uint16_t i=0; i<1000; i++)
			{
				for(volatile uint8_t j=0; j<16; j++)
    3c40:	8c 81       	ldd	r24, Y+4	; 0x04
    3c42:	8f 5f       	subi	r24, 0xFF	; 255
    3c44:	8c 83       	std	Y+4, r24	; 0x04
    3c46:	8c 81       	ldd	r24, Y+4	; 0x04
    3c48:	80 31       	cpi	r24, 0x10	; 16
    3c4a:	90 f3       	brcs	.-28     	; 0x3c30 <PSHBTTN_Status+0x3c>
}
Byte PSHBTTN_Status (DIO_PORT_ID_t port, DIO_PIN_ID_t pin){
	Byte retVal = EXIT_FAILURE;
	DIO_ReadPin(port, pin,&retVal);
	if (retVal == 0){
			for(volatile uint16_t i=0; i<1000; i++)
    3c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c50:	01 96       	adiw	r24, 0x01	; 1
    3c52:	9b 83       	std	Y+3, r25	; 0x03
    3c54:	8a 83       	std	Y+2, r24	; 0x02
    3c56:	8a 81       	ldd	r24, Y+2	; 0x02
    3c58:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5a:	23 e0       	ldi	r18, 0x03	; 3
    3c5c:	88 3e       	cpi	r24, 0xE8	; 232
    3c5e:	92 07       	cpc	r25, r18
    3c60:	28 f3       	brcs	.-54     	; 0x3c2c <PSHBTTN_Status+0x38>
			{
				for(volatile uint8_t j=0; j<16; j++)
				{
					for(volatile uint8_t k=0; k<20; k++);}}//dummy delay for 20ms
			DIO_ReadPin(port, pin,&retVal);
    3c62:	8e 81       	ldd	r24, Y+6	; 0x06
    3c64:	6f 81       	ldd	r22, Y+7	; 0x07
    3c66:	9e 01       	movw	r18, r28
    3c68:	2f 5f       	subi	r18, 0xFF	; 255
    3c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6c:	a9 01       	movw	r20, r18
    3c6e:	0e 94 10 19 	call	0x3220	; 0x3220 <DIO_ReadPin>
		}
	return retVal;
    3c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c74:	27 96       	adiw	r28, 0x07	; 7
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	cf 91       	pop	r28
    3c82:	df 91       	pop	r29
    3c84:	08 95       	ret

00003c86 <LCD_SendCommand>:
#include "../../MCAL/TIM/TIMER_DRIVER_typedefs.h"
#include "../../MCAL/TIM/TIMER_DRIVER.h"
#include "LCD.h"

void LCD_SendCommand(uint8_t CMD)
{
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	0f 92       	push	r0
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(LCD_PORT,LCD_D7,READ_BIT(CMD,7));
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
    3c94:	98 2f       	mov	r25, r24
    3c96:	99 1f       	adc	r25, r25
    3c98:	99 27       	eor	r25, r25
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	83 e0       	ldi	r24, 0x03	; 3
    3c9e:	63 e0       	ldi	r22, 0x03	; 3
    3ca0:	49 2f       	mov	r20, r25
    3ca2:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_D6,READ_BIT(CMD,6));
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	88 2f       	mov	r24, r24
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	80 74       	andi	r24, 0x40	; 64
    3cae:	90 70       	andi	r25, 0x00	; 0
    3cb0:	08 2e       	mov	r0, r24
    3cb2:	89 2f       	mov	r24, r25
    3cb4:	00 0c       	add	r0, r0
    3cb6:	88 1f       	adc	r24, r24
    3cb8:	99 0b       	sbc	r25, r25
    3cba:	00 0c       	add	r0, r0
    3cbc:	88 1f       	adc	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	98 2f       	mov	r25, r24
    3cc2:	83 e0       	ldi	r24, 0x03	; 3
    3cc4:	62 e0       	ldi	r22, 0x02	; 2
    3cc6:	49 2f       	mov	r20, r25
    3cc8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_D5,READ_BIT(CMD,5));
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	88 2f       	mov	r24, r24
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	80 72       	andi	r24, 0x20	; 32
    3cd4:	90 70       	andi	r25, 0x00	; 0
    3cd6:	95 95       	asr	r25
    3cd8:	87 95       	ror	r24
    3cda:	95 95       	asr	r25
    3cdc:	87 95       	ror	r24
    3cde:	95 95       	asr	r25
    3ce0:	87 95       	ror	r24
    3ce2:	95 95       	asr	r25
    3ce4:	87 95       	ror	r24
    3ce6:	95 95       	asr	r25
    3ce8:	87 95       	ror	r24
    3cea:	98 2f       	mov	r25, r24
    3cec:	83 e0       	ldi	r24, 0x03	; 3
    3cee:	61 e0       	ldi	r22, 0x01	; 1
    3cf0:	49 2f       	mov	r20, r25
    3cf2:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_D4,READ_BIT(CMD,4));
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	88 2f       	mov	r24, r24
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	80 71       	andi	r24, 0x10	; 16
    3cfe:	90 70       	andi	r25, 0x00	; 0
    3d00:	95 95       	asr	r25
    3d02:	87 95       	ror	r24
    3d04:	95 95       	asr	r25
    3d06:	87 95       	ror	r24
    3d08:	95 95       	asr	r25
    3d0a:	87 95       	ror	r24
    3d0c:	95 95       	asr	r25
    3d0e:	87 95       	ror	r24
    3d10:	98 2f       	mov	r25, r24
    3d12:	83 e0       	ldi	r24, 0x03	; 3
    3d14:	60 e0       	ldi	r22, 0x00	; 0
    3d16:	49 2f       	mov	r20, r25
    3d18:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>

	DIO_WritePin(LCD_PORT,LCD_RS,PIN_LOW);
    3d1c:	83 e0       	ldi	r24, 0x03	; 3
    3d1e:	66 e0       	ldi	r22, 0x06	; 6
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_RW,PIN_LOW);
    3d26:	83 e0       	ldi	r24, 0x03	; 3
    3d28:	65 e0       	ldi	r22, 0x05	; 5
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
    3d2c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_EN,PIN_HIGH);
    3d30:	83 e0       	ldi	r24, 0x03	; 3
    3d32:	64 e0       	ldi	r22, 0x04	; 4
    3d34:	41 e0       	ldi	r20, 0x01	; 1
    3d36:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_EN,PIN_LOW);
    3d3a:	83 e0       	ldi	r24, 0x03	; 3
    3d3c:	64 e0       	ldi	r22, 0x04	; 4
    3d3e:	40 e0       	ldi	r20, 0x00	; 0
    3d40:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>

	DIO_WritePin(LCD_PORT,LCD_D7,READ_BIT(CMD,3));
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	88 2f       	mov	r24, r24
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	88 70       	andi	r24, 0x08	; 8
    3d4c:	90 70       	andi	r25, 0x00	; 0
    3d4e:	95 95       	asr	r25
    3d50:	87 95       	ror	r24
    3d52:	95 95       	asr	r25
    3d54:	87 95       	ror	r24
    3d56:	95 95       	asr	r25
    3d58:	87 95       	ror	r24
    3d5a:	98 2f       	mov	r25, r24
    3d5c:	83 e0       	ldi	r24, 0x03	; 3
    3d5e:	63 e0       	ldi	r22, 0x03	; 3
    3d60:	49 2f       	mov	r20, r25
    3d62:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_D6,READ_BIT(CMD,2));
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	88 2f       	mov	r24, r24
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	84 70       	andi	r24, 0x04	; 4
    3d6e:	90 70       	andi	r25, 0x00	; 0
    3d70:	95 95       	asr	r25
    3d72:	87 95       	ror	r24
    3d74:	95 95       	asr	r25
    3d76:	87 95       	ror	r24
    3d78:	98 2f       	mov	r25, r24
    3d7a:	83 e0       	ldi	r24, 0x03	; 3
    3d7c:	62 e0       	ldi	r22, 0x02	; 2
    3d7e:	49 2f       	mov	r20, r25
    3d80:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_D5,READ_BIT(CMD,1));
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	88 2f       	mov	r24, r24
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	82 70       	andi	r24, 0x02	; 2
    3d8c:	90 70       	andi	r25, 0x00	; 0
    3d8e:	95 95       	asr	r25
    3d90:	87 95       	ror	r24
    3d92:	98 2f       	mov	r25, r24
    3d94:	83 e0       	ldi	r24, 0x03	; 3
    3d96:	61 e0       	ldi	r22, 0x01	; 1
    3d98:	49 2f       	mov	r20, r25
    3d9a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_D4,READ_BIT(CMD,0));
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	98 2f       	mov	r25, r24
    3da2:	91 70       	andi	r25, 0x01	; 1
    3da4:	83 e0       	ldi	r24, 0x03	; 3
    3da6:	60 e0       	ldi	r22, 0x00	; 0
    3da8:	49 2f       	mov	r20, r25
    3daa:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>

	DIO_WritePin(LCD_PORT,LCD_RS,PIN_LOW);
    3dae:	83 e0       	ldi	r24, 0x03	; 3
    3db0:	66 e0       	ldi	r22, 0x06	; 6
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_RW,PIN_LOW);
    3db8:	83 e0       	ldi	r24, 0x03	; 3
    3dba:	65 e0       	ldi	r22, 0x05	; 5
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_EN,PIN_HIGH);
    3dc2:	83 e0       	ldi	r24, 0x03	; 3
    3dc4:	64 e0       	ldi	r22, 0x04	; 4
    3dc6:	41 e0       	ldi	r20, 0x01	; 1
    3dc8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT,LCD_EN,PIN_LOW);
    3dcc:	83 e0       	ldi	r24, 0x03	; 3
    3dce:	64 e0       	ldi	r22, 0x04	; 4
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
}
    3dd6:	0f 90       	pop	r0
    3dd8:	cf 91       	pop	r28
    3dda:	df 91       	pop	r29
    3ddc:	08 95       	ret

00003dde <LCD_SendCharacter>:
void LCD_SendCharacter(uint8_t Character)
{
    3dde:	df 93       	push	r29
    3de0:	cf 93       	push	r28
    3de2:	0f 92       	push	r0
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
    3de8:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(LCD_PORT, LCD_D7, READ_BIT(Character, 7));
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	98 2f       	mov	r25, r24
    3dee:	99 1f       	adc	r25, r25
    3df0:	99 27       	eor	r25, r25
    3df2:	99 1f       	adc	r25, r25
    3df4:	83 e0       	ldi	r24, 0x03	; 3
    3df6:	63 e0       	ldi	r22, 0x03	; 3
    3df8:	49 2f       	mov	r20, r25
    3dfa:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D6, READ_BIT(Character, 6));
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	88 2f       	mov	r24, r24
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	80 74       	andi	r24, 0x40	; 64
    3e06:	90 70       	andi	r25, 0x00	; 0
    3e08:	08 2e       	mov	r0, r24
    3e0a:	89 2f       	mov	r24, r25
    3e0c:	00 0c       	add	r0, r0
    3e0e:	88 1f       	adc	r24, r24
    3e10:	99 0b       	sbc	r25, r25
    3e12:	00 0c       	add	r0, r0
    3e14:	88 1f       	adc	r24, r24
    3e16:	99 1f       	adc	r25, r25
    3e18:	98 2f       	mov	r25, r24
    3e1a:	83 e0       	ldi	r24, 0x03	; 3
    3e1c:	62 e0       	ldi	r22, 0x02	; 2
    3e1e:	49 2f       	mov	r20, r25
    3e20:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D5, READ_BIT(Character, 5));
    3e24:	89 81       	ldd	r24, Y+1	; 0x01
    3e26:	88 2f       	mov	r24, r24
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	80 72       	andi	r24, 0x20	; 32
    3e2c:	90 70       	andi	r25, 0x00	; 0
    3e2e:	95 95       	asr	r25
    3e30:	87 95       	ror	r24
    3e32:	95 95       	asr	r25
    3e34:	87 95       	ror	r24
    3e36:	95 95       	asr	r25
    3e38:	87 95       	ror	r24
    3e3a:	95 95       	asr	r25
    3e3c:	87 95       	ror	r24
    3e3e:	95 95       	asr	r25
    3e40:	87 95       	ror	r24
    3e42:	98 2f       	mov	r25, r24
    3e44:	83 e0       	ldi	r24, 0x03	; 3
    3e46:	61 e0       	ldi	r22, 0x01	; 1
    3e48:	49 2f       	mov	r20, r25
    3e4a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D4, READ_BIT(Character, 4));
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	88 2f       	mov	r24, r24
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	80 71       	andi	r24, 0x10	; 16
    3e56:	90 70       	andi	r25, 0x00	; 0
    3e58:	95 95       	asr	r25
    3e5a:	87 95       	ror	r24
    3e5c:	95 95       	asr	r25
    3e5e:	87 95       	ror	r24
    3e60:	95 95       	asr	r25
    3e62:	87 95       	ror	r24
    3e64:	95 95       	asr	r25
    3e66:	87 95       	ror	r24
    3e68:	98 2f       	mov	r25, r24
    3e6a:	83 e0       	ldi	r24, 0x03	; 3
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	49 2f       	mov	r20, r25
    3e70:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>

	DIO_WritePin(LCD_PORT, LCD_RS, PIN_HIGH);
    3e74:	83 e0       	ldi	r24, 0x03	; 3
    3e76:	66 e0       	ldi	r22, 0x06	; 6
    3e78:	41 e0       	ldi	r20, 0x01	; 1
    3e7a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
    3e7e:	83 e0       	ldi	r24, 0x03	; 3
    3e80:	65 e0       	ldi	r22, 0x05	; 5
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
    3e88:	83 e0       	ldi	r24, 0x03	; 3
    3e8a:	64 e0       	ldi	r22, 0x04	; 4
    3e8c:	41 e0       	ldi	r20, 0x01	; 1
    3e8e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
    3e92:	83 e0       	ldi	r24, 0x03	; 3
    3e94:	64 e0       	ldi	r22, 0x04	; 4
    3e96:	40 e0       	ldi	r20, 0x00	; 0
    3e98:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>

	DIO_WritePin(LCD_PORT, LCD_D7, READ_BIT(Character, 3));
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	88 2f       	mov	r24, r24
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	88 70       	andi	r24, 0x08	; 8
    3ea4:	90 70       	andi	r25, 0x00	; 0
    3ea6:	95 95       	asr	r25
    3ea8:	87 95       	ror	r24
    3eaa:	95 95       	asr	r25
    3eac:	87 95       	ror	r24
    3eae:	95 95       	asr	r25
    3eb0:	87 95       	ror	r24
    3eb2:	98 2f       	mov	r25, r24
    3eb4:	83 e0       	ldi	r24, 0x03	; 3
    3eb6:	63 e0       	ldi	r22, 0x03	; 3
    3eb8:	49 2f       	mov	r20, r25
    3eba:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D6, READ_BIT(Character, 2));
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	88 2f       	mov	r24, r24
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	84 70       	andi	r24, 0x04	; 4
    3ec6:	90 70       	andi	r25, 0x00	; 0
    3ec8:	95 95       	asr	r25
    3eca:	87 95       	ror	r24
    3ecc:	95 95       	asr	r25
    3ece:	87 95       	ror	r24
    3ed0:	98 2f       	mov	r25, r24
    3ed2:	83 e0       	ldi	r24, 0x03	; 3
    3ed4:	62 e0       	ldi	r22, 0x02	; 2
    3ed6:	49 2f       	mov	r20, r25
    3ed8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D5, READ_BIT(Character, 1));
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	88 2f       	mov	r24, r24
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	82 70       	andi	r24, 0x02	; 2
    3ee4:	90 70       	andi	r25, 0x00	; 0
    3ee6:	95 95       	asr	r25
    3ee8:	87 95       	ror	r24
    3eea:	98 2f       	mov	r25, r24
    3eec:	83 e0       	ldi	r24, 0x03	; 3
    3eee:	61 e0       	ldi	r22, 0x01	; 1
    3ef0:	49 2f       	mov	r20, r25
    3ef2:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D4, READ_BIT(Character, 0));
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	98 2f       	mov	r25, r24
    3efa:	91 70       	andi	r25, 0x01	; 1
    3efc:	83 e0       	ldi	r24, 0x03	; 3
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	49 2f       	mov	r20, r25
    3f02:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>

	DIO_WritePin(LCD_PORT, LCD_RS, PIN_HIGH);
    3f06:	83 e0       	ldi	r24, 0x03	; 3
    3f08:	66 e0       	ldi	r22, 0x06	; 6
    3f0a:	41 e0       	ldi	r20, 0x01	; 1
    3f0c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
    3f10:	83 e0       	ldi	r24, 0x03	; 3
    3f12:	65 e0       	ldi	r22, 0x05	; 5
    3f14:	40 e0       	ldi	r20, 0x00	; 0
    3f16:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_EN, PIN_HIGH);
    3f1a:	83 e0       	ldi	r24, 0x03	; 3
    3f1c:	64 e0       	ldi	r22, 0x04	; 4
    3f1e:	41 e0       	ldi	r20, 0x01	; 1
    3f20:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
    3f24:	83 e0       	ldi	r24, 0x03	; 3
    3f26:	64 e0       	ldi	r22, 0x04	; 4
    3f28:	40 e0       	ldi	r20, 0x00	; 0
    3f2a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
}
    3f2e:	0f 90       	pop	r0
    3f30:	cf 91       	pop	r28
    3f32:	df 91       	pop	r29
    3f34:	08 95       	ret

00003f36 <LCD_Init>:
void LCD_Init()
{
    3f36:	df 93       	push	r29
    3f38:	cf 93       	push	r28
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LCD_PORT, LCD_D7, PIN_OUTPUT);
    3f3e:	83 e0       	ldi	r24, 0x03	; 3
    3f40:	63 e0       	ldi	r22, 0x03	; 3
    3f42:	41 e0       	ldi	r20, 0x01	; 1
    3f44:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_PORT, LCD_D6, PIN_OUTPUT);
    3f48:	83 e0       	ldi	r24, 0x03	; 3
    3f4a:	62 e0       	ldi	r22, 0x02	; 2
    3f4c:	41 e0       	ldi	r20, 0x01	; 1
    3f4e:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_PORT, LCD_D5, PIN_OUTPUT);
    3f52:	83 e0       	ldi	r24, 0x03	; 3
    3f54:	61 e0       	ldi	r22, 0x01	; 1
    3f56:	41 e0       	ldi	r20, 0x01	; 1
    3f58:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_PORT, LCD_D4, PIN_OUTPUT);
    3f5c:	83 e0       	ldi	r24, 0x03	; 3
    3f5e:	60 e0       	ldi	r22, 0x00	; 0
    3f60:	41 e0       	ldi	r20, 0x01	; 1
    3f62:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_PORT, LCD_RS, PIN_OUTPUT);
    3f66:	83 e0       	ldi	r24, 0x03	; 3
    3f68:	66 e0       	ldi	r22, 0x06	; 6
    3f6a:	41 e0       	ldi	r20, 0x01	; 1
    3f6c:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_PORT, LCD_RW, PIN_OUTPUT);
    3f70:	83 e0       	ldi	r24, 0x03	; 3
    3f72:	65 e0       	ldi	r22, 0x05	; 5
    3f74:	41 e0       	ldi	r20, 0x01	; 1
    3f76:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_PORT, LCD_EN, PIN_OUTPUT);
    3f7a:	83 e0       	ldi	r24, 0x03	; 3
    3f7c:	64 e0       	ldi	r22, 0x04	; 4
    3f7e:	41 e0       	ldi	r20, 0x01	; 1
    3f80:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>

	DIO_WritePin(LCD_PORT, LCD_D7, PIN_LOW);
    3f84:	83 e0       	ldi	r24, 0x03	; 3
    3f86:	63 e0       	ldi	r22, 0x03	; 3
    3f88:	40 e0       	ldi	r20, 0x00	; 0
    3f8a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D6, PIN_LOW);
    3f8e:	83 e0       	ldi	r24, 0x03	; 3
    3f90:	62 e0       	ldi	r22, 0x02	; 2
    3f92:	40 e0       	ldi	r20, 0x00	; 0
    3f94:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D5, PIN_LOW);
    3f98:	83 e0       	ldi	r24, 0x03	; 3
    3f9a:	61 e0       	ldi	r22, 0x01	; 1
    3f9c:	40 e0       	ldi	r20, 0x00	; 0
    3f9e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_D4, PIN_LOW);
    3fa2:	83 e0       	ldi	r24, 0x03	; 3
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	40 e0       	ldi	r20, 0x00	; 0
    3fa8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_RS, PIN_LOW);
    3fac:	83 e0       	ldi	r24, 0x03	; 3
    3fae:	66 e0       	ldi	r22, 0x06	; 6
    3fb0:	40 e0       	ldi	r20, 0x00	; 0
    3fb2:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_RW, PIN_LOW);
    3fb6:	83 e0       	ldi	r24, 0x03	; 3
    3fb8:	65 e0       	ldi	r22, 0x05	; 5
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(LCD_PORT, LCD_EN, PIN_LOW);
    3fc0:	83 e0       	ldi	r24, 0x03	; 3
    3fc2:	64 e0       	ldi	r22, 0x04	; 4
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>

//	TIM_Delay_MS(TIMER0, 40);
	LCD_SendCommand(LCD_Init_CMD_1);
    3fca:	83 e3       	ldi	r24, 0x33	; 51
    3fcc:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
	LCD_SendCommand(LCD_Init_CMD_2);
    3fd0:	82 e3       	ldi	r24, 0x32	; 50
    3fd2:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
	LCD_SendCommand(LCD_FUNCSET_6);
    3fd6:	88 e2       	ldi	r24, 0x28	; 40
    3fd8:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
	LCD_SendCommand(LCD_DISPON_CURSOFF);
    3fdc:	8c e0       	ldi	r24, 0x0C	; 12
    3fde:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
	LCD_SendCommand(LCD_INCREMENTENTRYMODE);
    3fe2:	86 e0       	ldi	r24, 0x06	; 6
    3fe4:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
	LCD_SendCommand(LCD_CLR);
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
//	TIM_Delay_MS(TIMER0, 2);
	LCD_SendCommand(LCD_CURS_Position0);
    3fee:	80 e8       	ldi	r24, 0x80	; 128
    3ff0:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
}
    3ff4:	cf 91       	pop	r28
    3ff6:	df 91       	pop	r29
    3ff8:	08 95       	ret

00003ffa <LCD_SendString>:
void LCD_SendString(uint8_t* String)
{
    3ffa:	df 93       	push	r29
    3ffc:	cf 93       	push	r28
    3ffe:	00 d0       	rcall	.+0      	; 0x4000 <LCD_SendString+0x6>
    4000:	cd b7       	in	r28, 0x3d	; 61
    4002:	de b7       	in	r29, 0x3e	; 62
    4004:	9a 83       	std	Y+2, r25	; 0x02
    4006:	89 83       	std	Y+1, r24	; 0x01
    4008:	0a c0       	rjmp	.+20     	; 0x401e <LCD_SendString+0x24>
	while(*String!='\0')
	{
		LCD_SendCharacter(*String);
    400a:	e9 81       	ldd	r30, Y+1	; 0x01
    400c:	fa 81       	ldd	r31, Y+2	; 0x02
    400e:	80 81       	ld	r24, Z
    4010:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		String++;
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	9a 81       	ldd	r25, Y+2	; 0x02
    4018:	01 96       	adiw	r24, 0x01	; 1
    401a:	9a 83       	std	Y+2, r25	; 0x02
    401c:	89 83       	std	Y+1, r24	; 0x01
//	TIM_Delay_MS(TIMER0, 2);
	LCD_SendCommand(LCD_CURS_Position0);
}
void LCD_SendString(uint8_t* String)
{
	while(*String!='\0')
    401e:	e9 81       	ldd	r30, Y+1	; 0x01
    4020:	fa 81       	ldd	r31, Y+2	; 0x02
    4022:	80 81       	ld	r24, Z
    4024:	88 23       	and	r24, r24
    4026:	89 f7       	brne	.-30     	; 0x400a <LCD_SendString+0x10>
	{
		LCD_SendCharacter(*String);
		String++;
	}
}
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	cf 91       	pop	r28
    402e:	df 91       	pop	r29
    4030:	08 95       	ret

00004032 <LCD_SendNumber>:
void LCD_SendNumber(uint16_t Number)
{
    4032:	df 93       	push	r29
    4034:	cf 93       	push	r28
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62
    403a:	c1 50       	subi	r28, 0x01	; 1
    403c:	d1 40       	sbci	r29, 0x01	; 1
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	fe 01       	movw	r30, r28
    404a:	e0 50       	subi	r30, 0x00	; 0
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	91 83       	std	Z+1, r25	; 0x01
    4050:	80 83       	st	Z, r24
	uint8_t String[255];
	LCD_NumberToString(Number,String);
    4052:	fe 01       	movw	r30, r28
    4054:	e0 50       	subi	r30, 0x00	; 0
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	80 81       	ld	r24, Z
    405a:	91 81       	ldd	r25, Z+1	; 0x01
    405c:	9e 01       	movw	r18, r28
    405e:	2f 5f       	subi	r18, 0xFF	; 255
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	b9 01       	movw	r22, r18
    4064:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_NumberToString>
	LCD_SendString(String);
    4068:	ce 01       	movw	r24, r28
    406a:	01 96       	adiw	r24, 0x01	; 1
    406c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <LCD_SendString>
}
    4070:	cf 5f       	subi	r28, 0xFF	; 255
    4072:	de 4f       	sbci	r29, 0xFE	; 254
    4074:	0f b6       	in	r0, 0x3f	; 63
    4076:	f8 94       	cli
    4078:	de bf       	out	0x3e, r29	; 62
    407a:	0f be       	out	0x3f, r0	; 63
    407c:	cd bf       	out	0x3d, r28	; 61
    407e:	cf 91       	pop	r28
    4080:	df 91       	pop	r29
    4082:	08 95       	ret

00004084 <LCD_NumberToString>:
void LCD_NumberToString(uint16_t Number, uint8_t* String)
{
    4084:	df 93       	push	r29
    4086:	cf 93       	push	r28
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
    408c:	27 97       	sbiw	r28, 0x07	; 7
    408e:	0f b6       	in	r0, 0x3f	; 63
    4090:	f8 94       	cli
    4092:	de bf       	out	0x3e, r29	; 62
    4094:	0f be       	out	0x3f, r0	; 63
    4096:	cd bf       	out	0x3d, r28	; 61
    4098:	9d 83       	std	Y+5, r25	; 0x05
    409a:	8c 83       	std	Y+4, r24	; 0x04
    409c:	7f 83       	std	Y+7, r23	; 0x07
    409e:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t NumberOfDigits = 0;
    40a0:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t* StartOfString = String;
    40a2:	8e 81       	ldd	r24, Y+6	; 0x06
    40a4:	9f 81       	ldd	r25, Y+7	; 0x07
    40a6:	9a 83       	std	Y+2, r25	; 0x02
    40a8:	89 83       	std	Y+1, r24	; 0x01
	if(Number==0)
    40aa:	8c 81       	ldd	r24, Y+4	; 0x04
    40ac:	9d 81       	ldd	r25, Y+5	; 0x05
    40ae:	00 97       	sbiw	r24, 0x00	; 0
    40b0:	e9 f4       	brne	.+58     	; 0x40ec <LCD_NumberToString+0x68>
	{
		NumberOfDigits=1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	8b 83       	std	Y+3, r24	; 0x03
    40b6:	1e c0       	rjmp	.+60     	; 0x40f4 <LCD_NumberToString+0x70>
	}
	else
	{
		while(Number)
		{
			*String=Number%10+48;
    40b8:	8c 81       	ldd	r24, Y+4	; 0x04
    40ba:	9d 81       	ldd	r25, Y+5	; 0x05
    40bc:	2a e0       	ldi	r18, 0x0A	; 10
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	b9 01       	movw	r22, r18
    40c2:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodhi4>
    40c6:	80 5d       	subi	r24, 0xD0	; 208
    40c8:	ee 81       	ldd	r30, Y+6	; 0x06
    40ca:	ff 81       	ldd	r31, Y+7	; 0x07
    40cc:	80 83       	st	Z, r24
			String++;
    40ce:	8e 81       	ldd	r24, Y+6	; 0x06
    40d0:	9f 81       	ldd	r25, Y+7	; 0x07
    40d2:	01 96       	adiw	r24, 0x01	; 1
    40d4:	9f 83       	std	Y+7, r25	; 0x07
    40d6:	8e 83       	std	Y+6, r24	; 0x06
			Number/=10;
    40d8:	8c 81       	ldd	r24, Y+4	; 0x04
    40da:	9d 81       	ldd	r25, Y+5	; 0x05
    40dc:	2a e0       	ldi	r18, 0x0A	; 10
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	b9 01       	movw	r22, r18
    40e2:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodhi4>
    40e6:	cb 01       	movw	r24, r22
    40e8:	9d 83       	std	Y+5, r25	; 0x05
    40ea:	8c 83       	std	Y+4, r24	; 0x04
	{
		NumberOfDigits=1;
	}
	else
	{
		while(Number)
    40ec:	8c 81       	ldd	r24, Y+4	; 0x04
    40ee:	9d 81       	ldd	r25, Y+5	; 0x05
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	11 f7       	brne	.-60     	; 0x40b8 <LCD_NumberToString+0x34>
			*String=Number%10+48;
			String++;
			Number/=10;
		}
	}
	LCD_StringReverse(StartOfString);
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	9a 81       	ldd	r25, Y+2	; 0x02
    40f8:	0e 94 87 20 	call	0x410e	; 0x410e <LCD_StringReverse>
}
    40fc:	27 96       	adiw	r28, 0x07	; 7
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	08 95       	ret

0000410e <LCD_StringReverse>:
void LCD_StringReverse(uint8_t* String)
{
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	27 97       	sbiw	r28, 0x07	; 7
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	9f 83       	std	Y+7, r25	; 0x07
    4124:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t* A = String;
    4126:	8e 81       	ldd	r24, Y+6	; 0x06
    4128:	9f 81       	ldd	r25, Y+7	; 0x07
    412a:	9d 83       	std	Y+5, r25	; 0x05
    412c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t* B = String;
    412e:	8e 81       	ldd	r24, Y+6	; 0x06
    4130:	9f 81       	ldd	r25, Y+7	; 0x07
    4132:	9b 83       	std	Y+3, r25	; 0x03
    4134:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Temp = 0;
    4136:	19 82       	std	Y+1, r1	; 0x01
    4138:	05 c0       	rjmp	.+10     	; 0x4144 <LCD_StringReverse+0x36>
	while(*B != '\0')
	{
		B++;
    413a:	8a 81       	ldd	r24, Y+2	; 0x02
    413c:	9b 81       	ldd	r25, Y+3	; 0x03
    413e:	01 96       	adiw	r24, 0x01	; 1
    4140:	9b 83       	std	Y+3, r25	; 0x03
    4142:	8a 83       	std	Y+2, r24	; 0x02
void LCD_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    4144:	ea 81       	ldd	r30, Y+2	; 0x02
    4146:	fb 81       	ldd	r31, Y+3	; 0x03
    4148:	80 81       	ld	r24, Z
    414a:	88 23       	and	r24, r24
    414c:	b1 f7       	brne	.-20     	; 0x413a <LCD_StringReverse+0x2c>
	{
		B++;
	}
	B--;
    414e:	8a 81       	ldd	r24, Y+2	; 0x02
    4150:	9b 81       	ldd	r25, Y+3	; 0x03
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	9b 83       	std	Y+3, r25	; 0x03
    4156:	8a 83       	std	Y+2, r24	; 0x02
    4158:	18 c0       	rjmp	.+48     	; 0x418a <LCD_StringReverse+0x7c>
	while(A<B)
	{
		//swap
		Temp=*A;
    415a:	ec 81       	ldd	r30, Y+4	; 0x04
    415c:	fd 81       	ldd	r31, Y+5	; 0x05
    415e:	80 81       	ld	r24, Z
    4160:	89 83       	std	Y+1, r24	; 0x01
		*A=*B;
    4162:	ea 81       	ldd	r30, Y+2	; 0x02
    4164:	fb 81       	ldd	r31, Y+3	; 0x03
    4166:	80 81       	ld	r24, Z
    4168:	ec 81       	ldd	r30, Y+4	; 0x04
    416a:	fd 81       	ldd	r31, Y+5	; 0x05
    416c:	80 83       	st	Z, r24
		*B=Temp;
    416e:	ea 81       	ldd	r30, Y+2	; 0x02
    4170:	fb 81       	ldd	r31, Y+3	; 0x03
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	80 83       	st	Z, r24
		A++;B--;
    4176:	8c 81       	ldd	r24, Y+4	; 0x04
    4178:	9d 81       	ldd	r25, Y+5	; 0x05
    417a:	01 96       	adiw	r24, 0x01	; 1
    417c:	9d 83       	std	Y+5, r25	; 0x05
    417e:	8c 83       	std	Y+4, r24	; 0x04
    4180:	8a 81       	ldd	r24, Y+2	; 0x02
    4182:	9b 81       	ldd	r25, Y+3	; 0x03
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	9b 83       	std	Y+3, r25	; 0x03
    4188:	8a 83       	std	Y+2, r24	; 0x02
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    418a:	2c 81       	ldd	r18, Y+4	; 0x04
    418c:	3d 81       	ldd	r19, Y+5	; 0x05
    418e:	8a 81       	ldd	r24, Y+2	; 0x02
    4190:	9b 81       	ldd	r25, Y+3	; 0x03
    4192:	28 17       	cp	r18, r24
    4194:	39 07       	cpc	r19, r25
    4196:	08 f3       	brcs	.-62     	; 0x415a <LCD_StringReverse+0x4c>
		*A=*B;
		*B=Temp;
		A++;B--;
	}

}
    4198:	27 96       	adiw	r28, 0x07	; 7
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	f8 94       	cli
    419e:	de bf       	out	0x3e, r29	; 62
    41a0:	0f be       	out	0x3f, r0	; 63
    41a2:	cd bf       	out	0x3d, r28	; 61
    41a4:	cf 91       	pop	r28
    41a6:	df 91       	pop	r29
    41a8:	08 95       	ret

000041aa <LCD_ReadBusyFlag>:
uint8_t LCD_ReadBusyFlag()
{
    41aa:	df 93       	push	r29
    41ac:	cf 93       	push	r28
    41ae:	00 d0       	rcall	.+0      	; 0x41b0 <LCD_ReadBusyFlag+0x6>
    41b0:	00 d0       	rcall	.+0      	; 0x41b2 <LCD_ReadBusyFlag+0x8>
    41b2:	0f 92       	push	r0
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
uint8_t ErrRetVal= OperationStarted;
    41b8:	8f ef       	ldi	r24, 0xFF	; 255
    41ba:	8a 83       	std	Y+2, r24	; 0x02
uint8_t D7Reading=0;
    41bc:	1b 82       	std	Y+3, r1	; 0x03
uint8_t State = OperationStarted;
    41be:	8f ef       	ldi	r24, 0xFF	; 255
    41c0:	89 83       	std	Y+1, r24	; 0x01
switch(State)
    41c2:	89 81       	ldd	r24, Y+1	; 0x01
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	3d 83       	std	Y+5, r19	; 0x05
    41ca:	2c 83       	std	Y+4, r18	; 0x04
    41cc:	8c 81       	ldd	r24, Y+4	; 0x04
    41ce:	9d 81       	ldd	r25, Y+5	; 0x05
    41d0:	82 30       	cpi	r24, 0x02	; 2
    41d2:	91 05       	cpc	r25, r1
    41d4:	b9 f0       	breq	.+46     	; 0x4204 <LCD_ReadBusyFlag+0x5a>
    41d6:	2c 81       	ldd	r18, Y+4	; 0x04
    41d8:	3d 81       	ldd	r19, Y+5	; 0x05
    41da:	2f 3f       	cpi	r18, 0xFF	; 255
    41dc:	31 05       	cpc	r19, r1
    41de:	41 f5       	brne	.+80     	; 0x4230 <LCD_ReadBusyFlag+0x86>
 {
	case OperationStarted:
		DIO_SetPinDirection(LCD_PORT, LCD_D7, PIN_INPUT);
    41e0:	83 e0       	ldi	r24, 0x03	; 3
    41e2:	63 e0       	ldi	r22, 0x03	; 3
    41e4:	40 e0       	ldi	r20, 0x00	; 0
    41e6:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
		DIO_WritePin(LCD_PORT, LCD_RS, PIN_LOW);
    41ea:	83 e0       	ldi	r24, 0x03	; 3
    41ec:	66 e0       	ldi	r22, 0x06	; 6
    41ee:	40 e0       	ldi	r20, 0x00	; 0
    41f0:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
		DIO_WritePin(LCD_PORT, LCD_RW, PIN_HIGH);
    41f4:	83 e0       	ldi	r24, 0x03	; 3
    41f6:	65 e0       	ldi	r22, 0x05	; 5
    41f8:	41 e0       	ldi	r20, 0x01	; 1
    41fa:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
		State = OperationRunning;
    41fe:	82 e0       	ldi	r24, 0x02	; 2
    4200:	89 83       	std	Y+1, r24	; 0x01
    4202:	16 c0       	rjmp	.+44     	; 0x4230 <LCD_ReadBusyFlag+0x86>
		break;
	case OperationRunning:
		DIO_ReadPin(LCD_PORT, LCD_D7, &D7Reading);
    4204:	9e 01       	movw	r18, r28
    4206:	2d 5f       	subi	r18, 0xFD	; 253
    4208:	3f 4f       	sbci	r19, 0xFF	; 255
    420a:	83 e0       	ldi	r24, 0x03	; 3
    420c:	63 e0       	ldi	r22, 0x03	; 3
    420e:	a9 01       	movw	r20, r18
    4210:	0e 94 10 19 	call	0x3220	; 0x3220 <DIO_ReadPin>
		if (D7Reading) {
    4214:	8b 81       	ldd	r24, Y+3	; 0x03
    4216:	88 23       	and	r24, r24
    4218:	19 f0       	breq	.+6      	; 0x4220 <LCD_ReadBusyFlag+0x76>
			ErrRetVal = OperationFail;
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	8a 83       	std	Y+2, r24	; 0x02
    421e:	08 c0       	rjmp	.+16     	; 0x4230 <LCD_ReadBusyFlag+0x86>
		} else {
			State = OperationStarted;
    4220:	8f ef       	ldi	r24, 0xFF	; 255
    4222:	89 83       	std	Y+1, r24	; 0x01
			ErrRetVal = OperationSuccess;
    4224:	1a 82       	std	Y+2, r1	; 0x02
			DIO_SetPinDirection(LCD_PORT, LCD_D7, PIN_OUTPUT);
    4226:	83 e0       	ldi	r24, 0x03	; 3
    4228:	63 e0       	ldi	r22, 0x03	; 3
    422a:	41 e0       	ldi	r20, 0x01	; 1
    422c:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
		}
		break;
	}
	return ErrRetVal;
    4230:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	0f 90       	pop	r0
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <KPAD_vidInit>:
						{'4', '5', '6', 'X'},
						{'1', '2', '3', '-'},
						{'O', '0', '=', '+'}
											};
void KPAD_vidInit(void)
{
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(KPAD_ROW_PORT,KPAD_ROW0,PIN_INPUT);
    424a:	82 e0       	ldi	r24, 0x02	; 2
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	40 e0       	ldi	r20, 0x00	; 0
    4250:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPAD_ROW_PORT,KPAD_ROW1,PIN_INPUT);
    4254:	82 e0       	ldi	r24, 0x02	; 2
    4256:	61 e0       	ldi	r22, 0x01	; 1
    4258:	40 e0       	ldi	r20, 0x00	; 0
    425a:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPAD_ROW_PORT,KPAD_ROW2,PIN_INPUT);
    425e:	82 e0       	ldi	r24, 0x02	; 2
    4260:	62 e0       	ldi	r22, 0x02	; 2
    4262:	40 e0       	ldi	r20, 0x00	; 0
    4264:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPAD_ROW_PORT,KPAD_ROW3,PIN_INPUT);
    4268:	82 e0       	ldi	r24, 0x02	; 2
    426a:	63 e0       	ldi	r22, 0x03	; 3
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_EnablePinPullup(KPAD_ROW_PORT,KPAD_ROW0);
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	60 e0       	ldi	r22, 0x00	; 0
    4276:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <DIO_EnablePinPullup>
	DIO_EnablePinPullup(KPAD_ROW_PORT,KPAD_ROW1);
    427a:	82 e0       	ldi	r24, 0x02	; 2
    427c:	61 e0       	ldi	r22, 0x01	; 1
    427e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <DIO_EnablePinPullup>
	DIO_EnablePinPullup(KPAD_ROW_PORT,KPAD_ROW2);
    4282:	82 e0       	ldi	r24, 0x02	; 2
    4284:	62 e0       	ldi	r22, 0x02	; 2
    4286:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <DIO_EnablePinPullup>
	DIO_EnablePinPullup(KPAD_ROW_PORT,KPAD_ROW3);
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	63 e0       	ldi	r22, 0x03	; 3
    428e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <DIO_EnablePinPullup>

	DIO_SetPinDirection(KPAD_COLUMN_PORT,KPAD_COLUMN0,PIN_OUTPUT);
    4292:	82 e0       	ldi	r24, 0x02	; 2
    4294:	64 e0       	ldi	r22, 0x04	; 4
    4296:	41 e0       	ldi	r20, 0x01	; 1
    4298:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPAD_COLUMN_PORT,KPAD_COLUMN1,PIN_OUTPUT);
    429c:	82 e0       	ldi	r24, 0x02	; 2
    429e:	65 e0       	ldi	r22, 0x05	; 5
    42a0:	41 e0       	ldi	r20, 0x01	; 1
    42a2:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPAD_COLUMN_PORT,KPAD_COLUMN2,PIN_OUTPUT);
    42a6:	82 e0       	ldi	r24, 0x02	; 2
    42a8:	66 e0       	ldi	r22, 0x06	; 6
    42aa:	41 e0       	ldi	r20, 0x01	; 1
    42ac:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPAD_COLUMN_PORT,KPAD_COLUMN3,PIN_OUTPUT);
    42b0:	82 e0       	ldi	r24, 0x02	; 2
    42b2:	67 e0       	ldi	r22, 0x07	; 7
    42b4:	41 e0       	ldi	r20, 0x01	; 1
    42b6:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	//all initialized at high state
	DIO_WritePin(KPAD_COLUMN_PORT,KPAD_COLUMN0,PIN_HIGH);
    42ba:	82 e0       	ldi	r24, 0x02	; 2
    42bc:	64 e0       	ldi	r22, 0x04	; 4
    42be:	41 e0       	ldi	r20, 0x01	; 1
    42c0:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(KPAD_COLUMN_PORT,KPAD_COLUMN1,PIN_HIGH);
    42c4:	82 e0       	ldi	r24, 0x02	; 2
    42c6:	65 e0       	ldi	r22, 0x05	; 5
    42c8:	41 e0       	ldi	r20, 0x01	; 1
    42ca:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(KPAD_COLUMN_PORT,KPAD_COLUMN2,PIN_HIGH);
    42ce:	82 e0       	ldi	r24, 0x02	; 2
    42d0:	66 e0       	ldi	r22, 0x06	; 6
    42d2:	41 e0       	ldi	r20, 0x01	; 1
    42d4:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	DIO_WritePin(KPAD_COLUMN_PORT,KPAD_COLUMN3,PIN_HIGH);
    42d8:	82 e0       	ldi	r24, 0x02	; 2
    42da:	67 e0       	ldi	r22, 0x07	; 7
    42dc:	41 e0       	ldi	r20, 0x01	; 1
    42de:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
}
    42e2:	cf 91       	pop	r28
    42e4:	df 91       	pop	r29
    42e6:	08 95       	ret

000042e8 <KPAD_GetKey>:



uint8_t KPAD_GetKey(void)
{
    42e8:	df 93       	push	r29
    42ea:	cf 93       	push	r28
    42ec:	cd b7       	in	r28, 0x3d	; 61
    42ee:	de b7       	in	r29, 0x3e	; 62
    42f0:	2c 97       	sbiw	r28, 0x0c	; 12
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	f8 94       	cli
    42f6:	de bf       	out	0x3e, r29	; 62
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	cd bf       	out	0x3d, r28	; 61
	uint8_t index;
	uint8_t KPAD_auint8_tROW[4]={KPAD_ROW0, KPAD_ROW1, KPAD_ROW2, KPAD_ROW3};
    42fc:	1c 82       	std	Y+4, r1	; 0x04
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	8d 83       	std	Y+5, r24	; 0x05
    4302:	82 e0       	ldi	r24, 0x02	; 2
    4304:	8e 83       	std	Y+6, r24	; 0x06
    4306:	83 e0       	ldi	r24, 0x03	; 3
    4308:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t KPAD_auint8_tCOL[4]={KPAD_COLUMN0, KPAD_COLUMN1, KPAD_COLUMN2, KPAD_COLUMN3};
    430a:	84 e0       	ldi	r24, 0x04	; 4
    430c:	88 87       	std	Y+8, r24	; 0x08
    430e:	85 e0       	ldi	r24, 0x05	; 5
    4310:	89 87       	std	Y+9, r24	; 0x09
    4312:	86 e0       	ldi	r24, 0x06	; 6
    4314:	8a 87       	std	Y+10, r24	; 0x0a
    4316:	87 e0       	ldi	r24, 0x07	; 7
    4318:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t cloop=0;//Columns iterator
    431a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t rloop=0;//Rows iterator
    431c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Accumlator=255;
    431e:	8f ef       	ldi	r24, 0xFF	; 255
    4320:	8c 87       	std	Y+12, r24	; 0x0c
	for(cloop=0; cloop < 4; cloop++)
    4322:	1a 82       	std	Y+2, r1	; 0x02
    4324:	80 c0       	rjmp	.+256    	; 0x4426 <KPAD_GetKey+0x13e>
	{
		//set only one of the columns with low
		DIO_WritePin(KPAD_COLUMN_PORT, KPAD_auint8_tCOL[cloop],PIN_LOW);
    4326:	8a 81       	ldd	r24, Y+2	; 0x02
    4328:	28 2f       	mov	r18, r24
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	ce 01       	movw	r24, r28
    432e:	08 96       	adiw	r24, 0x08	; 8
    4330:	fc 01       	movw	r30, r24
    4332:	e2 0f       	add	r30, r18
    4334:	f3 1f       	adc	r31, r19
    4336:	90 81       	ld	r25, Z
    4338:	82 e0       	ldi	r24, 0x02	; 2
    433a:	69 2f       	mov	r22, r25
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
		//check which row pin is low
		for(rloop=0; rloop < 4; rloop++)
    4342:	19 82       	std	Y+1, r1	; 0x01
    4344:	5b c0       	rjmp	.+182    	; 0x43fc <KPAD_GetKey+0x114>
		{
			DIO_ReadPin(KPAD_ROW_PORT,KPAD_auint8_tROW[rloop],&Accumlator);
    4346:	89 81       	ldd	r24, Y+1	; 0x01
    4348:	28 2f       	mov	r18, r24
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	ce 01       	movw	r24, r28
    434e:	04 96       	adiw	r24, 0x04	; 4
    4350:	fc 01       	movw	r30, r24
    4352:	e2 0f       	add	r30, r18
    4354:	f3 1f       	adc	r31, r19
    4356:	90 81       	ld	r25, Z
    4358:	9e 01       	movw	r18, r28
    435a:	24 5f       	subi	r18, 0xF4	; 244
    435c:	3f 4f       	sbci	r19, 0xFF	; 255
    435e:	82 e0       	ldi	r24, 0x02	; 2
    4360:	69 2f       	mov	r22, r25
    4362:	a9 01       	movw	r20, r18
    4364:	0e 94 10 19 	call	0x3220	; 0x3220 <DIO_ReadPin>
			if(Accumlator==PIN_LOW)
    4368:	8c 85       	ldd	r24, Y+12	; 0x0c
    436a:	88 23       	and	r24, r24
    436c:	09 f0       	breq	.+2      	; 0x4370 <KPAD_GetKey+0x88>
    436e:	41 c0       	rjmp	.+130    	; 0x43f2 <KPAD_GetKey+0x10a>
			{
				//delay for avoiding debouncing problem
				TIM_Delay_MS(TIMER0,10);
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	4a e0       	ldi	r20, 0x0A	; 10
    4374:	50 e0       	ldi	r21, 0x00	; 0
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	70 e0       	ldi	r23, 0x00	; 0
    437a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <TIM_Delay_MS>
    437e:	11 c0       	rjmp	.+34     	; 0x43a2 <KPAD_GetKey+0xba>
				//block the code while the button is pressed
				while(Accumlator==PIN_LOW)
				{
				DIO_ReadPin(KPAD_ROW_PORT,KPAD_auint8_tROW[rloop],&Accumlator);
    4380:	89 81       	ldd	r24, Y+1	; 0x01
    4382:	28 2f       	mov	r18, r24
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	ce 01       	movw	r24, r28
    4388:	04 96       	adiw	r24, 0x04	; 4
    438a:	fc 01       	movw	r30, r24
    438c:	e2 0f       	add	r30, r18
    438e:	f3 1f       	adc	r31, r19
    4390:	90 81       	ld	r25, Z
    4392:	9e 01       	movw	r18, r28
    4394:	24 5f       	subi	r18, 0xF4	; 244
    4396:	3f 4f       	sbci	r19, 0xFF	; 255
    4398:	82 e0       	ldi	r24, 0x02	; 2
    439a:	69 2f       	mov	r22, r25
    439c:	a9 01       	movw	r20, r18
    439e:	0e 94 10 19 	call	0x3220	; 0x3220 <DIO_ReadPin>
			if(Accumlator==PIN_LOW)
			{
				//delay for avoiding debouncing problem
				TIM_Delay_MS(TIMER0,10);
				//block the code while the button is pressed
				while(Accumlator==PIN_LOW)
    43a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    43a4:	88 23       	and	r24, r24
    43a6:	61 f3       	breq	.-40     	; 0x4380 <KPAD_GetKey+0x98>
				{
				DIO_ReadPin(KPAD_ROW_PORT,KPAD_auint8_tROW[rloop],&Accumlator);
				}

				DIO_WritePin(KPAD_COLUMN_PORT, KPAD_auint8_tCOL[cloop],PIN_HIGH);
    43a8:	8a 81       	ldd	r24, Y+2	; 0x02
    43aa:	28 2f       	mov	r18, r24
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	ce 01       	movw	r24, r28
    43b0:	08 96       	adiw	r24, 0x08	; 8
    43b2:	fc 01       	movw	r30, r24
    43b4:	e2 0f       	add	r30, r18
    43b6:	f3 1f       	adc	r31, r19
    43b8:	90 81       	ld	r25, Z
    43ba:	82 e0       	ldi	r24, 0x02	; 2
    43bc:	69 2f       	mov	r22, r25
    43be:	41 e0       	ldi	r20, 0x01	; 1
    43c0:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
//				index=(rloop*4)+(cloop);
				index = KeypadArr[rloop][cloop];
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	48 2f       	mov	r20, r24
    43c8:	50 e0       	ldi	r21, 0x00	; 0
    43ca:	8a 81       	ldd	r24, Y+2	; 0x02
    43cc:	28 2f       	mov	r18, r24
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	ca 01       	movw	r24, r20
    43d2:	88 0f       	add	r24, r24
    43d4:	99 1f       	adc	r25, r25
    43d6:	88 0f       	add	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	82 0f       	add	r24, r18
    43dc:	93 1f       	adc	r25, r19
    43de:	fc 01       	movw	r30, r24
    43e0:	e2 58       	subi	r30, 0x82	; 130
    43e2:	fe 4f       	sbci	r31, 0xFE	; 254
    43e4:	80 81       	ld	r24, Z
    43e6:	8b 83       	std	Y+3, r24	; 0x03
				rloop=4;
    43e8:	84 e0       	ldi	r24, 0x04	; 4
    43ea:	89 83       	std	Y+1, r24	; 0x01
				cloop=4;
    43ec:	84 e0       	ldi	r24, 0x04	; 4
    43ee:	8a 83       	std	Y+2, r24	; 0x02
    43f0:	02 c0       	rjmp	.+4      	; 0x43f6 <KPAD_GetKey+0x10e>
			}
			else
			{
				index=KPAD_NO_KPRESSED;
    43f2:	8f ef       	ldi	r24, 0xFF	; 255
    43f4:	8b 83       	std	Y+3, r24	; 0x03
	for(cloop=0; cloop < 4; cloop++)
	{
		//set only one of the columns with low
		DIO_WritePin(KPAD_COLUMN_PORT, KPAD_auint8_tCOL[cloop],PIN_LOW);
		//check which row pin is low
		for(rloop=0; rloop < 4; rloop++)
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	8f 5f       	subi	r24, 0xFF	; 255
    43fa:	89 83       	std	Y+1, r24	; 0x01
    43fc:	89 81       	ldd	r24, Y+1	; 0x01
    43fe:	84 30       	cpi	r24, 0x04	; 4
    4400:	08 f4       	brcc	.+2      	; 0x4404 <KPAD_GetKey+0x11c>
    4402:	a1 cf       	rjmp	.-190    	; 0x4346 <KPAD_GetKey+0x5e>
			else
			{
				index=KPAD_NO_KPRESSED;
			}
		}
		DIO_WritePin(KPAD_COLUMN_PORT, KPAD_auint8_tCOL[cloop],PIN_HIGH);
    4404:	8a 81       	ldd	r24, Y+2	; 0x02
    4406:	28 2f       	mov	r18, r24
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	ce 01       	movw	r24, r28
    440c:	08 96       	adiw	r24, 0x08	; 8
    440e:	fc 01       	movw	r30, r24
    4410:	e2 0f       	add	r30, r18
    4412:	f3 1f       	adc	r31, r19
    4414:	90 81       	ld	r25, Z
    4416:	82 e0       	ldi	r24, 0x02	; 2
    4418:	69 2f       	mov	r22, r25
    441a:	41 e0       	ldi	r20, 0x01	; 1
    441c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
	uint8_t KPAD_auint8_tROW[4]={KPAD_ROW0, KPAD_ROW1, KPAD_ROW2, KPAD_ROW3};
	uint8_t KPAD_auint8_tCOL[4]={KPAD_COLUMN0, KPAD_COLUMN1, KPAD_COLUMN2, KPAD_COLUMN3};
	uint8_t cloop=0;//Columns iterator
	uint8_t rloop=0;//Rows iterator
	uint8_t Accumlator=255;
	for(cloop=0; cloop < 4; cloop++)
    4420:	8a 81       	ldd	r24, Y+2	; 0x02
    4422:	8f 5f       	subi	r24, 0xFF	; 255
    4424:	8a 83       	std	Y+2, r24	; 0x02
    4426:	8a 81       	ldd	r24, Y+2	; 0x02
    4428:	84 30       	cpi	r24, 0x04	; 4
    442a:	08 f4       	brcc	.+2      	; 0x442e <KPAD_GetKey+0x146>
    442c:	7c cf       	rjmp	.-264    	; 0x4326 <KPAD_GetKey+0x3e>
				index=KPAD_NO_KPRESSED;
			}
		}
		DIO_WritePin(KPAD_COLUMN_PORT, KPAD_auint8_tCOL[cloop],PIN_HIGH);
	}
	return index;
    442e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4430:	2c 96       	adiw	r28, 0x0c	; 12
    4432:	0f b6       	in	r0, 0x3f	; 63
    4434:	f8 94       	cli
    4436:	de bf       	out	0x3e, r29	; 62
    4438:	0f be       	out	0x3f, r0	; 63
    443a:	cd bf       	out	0x3d, r28	; 61
    443c:	cf 91       	pop	r28
    443e:	df 91       	pop	r29
    4440:	08 95       	ret

00004442 <APP_Init>:
uint8_t Setvalue[4] = {'\0','\0','\0','\0'};
uint8_t* ptr = Setvalue;
uint8_t iterator = 0;

void APP_Init()
{
    4442:	df 93       	push	r29
    4444:	cf 93       	push	r28
    4446:	cd b7       	in	r28, 0x3d	; 61
    4448:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    444a:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <LCD_Init>
	KPAD_vidInit();
    444e:	0e 94 21 21 	call	0x4242	; 0x4242 <KPAD_vidInit>
	PSHBTTN_Init(PORTA, PIN1, PULLED_UP);
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	61 e0       	ldi	r22, 0x01	; 1
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <PSHBTTN_Init>
	DIO_SetPinDirection(PORTD, PIN2, PIN_OUTPUT);//motor initialization
    445c:	84 e0       	ldi	r24, 0x04	; 4
    445e:	62 e0       	ldi	r22, 0x02	; 2
    4460:	41 e0       	ldi	r20, 0x01	; 1
    4462:	0e 94 b0 14 	call	0x2960	; 0x2960 <DIO_SetPinDirection>
	ADC_Init(ADC_Channel_1);
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	0e 94 8a 1a 	call	0x3514	; 0x3514 <ADC_Init>
}
    446c:	cf 91       	pop	r28
    446e:	df 91       	pop	r29
    4470:	08 95       	ret

00004472 <APP_Start>:
void APP_Start()
{
    4472:	df 93       	push	r29
    4474:	cf 93       	push	r28
    4476:	cd b7       	in	r28, 0x3d	; 61
    4478:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(0xC0);
    447a:	80 ec       	ldi	r24, 0xC0	; 192
    447c:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
	LCD_SendString((uint8_t*)"SetTemp.: ");
    4480:	80 e6       	ldi	r24, 0x60	; 96
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <LCD_SendString>
	SetTempPSHBTTN = PSHBTTN_Status(PORTA, PIN1);
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	61 e0       	ldi	r22, 0x01	; 1
    448c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <PSHBTTN_Status>
    4490:	80 93 8e 01 	sts	0x018E, r24
	if(!SetTempPSHBTTN)
    4494:	80 91 8e 01 	lds	r24, 0x018E
    4498:	88 23       	and	r24, r24
    449a:	09 f0       	breq	.+2      	; 0x449e <APP_Start+0x2c>
    449c:	5a c0       	rjmp	.+180    	; 0x4552 <APP_Start+0xe0>
	{
		//get keypad pressed keys
		LCD_SendCommand(0xCB);
    449e:	8b ec       	ldi	r24, 0xCB	; 203
    44a0:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
		LCD_SendCharacter(' ');
    44a4:	80 e2       	ldi	r24, 0x20	; 32
    44a6:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		LCD_SendCharacter(' ');
    44aa:	80 e2       	ldi	r24, 0x20	; 32
    44ac:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		LCD_SendCharacter(' ');
    44b0:	80 e2       	ldi	r24, 0x20	; 32
    44b2:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		LCD_SendCharacter(' ');
    44b6:	80 e2       	ldi	r24, 0x20	; 32
    44b8:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		LCD_SendCommand(0xCB);
    44bc:	8b ec       	ldi	r24, 0xCB	; 203
    44be:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
		do
		{
			PressedKpadKey = KPAD_GetKey();
    44c2:	0e 94 74 21 	call	0x42e8	; 0x42e8 <KPAD_GetKey>
    44c6:	80 93 8f 01 	sts	0x018F, r24
			if(PressedKpadKey!=KPAD_NO_KPRESSED)
    44ca:	80 91 8f 01 	lds	r24, 0x018F
    44ce:	8f 3f       	cpi	r24, 0xFF	; 255
    44d0:	01 f1       	breq	.+64     	; 0x4512 <APP_Start+0xa0>
			{
				//assign the number to the Array
				if(PressedKpadKey!='=')
    44d2:	80 91 8f 01 	lds	r24, 0x018F
    44d6:	8d 33       	cpi	r24, 0x3D	; 61
    44d8:	e1 f0       	breq	.+56     	; 0x4512 <APP_Start+0xa0>
				{
					*ptr = PressedKpadKey;
    44da:	e0 91 90 01 	lds	r30, 0x0190
    44de:	f0 91 91 01 	lds	r31, 0x0191
    44e2:	80 91 8f 01 	lds	r24, 0x018F
    44e6:	80 83       	st	Z, r24
					LCD_SendCharacter(*ptr);
    44e8:	e0 91 90 01 	lds	r30, 0x0190
    44ec:	f0 91 91 01 	lds	r31, 0x0191
    44f0:	80 81       	ld	r24, Z
    44f2:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
					ptr++;
    44f6:	80 91 90 01 	lds	r24, 0x0190
    44fa:	90 91 91 01 	lds	r25, 0x0191
    44fe:	01 96       	adiw	r24, 0x01	; 1
    4500:	90 93 91 01 	sts	0x0191, r25
    4504:	80 93 90 01 	sts	0x0190, r24
					iterator++;
    4508:	80 91 ac 01 	lds	r24, 0x01AC
    450c:	8f 5f       	subi	r24, 0xFF	; 255
    450e:	80 93 ac 01 	sts	0x01AC, r24
				}
			}
		}
		while(PressedKpadKey != '=' && iterator<3);
    4512:	80 91 8f 01 	lds	r24, 0x018F
    4516:	8d 33       	cpi	r24, 0x3D	; 61
    4518:	21 f0       	breq	.+8      	; 0x4522 <APP_Start+0xb0>
    451a:	80 91 ac 01 	lds	r24, 0x01AC
    451e:	83 30       	cpi	r24, 0x03	; 3
    4520:	80 f2       	brcs	.-96     	; 0x44c2 <APP_Start+0x50>
		//change it to number
		ptr = Setvalue;
    4522:	88 ea       	ldi	r24, 0xA8	; 168
    4524:	91 e0       	ldi	r25, 0x01	; 1
    4526:	90 93 91 01 	sts	0x0191, r25
    452a:	80 93 90 01 	sts	0x0190, r24
		iterator = 0;
    452e:	10 92 ac 01 	sts	0x01AC, r1
		STR_String2Number(Setvalue, (uint16_t*)&SettedTemp);
    4532:	22 ea       	ldi	r18, 0xA2	; 162
    4534:	31 e0       	ldi	r19, 0x01	; 1
    4536:	88 ea       	ldi	r24, 0xA8	; 168
    4538:	91 e0       	ldi	r25, 0x01	; 1
    453a:	b9 01       	movw	r22, r18
    453c:	0e 94 ad 1c 	call	0x395a	; 0x395a <STR_String2Number>
		Setvalue[0] = '\0';
    4540:	10 92 a8 01 	sts	0x01A8, r1
		Setvalue[1] = '\0';
    4544:	10 92 a9 01 	sts	0x01A9, r1
		Setvalue[2] = '\0';
    4548:	10 92 aa 01 	sts	0x01AA, r1
		Setvalue[3] = '\0';
    454c:	10 92 ab 01 	sts	0x01AB, r1
    4550:	70 c0       	rjmp	.+224    	; 0x4632 <APP_Start+0x1c0>

	}
	else
	{
		LCD_SendCommand(0x80);
    4552:	80 e8       	ldi	r24, 0x80	; 128
    4554:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
		LCD_SendString((uint8_t*)"Temp. is: ");
    4558:	8b e6       	ldi	r24, 0x6B	; 107
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <LCD_SendString>
		//start conversion
		ADC_StartConversion(ADC_Channel_1);
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	0e 94 b3 1a 	call	0x3566	; 0x3566 <ADC_StartConversion>
		//get the reading
		while(ADC_GetConversionResult(&reading)!=OperationSuccess);
    4566:	84 ea       	ldi	r24, 0xA4	; 164
    4568:	91 e0       	ldi	r25, 0x01	; 1
    456a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <ADC_GetConversionResult>
    456e:	88 23       	and	r24, r24
    4570:	d1 f7       	brne	.-12     	; 0x4566 <APP_Start+0xf4>
		//convert reading to the actual temperature
			//get analog read according to Vref and divide it by 10
		AnalogReading = (reading/1024.0)*5000;
    4572:	80 91 a4 01 	lds	r24, 0x01A4
    4576:	90 91 a5 01 	lds	r25, 0x01A5
    457a:	cc 01       	movw	r24, r24
    457c:	a0 e0       	ldi	r26, 0x00	; 0
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	bc 01       	movw	r22, r24
    4582:	cd 01       	movw	r24, r26
    4584:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	bc 01       	movw	r22, r24
    458e:	cd 01       	movw	r24, r26
    4590:	20 e0       	ldi	r18, 0x00	; 0
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	40 e8       	ldi	r20, 0x80	; 128
    4596:	54 e4       	ldi	r21, 0x44	; 68
    4598:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	bc 01       	movw	r22, r24
    45a2:	cd 01       	movw	r24, r26
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e4       	ldi	r19, 0x40	; 64
    45a8:	4c e9       	ldi	r20, 0x9C	; 156
    45aa:	55 e4       	ldi	r21, 0x45	; 69
    45ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	90 93 a7 01 	sts	0x01A7, r25
    45c4:	80 93 a6 01 	sts	0x01A6, r24
		ActualTemp = AnalogReading/10;
    45c8:	80 91 a6 01 	lds	r24, 0x01A6
    45cc:	90 91 a7 01 	lds	r25, 0x01A7
    45d0:	2a e0       	ldi	r18, 0x0A	; 10
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	b9 01       	movw	r22, r18
    45d6:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodhi4>
    45da:	cb 01       	movw	r24, r22
    45dc:	80 93 a3 01 	sts	0x01A3, r24
		//update part of LCD concerned with Actual Temperature first line
		LCD_SendCommand(0x8B);
    45e0:	8b e8       	ldi	r24, 0x8B	; 139
    45e2:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
		LCD_SendCharacter(' ');
    45e6:	80 e2       	ldi	r24, 0x20	; 32
    45e8:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		LCD_SendCharacter(' ');
    45ec:	80 e2       	ldi	r24, 0x20	; 32
    45ee:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		LCD_SendCharacter(' ');
    45f2:	80 e2       	ldi	r24, 0x20	; 32
    45f4:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		LCD_SendCharacter(' ');
    45f8:	80 e2       	ldi	r24, 0x20	; 32
    45fa:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <LCD_SendCharacter>
		LCD_SendCommand(0x8B);
    45fe:	8b e8       	ldi	r24, 0x8B	; 139
    4600:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <LCD_SendCommand>
		LCD_SendNumber(ActualTemp);
    4604:	80 91 a3 01 	lds	r24, 0x01A3
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	0e 94 19 20 	call	0x4032	; 0x4032 <LCD_SendNumber>
		//compare actual reading with settedTemp
		//decide to run the motor or not
		if(ActualTemp >= SettedTemp)
    4610:	90 91 a3 01 	lds	r25, 0x01A3
    4614:	80 91 a2 01 	lds	r24, 0x01A2
    4618:	98 17       	cp	r25, r24
    461a:	30 f0       	brcs	.+12     	; 0x4628 <APP_Start+0x1b6>
		{
			//run the motor
			DIO_WritePin(PORTD,PIN2,PIN_HIGH);
    461c:	84 e0       	ldi	r24, 0x04	; 4
    461e:	62 e0       	ldi	r22, 0x02	; 2
    4620:	41 e0       	ldi	r20, 0x01	; 1
    4622:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
    4626:	05 c0       	rjmp	.+10     	; 0x4632 <APP_Start+0x1c0>
		}
		else
		{
			//stop the motor
			DIO_WritePin(PORTD,PIN2,PIN_LOW);
    4628:	84 e0       	ldi	r24, 0x04	; 4
    462a:	62 e0       	ldi	r22, 0x02	; 2
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_WritePin>
		}

	}
}
    4632:	cf 91       	pop	r28
    4634:	df 91       	pop	r29
    4636:	08 95       	ret

00004638 <main>:
#include "HAL/PushButton/PushButton.h"
#include "HAL/LCD/LCD.h"
#include "HAL/KEYPAD/KEYPAD.h"
#include "APP/APP.h"
int main()
{
    4638:	df 93       	push	r29
    463a:	cf 93       	push	r28
    463c:	cd b7       	in	r28, 0x3d	; 61
    463e:	de b7       	in	r29, 0x3e	; 62
	APP_Init();
    4640:	0e 94 21 22 	call	0x4442	; 0x4442 <APP_Init>
//	uint8_t Setvalue[4] = {'\0','\0','\0','\0'};
//	uint8_t* ptr = Setvalue;
//	uint8_t iterator = 0;
	while (1)
	{
		APP_Start();
    4644:	0e 94 39 22 	call	0x4472	; 0x4472 <APP_Start>
    4648:	fd cf       	rjmp	.-6      	; 0x4644 <main+0xc>

0000464a <__mulsi3>:
    464a:	62 9f       	mul	r22, r18
    464c:	d0 01       	movw	r26, r0
    464e:	73 9f       	mul	r23, r19
    4650:	f0 01       	movw	r30, r0
    4652:	82 9f       	mul	r24, r18
    4654:	e0 0d       	add	r30, r0
    4656:	f1 1d       	adc	r31, r1
    4658:	64 9f       	mul	r22, r20
    465a:	e0 0d       	add	r30, r0
    465c:	f1 1d       	adc	r31, r1
    465e:	92 9f       	mul	r25, r18
    4660:	f0 0d       	add	r31, r0
    4662:	83 9f       	mul	r24, r19
    4664:	f0 0d       	add	r31, r0
    4666:	74 9f       	mul	r23, r20
    4668:	f0 0d       	add	r31, r0
    466a:	65 9f       	mul	r22, r21
    466c:	f0 0d       	add	r31, r0
    466e:	99 27       	eor	r25, r25
    4670:	72 9f       	mul	r23, r18
    4672:	b0 0d       	add	r27, r0
    4674:	e1 1d       	adc	r30, r1
    4676:	f9 1f       	adc	r31, r25
    4678:	63 9f       	mul	r22, r19
    467a:	b0 0d       	add	r27, r0
    467c:	e1 1d       	adc	r30, r1
    467e:	f9 1f       	adc	r31, r25
    4680:	bd 01       	movw	r22, r26
    4682:	cf 01       	movw	r24, r30
    4684:	11 24       	eor	r1, r1
    4686:	08 95       	ret

00004688 <__udivmodhi4>:
    4688:	aa 1b       	sub	r26, r26
    468a:	bb 1b       	sub	r27, r27
    468c:	51 e1       	ldi	r21, 0x11	; 17
    468e:	07 c0       	rjmp	.+14     	; 0x469e <__udivmodhi4_ep>

00004690 <__udivmodhi4_loop>:
    4690:	aa 1f       	adc	r26, r26
    4692:	bb 1f       	adc	r27, r27
    4694:	a6 17       	cp	r26, r22
    4696:	b7 07       	cpc	r27, r23
    4698:	10 f0       	brcs	.+4      	; 0x469e <__udivmodhi4_ep>
    469a:	a6 1b       	sub	r26, r22
    469c:	b7 0b       	sbc	r27, r23

0000469e <__udivmodhi4_ep>:
    469e:	88 1f       	adc	r24, r24
    46a0:	99 1f       	adc	r25, r25
    46a2:	5a 95       	dec	r21
    46a4:	a9 f7       	brne	.-22     	; 0x4690 <__udivmodhi4_loop>
    46a6:	80 95       	com	r24
    46a8:	90 95       	com	r25
    46aa:	bc 01       	movw	r22, r24
    46ac:	cd 01       	movw	r24, r26
    46ae:	08 95       	ret

000046b0 <__udivmodsi4>:
    46b0:	a1 e2       	ldi	r26, 0x21	; 33
    46b2:	1a 2e       	mov	r1, r26
    46b4:	aa 1b       	sub	r26, r26
    46b6:	bb 1b       	sub	r27, r27
    46b8:	fd 01       	movw	r30, r26
    46ba:	0d c0       	rjmp	.+26     	; 0x46d6 <__udivmodsi4_ep>

000046bc <__udivmodsi4_loop>:
    46bc:	aa 1f       	adc	r26, r26
    46be:	bb 1f       	adc	r27, r27
    46c0:	ee 1f       	adc	r30, r30
    46c2:	ff 1f       	adc	r31, r31
    46c4:	a2 17       	cp	r26, r18
    46c6:	b3 07       	cpc	r27, r19
    46c8:	e4 07       	cpc	r30, r20
    46ca:	f5 07       	cpc	r31, r21
    46cc:	20 f0       	brcs	.+8      	; 0x46d6 <__udivmodsi4_ep>
    46ce:	a2 1b       	sub	r26, r18
    46d0:	b3 0b       	sbc	r27, r19
    46d2:	e4 0b       	sbc	r30, r20
    46d4:	f5 0b       	sbc	r31, r21

000046d6 <__udivmodsi4_ep>:
    46d6:	66 1f       	adc	r22, r22
    46d8:	77 1f       	adc	r23, r23
    46da:	88 1f       	adc	r24, r24
    46dc:	99 1f       	adc	r25, r25
    46de:	1a 94       	dec	r1
    46e0:	69 f7       	brne	.-38     	; 0x46bc <__udivmodsi4_loop>
    46e2:	60 95       	com	r22
    46e4:	70 95       	com	r23
    46e6:	80 95       	com	r24
    46e8:	90 95       	com	r25
    46ea:	9b 01       	movw	r18, r22
    46ec:	ac 01       	movw	r20, r24
    46ee:	bd 01       	movw	r22, r26
    46f0:	cf 01       	movw	r24, r30
    46f2:	08 95       	ret

000046f4 <__prologue_saves__>:
    46f4:	2f 92       	push	r2
    46f6:	3f 92       	push	r3
    46f8:	4f 92       	push	r4
    46fa:	5f 92       	push	r5
    46fc:	6f 92       	push	r6
    46fe:	7f 92       	push	r7
    4700:	8f 92       	push	r8
    4702:	9f 92       	push	r9
    4704:	af 92       	push	r10
    4706:	bf 92       	push	r11
    4708:	cf 92       	push	r12
    470a:	df 92       	push	r13
    470c:	ef 92       	push	r14
    470e:	ff 92       	push	r15
    4710:	0f 93       	push	r16
    4712:	1f 93       	push	r17
    4714:	cf 93       	push	r28
    4716:	df 93       	push	r29
    4718:	cd b7       	in	r28, 0x3d	; 61
    471a:	de b7       	in	r29, 0x3e	; 62
    471c:	ca 1b       	sub	r28, r26
    471e:	db 0b       	sbc	r29, r27
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	de bf       	out	0x3e, r29	; 62
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	cd bf       	out	0x3d, r28	; 61
    472a:	09 94       	ijmp

0000472c <__epilogue_restores__>:
    472c:	2a 88       	ldd	r2, Y+18	; 0x12
    472e:	39 88       	ldd	r3, Y+17	; 0x11
    4730:	48 88       	ldd	r4, Y+16	; 0x10
    4732:	5f 84       	ldd	r5, Y+15	; 0x0f
    4734:	6e 84       	ldd	r6, Y+14	; 0x0e
    4736:	7d 84       	ldd	r7, Y+13	; 0x0d
    4738:	8c 84       	ldd	r8, Y+12	; 0x0c
    473a:	9b 84       	ldd	r9, Y+11	; 0x0b
    473c:	aa 84       	ldd	r10, Y+10	; 0x0a
    473e:	b9 84       	ldd	r11, Y+9	; 0x09
    4740:	c8 84       	ldd	r12, Y+8	; 0x08
    4742:	df 80       	ldd	r13, Y+7	; 0x07
    4744:	ee 80       	ldd	r14, Y+6	; 0x06
    4746:	fd 80       	ldd	r15, Y+5	; 0x05
    4748:	0c 81       	ldd	r16, Y+4	; 0x04
    474a:	1b 81       	ldd	r17, Y+3	; 0x03
    474c:	aa 81       	ldd	r26, Y+2	; 0x02
    474e:	b9 81       	ldd	r27, Y+1	; 0x01
    4750:	ce 0f       	add	r28, r30
    4752:	d1 1d       	adc	r29, r1
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	ed 01       	movw	r28, r26
    4760:	08 95       	ret

00004762 <_exit>:
    4762:	f8 94       	cli

00004764 <__stop_program>:
    4764:	ff cf       	rjmp	.-2      	; 0x4764 <__stop_program>
