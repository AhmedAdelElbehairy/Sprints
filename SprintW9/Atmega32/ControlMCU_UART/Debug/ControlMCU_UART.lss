
ControlMCU_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  000019da  00001a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001ac  008001ac  00001bba  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d33  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_13>
      38:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_14>
      3c:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <main>
      8a:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
void static (*UART_TX_Complete_callback)(void)=NULL;
void __vector_13(void)__attribute__((signal,used));//RX_complete
void __vector_14(void)__attribute__((signal,used));//UDRE Empty
void __vector_15(void)__attribute__((signal,used));//TX_complete

uint8_t UART_Init(uint8_t UartNumber) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_Init+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
      9e:	8f ef       	ldi	r24, 0xFF	; 255
      a0:	89 83       	std	Y+1, r24	; 0x01
	if (UartNumber > NumOfUARTChannels) {
      a2:	8a 81       	ldd	r24, Y+2	; 0x02
      a4:	82 30       	cpi	r24, 0x02	; 2
      a6:	18 f0       	brcs	.+6      	; 0xae <UART_Init+0x1c>
		//error uart channel out of range
		ErrRetVal = Unavailable_UART_Channel;
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	89 83       	std	Y+1, r24	; 0x01
      ac:	67 c0       	rjmp	.+206    	; 0x17c <UART_Init+0xea>
	} else {
		/* configure control and status register A
		 * (double transmission speed & Multi-processor communication mode) */
		MODIFY_REG(UART_ControlStatusRegA, UART_DoubleTransmissionSpeed_MSK,
      ae:	ab e2       	ldi	r26, 0x2B	; 43
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	eb e2       	ldi	r30, 0x2B	; 43
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	82 60       	ori	r24, 0x02	; 2
      ba:	8c 93       	st	X, r24
				DoubleSpeedTransmission<<UART_DoubleTransmissionSpeed_BIT);
		MODIFY_REG(UART_ControlStatusRegA,
      bc:	ab e2       	ldi	r26, 0x2B	; 43
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	eb e2       	ldi	r30, 0x2B	; 43
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	8e 7f       	andi	r24, 0xFE	; 254
      c8:	8c 93       	st	X, r24
				UART_MultiProcessorCommunicationMode_MSK,
				MultiProcessCommunicationMode<<UART_MultiProcessorCommunicationMode_BIT);

		/* Setting Uart Data Size */
		MODIFY_REG(UART_ControlStatusRegB, UART_CharacterSizeBit_2_MSK,
      ca:	aa e2       	ldi	r26, 0x2A	; 42
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	ea e2       	ldi	r30, 0x2A	; 42
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8b 7f       	andi	r24, 0xFB	; 251
      d6:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,2)<<UART_CharacterSizeBit_2_BIT);
		SET_BIT(UART_ControlStatusRegC, UART_RegisterSelect_BIT);
      d8:	a0 e4       	ldi	r26, 0x40	; 64
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e0 e4       	ldi	r30, 0x40	; 64
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	8c 93       	st	X, r24
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_1_MSK,
      e6:	a0 e4       	ldi	r26, 0x40	; 64
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e0 e4       	ldi	r30, 0x40	; 64
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,1)<<UART_CharacterSizeBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_0_MSK,
      f4:	a0 e4       	ldi	r26, 0x40	; 64
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e0 e4       	ldi	r30, 0x40	; 64
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	82 60       	ori	r24, 0x02	; 2
     100:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,0)<<UART_CharacterSizeBit_0_BIT);

		/* setting Stop Bit */
		MODIFY_REG(UART_ControlStatusRegC, UART_StopBitSelect_MSK,
     102:	a0 e4       	ldi	r26, 0x40	; 64
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	e0 e4       	ldi	r30, 0x40	; 64
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	87 7f       	andi	r24, 0xF7	; 247
     10e:	8c 93       	st	X, r24
				StopBitMode<<UART_StopBitSelect_BIT);

		/* Setting Parity mode */
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_1_MSK,
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e0 e4       	ldi	r30, 0x40	; 64
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8f 7d       	andi	r24, 0xDF	; 223
     11c:	8c 93       	st	X, r24
				READ_BIT(ParityMode,1)<<UART_ParityModeSelectBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_0_MSK,
     11e:	a0 e4       	ldi	r26, 0x40	; 64
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e0 e4       	ldi	r30, 0x40	; 64
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8f 7e       	andi	r24, 0xEF	; 239
     12a:	8c 93       	st	X, r24
				READ_BIT(ParityMode,0)<<UART_ParityModeSelectBit_0_BIT);
		/* Setting communication mode (synch. or Asynch.)*/
		MODIFY_REG(UART_ControlStatusRegC, UART_SynchAsynchModeSelect_MSK,
     12c:	a0 e4       	ldi	r26, 0x40	; 64
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	e0 e4       	ldi	r30, 0x40	; 64
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8f 7b       	andi	r24, 0xBF	; 191
     138:	8c 93       	st	X, r24
				CommunicationMode<<UART_SynchAsynchModeSelect_BIT);

		/*Set Clock Poalrity*/
		// ignored as all our work is asynchronus communication mode.
		/*Set the value of baud rate register*/
		CLEAR_BIT(UART_BaudRateRegH,UART_RegisterSelect_BIT);
     13a:	a0 e4       	ldi	r26, 0x40	; 64
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	e0 e4       	ldi	r30, 0x40	; 64
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	8f 77       	andi	r24, 0x7F	; 127
     146:	8c 93       	st	X, r24
		MODIFY_REG(UART_BaudRateRegH, UART_BaudRateRegH_MSK, (BaudCalc(BaudRate)>>8)&0x0F);
     148:	a0 e4       	ldi	r26, 0x40	; 64
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e0 e4       	ldi	r30, 0x40	; 64
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	8c 93       	st	X, r24
		WRITE_REG(UART_BaudRateRegL,BaudCalc(BaudRate)&0xFF);
     156:	e9 e2       	ldi	r30, 0x29	; 41
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	87 e6       	ldi	r24, 0x67	; 103
     15c:	80 83       	st	Z, r24

		/* Enabling receiving and transmitting*/
		MODIFY_REG(UART_ControlStatusRegB, UART_ReceiveEnable_MSK,
     15e:	aa e2       	ldi	r26, 0x2A	; 42
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ea e2       	ldi	r30, 0x2A	; 42
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	80 61       	ori	r24, 0x10	; 16
     16a:	8c 93       	st	X, r24
				UART_ReceiveEnable_MSK);
		MODIFY_REG(UART_ControlStatusRegB, UART_TransmissionEnable_MSK,
     16c:	aa e2       	ldi	r26, 0x2A	; 42
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ea e2       	ldi	r30, 0x2A	; 42
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	88 60       	ori	r24, 0x08	; 8
     178:	8c 93       	st	X, r24
				UART_TransmissionEnable_MSK);
		ErrRetVal = OperationSuccess;
     17a:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrRetVal;
     17c:	89 81       	ldd	r24, Y+1	; 0x01
}
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <UART_FlushReceiveBuffer>:
uint8_t UART_FlushReceiveBuffer(void) {
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	00 d0       	rcall	.+0      	; 0x18e <UART_FlushReceiveBuffer+0x6>
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
     192:	8f ef       	ldi	r24, 0xFF	; 255
     194:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flushedCharacter;
	flushedCharacter = UART_DataReg;
     196:	ec e2       	ldi	r30, 0x2C	; 44
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = OperationSuccess;
     19e:	1a 82       	std	Y+2, r1	; 0x02
	return ErrRetVal;
     1a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	cf 91       	pop	r28
     1a8:	df 91       	pop	r29
     1aa:	08 95       	ret

000001ac <UART_TransmitChar>:

uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <UART_TransmitChar+0x6>
     1b2:	0f 92       	push	r0
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	8a 83       	std	Y+2, r24	; 0x02
     1ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     1bc:	8f ef       	ldi	r24, 0xFF	; 255
     1be:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA, 5)) {
     1c0:	eb e2       	ldi	r30, 0x2B	; 43
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	88 2f       	mov	r24, r24
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	80 72       	andi	r24, 0x20	; 32
     1cc:	90 70       	andi	r25, 0x00	; 0
     1ce:	95 95       	asr	r25
     1d0:	87 95       	ror	r24
     1d2:	95 95       	asr	r25
     1d4:	87 95       	ror	r24
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	95 95       	asr	r25
     1dc:	87 95       	ror	r24
     1de:	95 95       	asr	r25
     1e0:	87 95       	ror	r24
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	31 f0       	breq	.+12     	; 0x1f2 <UART_TransmitChar+0x46>
		UART_DataReg= TxChar;
     1e6:	ec e2       	ldi	r30, 0x2C	; 44
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	8b 81       	ldd	r24, Y+3	; 0x03
     1ec:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     1ee:	19 82       	std	Y+1, r1	; 0x01
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <UART_TransmitChar+0x4a>
	}
	else
	{
		ErrRetVal = Transmission_Fail;
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	08 95       	ret

00000204 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	00 d0       	rcall	.+0      	; 0x20a <UART_ReceiveChar+0x6>
     20a:	00 d0       	rcall	.+0      	; 0x20c <UART_ReceiveChar+0x8>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	8a 83       	std	Y+2, r24	; 0x02
     212:	7c 83       	std	Y+4, r23	; 0x04
     214:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     216:	8f ef       	ldi	r24, 0xFF	; 255
     218:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA,7) == 1) {
     21a:	eb e2       	ldi	r30, 0x2B	; 43
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	88 1f       	adc	r24, r24
     222:	88 27       	eor	r24, r24
     224:	88 1f       	adc	r24, r24
     226:	88 2f       	mov	r24, r24
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 70       	andi	r25, 0x00	; 0
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	91 05       	cpc	r25, r1
     230:	41 f4       	brne	.+16     	; 0x242 <UART_ReceiveChar+0x3e>
		*RxChar = UART_DataReg;
     232:	ec e2       	ldi	r30, 0x2C	; 44
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	eb 81       	ldd	r30, Y+3	; 0x03
     23a:	fc 81       	ldd	r31, Y+4	; 0x04
     23c:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     23e:	19 82       	std	Y+1, r1	; 0x01
     240:	02 c0       	rjmp	.+4      	; 0x246 <UART_ReceiveChar+0x42>
	}
	else
	{
		ErrRetVal = Receiving_Fail;
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     246:	89 81       	ldd	r24, Y+1	; 0x01
}
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	08 95       	ret

00000256 <UART_TransmitString>:

uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString)
{
     256:	df 93       	push	r29
     258:	cf 93       	push	r28
     25a:	00 d0       	rcall	.+0      	; 0x25c <UART_TransmitString+0x6>
     25c:	00 d0       	rcall	.+0      	; 0x25e <UART_TransmitString+0x8>
     25e:	0f 92       	push	r0
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	8b 83       	std	Y+3, r24	; 0x03
     266:	7d 83       	std	Y+5, r23	; 0x05
     268:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     26e:	19 82       	std	Y+1, r1	; 0x01
	while(iterator <= 255)
	{
		if(*TxString=='\0')
     270:	ec 81       	ldd	r30, Y+4	; 0x04
     272:	fd 81       	ldd	r31, Y+5	; 0x05
     274:	80 81       	ld	r24, Z
     276:	88 23       	and	r24, r24
     278:	81 f4       	brne	.+32     	; 0x29a <UART_TransmitString+0x44>
		{
			ErrRetVal=OperationSuccess;
     27a:	1a 82       	std	Y+2, r1	; 0x02
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	6d e0       	ldi	r22, 0x0D	; 13
     280:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
     284:	88 23       	and	r24, r24
     286:	d1 f7       	brne	.-12     	; 0x27c <UART_TransmitString+0x26>
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
			iterator++;
			TxString++;
		}
	}
	return ErrRetVal;
     288:	8a 81       	ldd	r24, Y+2	; 0x02
}
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
			break;
		}
		else
		{
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
     29a:	ec 81       	ldd	r30, Y+4	; 0x04
     29c:	fd 81       	ldd	r31, Y+5	; 0x05
     29e:	90 81       	ld	r25, Z
     2a0:	8b 81       	ldd	r24, Y+3	; 0x03
     2a2:	69 2f       	mov	r22, r25
     2a4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
     2a8:	88 23       	and	r24, r24
     2aa:	b9 f7       	brne	.-18     	; 0x29a <UART_TransmitString+0x44>
			iterator++;
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	8f 5f       	subi	r24, 0xFF	; 255
     2b0:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
     2b2:	8c 81       	ldd	r24, Y+4	; 0x04
     2b4:	9d 81       	ldd	r25, Y+5	; 0x05
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	9d 83       	std	Y+5, r25	; 0x05
     2ba:	8c 83       	std	Y+4, r24	; 0x04
     2bc:	d9 cf       	rjmp	.-78     	; 0x270 <UART_TransmitString+0x1a>

000002be <UART_ReceiveString>:
		}
	}
	return ErrRetVal;
}
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <UART_ReceiveString+0x6>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <UART_ReceiveString+0x8>
     2c6:	0f 92       	push	r0
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	8b 83       	std	Y+3, r24	; 0x03
     2ce:	7d 83       	std	Y+5, r23	; 0x05
     2d0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     2d6:	19 82       	std	Y+1, r1	; 0x01
	while(iterator<=255)
	{
		if(UART_ReceiveChar(UartNumber,RxString)==OperationSuccess)
     2d8:	2c 81       	ldd	r18, Y+4	; 0x04
     2da:	3d 81       	ldd	r19, Y+5	; 0x05
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	b9 01       	movw	r22, r18
     2e0:	0e 94 02 01 	call	0x204	; 0x204 <UART_ReceiveChar>
     2e4:	88 23       	and	r24, r24
     2e6:	c1 f7       	brne	.-16     	; 0x2d8 <UART_ReceiveString+0x1a>
		{
			if(*RxString == '\r' || *RxString == '\n')
     2e8:	ec 81       	ldd	r30, Y+4	; 0x04
     2ea:	fd 81       	ldd	r31, Y+5	; 0x05
     2ec:	80 81       	ld	r24, Z
     2ee:	8d 30       	cpi	r24, 0x0D	; 13
     2f0:	29 f0       	breq	.+10     	; 0x2fc <UART_ReceiveString+0x3e>
     2f2:	ec 81       	ldd	r30, Y+4	; 0x04
     2f4:	fd 81       	ldd	r31, Y+5	; 0x05
     2f6:	80 81       	ld	r24, Z
     2f8:	8a 30       	cpi	r24, 0x0A	; 10
     2fa:	69 f4       	brne	.+26     	; 0x316 <UART_ReceiveString+0x58>
			{
				*RxString='\0';
     2fc:	ec 81       	ldd	r30, Y+4	; 0x04
     2fe:	fd 81       	ldd	r31, Y+5	; 0x05
     300:	10 82       	st	Z, r1
				ErrRetVal = OperationSuccess;
     302:	1a 82       	std	Y+2, r1	; 0x02
		else
		{
			continue;
		}
	}
	return ErrRetVal;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
}
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	08 95       	ret
				ErrRetVal = OperationSuccess;
				break;
			}
			else
			{
			RxString++;
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	9d 81       	ldd	r25, Y+5	; 0x05
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	9d 83       	std	Y+5, r25	; 0x05
     31e:	8c 83       	std	Y+4, r24	; 0x04
			iterator++;
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	d8 cf       	rjmp	.-80     	; 0x2d8 <UART_ReceiveString+0x1a>

00000328 <UART_EnableInterrupt>:
		}
	}
	return ErrRetVal;
}

uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	00 d0       	rcall	.+0      	; 0x32e <UART_EnableInterrupt+0x6>
     32e:	00 d0       	rcall	.+0      	; 0x330 <UART_EnableInterrupt+0x8>
     330:	0f 92       	push	r0
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	8a 83       	std	Y+2, r24	; 0x02
     338:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
     33e:	af e5       	ldi	r26, 0x5F	; 95
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	ef e5       	ldi	r30, 0x5F	; 95
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	80 68       	ori	r24, 0x80	; 128
     34a:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	88 f5       	brcc	.+98     	; 0x3b4 <UART_EnableInterrupt+0x8c>
	{
		switch (UartInterruptType)
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	3d 83       	std	Y+5, r19	; 0x05
     35a:	2c 83       	std	Y+4, r18	; 0x04
     35c:	8c 81       	ldd	r24, Y+4	; 0x04
     35e:	9d 81       	ldd	r25, Y+5	; 0x05
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	91 05       	cpc	r25, r1
     364:	91 f0       	breq	.+36     	; 0x38a <UART_EnableInterrupt+0x62>
     366:	2c 81       	ldd	r18, Y+4	; 0x04
     368:	3d 81       	ldd	r19, Y+5	; 0x05
     36a:	22 30       	cpi	r18, 0x02	; 2
     36c:	31 05       	cpc	r19, r1
     36e:	b1 f0       	breq	.+44     	; 0x39c <UART_EnableInterrupt+0x74>
     370:	8c 81       	ldd	r24, Y+4	; 0x04
     372:	9d 81       	ldd	r25, Y+5	; 0x05
     374:	00 97       	sbiw	r24, 0x00	; 0
     376:	d9 f4       	brne	.+54     	; 0x3ae <UART_EnableInterrupt+0x86>
		{
		case RxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     378:	aa e2       	ldi	r26, 0x2A	; 42
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	ea e2       	ldi	r30, 0x2A	; 42
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	80 68       	ori	r24, 0x80	; 128
     384:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_MSK,
					UART_ReceiveCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     386:	19 82       	std	Y+1, r1	; 0x01
     388:	17 c0       	rjmp	.+46     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		case DataBufferEmptyInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     38a:	aa e2       	ldi	r26, 0x2A	; 42
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	ea e2       	ldi	r30, 0x2A	; 42
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	80 62       	ori	r24, 0x20	; 32
     396:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_MSK,
					UART_DataRegisterEmptyInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     398:	19 82       	std	Y+1, r1	; 0x01
     39a:	0e c0       	rjmp	.+28     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		case TxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     39c:	aa e2       	ldi	r26, 0x2A	; 42
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	ea e2       	ldi	r30, 0x2A	; 42
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	80 64       	ori	r24, 0x40	; 64
     3a8:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_MSK,
					UART_TransmissionCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     3aa:	19 82       	std	Y+1, r1	; 0x01
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		default:
			ErrRetVal = Interrupt_Enabling_Fail;
     3ae:	89 e0       	ldi	r24, 0x09	; 9
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <UART_EnableInterrupt+0x90>
		}
	}
	else
	{
		ErrRetVal = Interrupt_Enabling_Fail;
     3b4:	89 e0       	ldi	r24, 0x09	; 9
     3b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	08 95       	ret

000003ca <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     3ca:	df 93       	push	r29
     3cc:	cf 93       	push	r28
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <UART_DisableInterrupt+0x6>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <UART_DisableInterrupt+0x8>
     3d2:	0f 92       	push	r0
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	8a 83       	std	Y+2, r24	; 0x02
     3da:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	83 30       	cpi	r24, 0x03	; 3
     3e4:	88 f5       	brcc	.+98     	; 0x448 <UART_DisableInterrupt+0x7e>
		{
			switch (UartInterruptType)
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	3d 83       	std	Y+5, r19	; 0x05
     3ee:	2c 83       	std	Y+4, r18	; 0x04
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	9d 81       	ldd	r25, Y+5	; 0x05
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	91 05       	cpc	r25, r1
     3f8:	91 f0       	breq	.+36     	; 0x41e <UART_DisableInterrupt+0x54>
     3fa:	2c 81       	ldd	r18, Y+4	; 0x04
     3fc:	3d 81       	ldd	r19, Y+5	; 0x05
     3fe:	22 30       	cpi	r18, 0x02	; 2
     400:	31 05       	cpc	r19, r1
     402:	b1 f0       	breq	.+44     	; 0x430 <UART_DisableInterrupt+0x66>
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	9d 81       	ldd	r25, Y+5	; 0x05
     408:	00 97       	sbiw	r24, 0x00	; 0
     40a:	d9 f4       	brne	.+54     	; 0x442 <UART_DisableInterrupt+0x78>
			{
			case RxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     40c:	aa e2       	ldi	r26, 0x2A	; 42
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	ea e2       	ldi	r30, 0x2A	; 42
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	8f 77       	andi	r24, 0x7F	; 127
     418:	8c 93       	st	X, r24
						UART_ReceiveCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     41a:	19 82       	std	Y+1, r1	; 0x01
     41c:	17 c0       	rjmp	.+46     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			case DataBufferEmptyInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     41e:	aa e2       	ldi	r26, 0x2A	; 42
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	ea e2       	ldi	r30, 0x2A	; 42
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	8f 7d       	andi	r24, 0xDF	; 223
     42a:	8c 93       	st	X, r24
						UART_DataRegisterEmptyInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     42c:	19 82       	std	Y+1, r1	; 0x01
     42e:	0e c0       	rjmp	.+28     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			case TxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     430:	aa e2       	ldi	r26, 0x2A	; 42
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	ea e2       	ldi	r30, 0x2A	; 42
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	8f 7b       	andi	r24, 0xBF	; 191
     43c:	8c 93       	st	X, r24
						UART_TransmissionCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     43e:	19 82       	std	Y+1, r1	; 0x01
     440:	05 c0       	rjmp	.+10     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			default:
				ErrRetVal = Interrupt_Disabling_Fail;
     442:	88 e0       	ldi	r24, 0x08	; 8
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	02 c0       	rjmp	.+4      	; 0x44c <UART_DisableInterrupt+0x82>
			}
		}
		else
		{
			ErrRetVal = Interrupt_Disabling_Fail;
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	89 83       	std	Y+1, r24	; 0x01
		}
	return ErrRetVal;
     44c:	89 81       	ldd	r24, Y+1	; 0x01
}
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	cf 91       	pop	r28
     45a:	df 91       	pop	r29
     45c:	08 95       	ret

0000045e <UART_Set_RX_CompleteCallback>:
uint8_t UART_Set_RX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	00 d0       	rcall	.+0      	; 0x464 <UART_Set_RX_CompleteCallback+0x6>
     464:	00 d0       	rcall	.+0      	; 0x466 <UART_Set_RX_CompleteCallback+0x8>
     466:	0f 92       	push	r0
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	8a 83       	std	Y+2, r24	; 0x02
     46e:	6b 83       	std	Y+3, r22	; 0x03
     470:	5d 83       	std	Y+5, r21	; 0x05
     472:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     474:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     476:	8c 81       	ldd	r24, Y+4	; 0x04
     478:	9d 81       	ldd	r25, Y+5	; 0x05
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	31 f0       	breq	.+12     	; 0x48a <UART_Set_RX_CompleteCallback+0x2c>
		UART_RX_Complete_callback = callBack;
     47e:	8c 81       	ldd	r24, Y+4	; 0x04
     480:	9d 81       	ldd	r25, Y+5	; 0x05
     482:	90 93 ad 01 	sts	0x01AD, r25
     486:	80 93 ac 01 	sts	0x01AC, r24
	return ErrRetVal;
     48a:	89 81       	ldd	r24, Y+1	; 0x01
}
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	cf 91       	pop	r28
     498:	df 91       	pop	r29
     49a:	08 95       	ret

0000049c <UART_UDRE_Empty_CompleteCallback>:
uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <UART_UDRE_Empty_CompleteCallback+0x6>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <UART_UDRE_Empty_CompleteCallback+0x8>
     4a4:	0f 92       	push	r0
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	8a 83       	std	Y+2, r24	; 0x02
     4ac:	6b 83       	std	Y+3, r22	; 0x03
     4ae:	5d 83       	std	Y+5, r21	; 0x05
     4b0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4b2:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4b4:	8c 81       	ldd	r24, Y+4	; 0x04
     4b6:	9d 81       	ldd	r25, Y+5	; 0x05
     4b8:	00 97       	sbiw	r24, 0x00	; 0
     4ba:	31 f0       	breq	.+12     	; 0x4c8 <UART_UDRE_Empty_CompleteCallback+0x2c>
		UART_UDRE_Empty_callback = callBack;
     4bc:	8c 81       	ldd	r24, Y+4	; 0x04
     4be:	9d 81       	ldd	r25, Y+5	; 0x05
     4c0:	90 93 af 01 	sts	0x01AF, r25
     4c4:	80 93 ae 01 	sts	0x01AE, r24
	return ErrRetVal;
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	08 95       	ret

000004da <UART_Set_TX_CompleteCallback>:
uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     4da:	df 93       	push	r29
     4dc:	cf 93       	push	r28
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <UART_Set_TX_CompleteCallback+0x6>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <UART_Set_TX_CompleteCallback+0x8>
     4e2:	0f 92       	push	r0
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	8a 83       	std	Y+2, r24	; 0x02
     4ea:	6b 83       	std	Y+3, r22	; 0x03
     4ec:	5d 83       	std	Y+5, r21	; 0x05
     4ee:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4f0:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4f2:	8c 81       	ldd	r24, Y+4	; 0x04
     4f4:	9d 81       	ldd	r25, Y+5	; 0x05
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	31 f0       	breq	.+12     	; 0x506 <UART_Set_TX_CompleteCallback+0x2c>
		UART_TX_Complete_callback = callBack;
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	9d 81       	ldd	r25, Y+5	; 0x05
     4fe:	90 93 b1 01 	sts	0x01B1, r25
     502:	80 93 b0 01 	sts	0x01B0, r24
	return ErrRetVal;
     506:	89 81       	ldd	r24, Y+1	; 0x01
}
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <__vector_13>:
void __vector_13(void)
{
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Complete_callback != NULL)
     542:	80 91 ac 01 	lds	r24, 0x01AC
     546:	90 91 ad 01 	lds	r25, 0x01AD
     54a:	00 97       	sbiw	r24, 0x00	; 0
     54c:	29 f0       	breq	.+10     	; 0x558 <__vector_13+0x40>
		UART_RX_Complete_callback();
     54e:	e0 91 ac 01 	lds	r30, 0x01AC
     552:	f0 91 ad 01 	lds	r31, 0x01AD
     556:	09 95       	icall
}
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <__vector_14>:
void __vector_14(void)
{
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
	if (UART_UDRE_Empty_callback != NULL)
     5a8:	80 91 ae 01 	lds	r24, 0x01AE
     5ac:	90 91 af 01 	lds	r25, 0x01AF
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	29 f0       	breq	.+10     	; 0x5be <__vector_14+0x40>
		UART_UDRE_Empty_callback();
     5b4:	e0 91 ae 01 	lds	r30, 0x01AE
     5b8:	f0 91 af 01 	lds	r31, 0x01AF
     5bc:	09 95       	icall
}
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	0f 90       	pop	r0
     5e0:	1f 90       	pop	r1
     5e2:	18 95       	reti

000005e4 <__vector_15>:
void __vector_15(void)
{
     5e4:	1f 92       	push	r1
     5e6:	0f 92       	push	r0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
     5ee:	2f 93       	push	r18
     5f0:	3f 93       	push	r19
     5f2:	4f 93       	push	r20
     5f4:	5f 93       	push	r21
     5f6:	6f 93       	push	r22
     5f8:	7f 93       	push	r23
     5fa:	8f 93       	push	r24
     5fc:	9f 93       	push	r25
     5fe:	af 93       	push	r26
     600:	bf 93       	push	r27
     602:	ef 93       	push	r30
     604:	ff 93       	push	r31
     606:	df 93       	push	r29
     608:	cf 93       	push	r28
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Complete_callback != NULL)
     60e:	80 91 b0 01 	lds	r24, 0x01B0
     612:	90 91 b1 01 	lds	r25, 0x01B1
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	29 f0       	breq	.+10     	; 0x624 <__vector_15+0x40>
		UART_TX_Complete_callback();
     61a:	e0 91 b0 01 	lds	r30, 0x01B0
     61e:	f0 91 b1 01 	lds	r31, 0x01B1
     622:	09 95       	icall
}
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	0f be       	out	0x3f, r0	; 63
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <DIO_PortInit>:
#include "../DIO/DIO_DRIVER_TypeDef.h"
#include "../DIO/DIO_DRIVER.h"
#include "../DIO/DIO_DRIVER_Priv.h"

DIO_ERROR_RETVAL_t DIO_PortInit(DIO_PORT_ID_t DIO_port,
		DIO_DIRECTION_t DIO_direction) {
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <DIO_PortInit+0x6>
     650:	00 d0       	rcall	.+0      	; 0x652 <DIO_PortInit+0x8>
     652:	0f 92       	push	r0
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	8a 83       	std	Y+2, r24	; 0x02
     65a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     65c:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD)
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	85 30       	cpi	r24, 0x05	; 5
     662:	08 f0       	brcs	.+2      	; 0x666 <DIO_PortInit+0x1c>
     664:	3d c0       	rjmp	.+122    	; 0x6e0 <DIO_PortInit+0x96>
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	88 23       	and	r24, r24
     66a:	19 f0       	breq	.+6      	; 0x672 <DIO_PortInit+0x28>
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	8f 3f       	cpi	r24, 0xFF	; 255
     670:	b9 f5       	brne	.+110    	; 0x6e0 <DIO_PortInit+0x96>
			&& (DIO_direction == PORT_INPUT || DIO_direction == PORT_OUTPUT)) {
		switch (DIO_port) {
     672:	8a 81       	ldd	r24, Y+2	; 0x02
     674:	28 2f       	mov	r18, r24
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	3d 83       	std	Y+5, r19	; 0x05
     67a:	2c 83       	std	Y+4, r18	; 0x04
     67c:	8c 81       	ldd	r24, Y+4	; 0x04
     67e:	9d 81       	ldd	r25, Y+5	; 0x05
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	91 05       	cpc	r25, r1
     684:	d9 f0       	breq	.+54     	; 0x6bc <DIO_PortInit+0x72>
     686:	2c 81       	ldd	r18, Y+4	; 0x04
     688:	3d 81       	ldd	r19, Y+5	; 0x05
     68a:	23 30       	cpi	r18, 0x03	; 3
     68c:	31 05       	cpc	r19, r1
     68e:	34 f4       	brge	.+12     	; 0x69c <DIO_PortInit+0x52>
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	9d 81       	ldd	r25, Y+5	; 0x05
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	91 05       	cpc	r25, r1
     698:	61 f0       	breq	.+24     	; 0x6b2 <DIO_PortInit+0x68>
     69a:	1f c0       	rjmp	.+62     	; 0x6da <DIO_PortInit+0x90>
     69c:	2c 81       	ldd	r18, Y+4	; 0x04
     69e:	3d 81       	ldd	r19, Y+5	; 0x05
     6a0:	23 30       	cpi	r18, 0x03	; 3
     6a2:	31 05       	cpc	r19, r1
     6a4:	81 f0       	breq	.+32     	; 0x6c6 <DIO_PortInit+0x7c>
     6a6:	8c 81       	ldd	r24, Y+4	; 0x04
     6a8:	9d 81       	ldd	r25, Y+5	; 0x05
     6aa:	84 30       	cpi	r24, 0x04	; 4
     6ac:	91 05       	cpc	r25, r1
     6ae:	81 f0       	breq	.+32     	; 0x6d0 <DIO_PortInit+0x86>
     6b0:	14 c0       	rjmp	.+40     	; 0x6da <DIO_PortInit+0x90>
		case PORTA:
			WRITE_REG(DDRA_Register, DIO_direction);
     6b2:	ea e3       	ldi	r30, 0x3A	; 58
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	80 83       	st	Z, r24
     6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <DIO_PortInit+0x9a>
			break;
		case PORTB:
			WRITE_REG(DDRB_Register, DIO_direction);
     6bc:	e7 e3       	ldi	r30, 0x37	; 55
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	80 83       	st	Z, r24
     6c4:	0f c0       	rjmp	.+30     	; 0x6e4 <DIO_PortInit+0x9a>
			break;
		case PORTC:
			WRITE_REG(DDRC_Register, DIO_direction);
     6c6:	e4 e3       	ldi	r30, 0x34	; 52
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	80 83       	st	Z, r24
     6ce:	0a c0       	rjmp	.+20     	; 0x6e4 <DIO_PortInit+0x9a>
			break;
		case PORTD:
			WRITE_REG(DDRD_Register, DIO_direction);
     6d0:	e1 e3       	ldi	r30, 0x31	; 49
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	8b 81       	ldd	r24, Y+3	; 0x03
     6d6:	80 83       	st	Z, r24
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <DIO_PortInit+0x9a>
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_PortInit+0x9a>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
}
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	cf 91       	pop	r28
     6f2:	df 91       	pop	r29
     6f4:	08 95       	ret

000006f6 <DIO_SetPortVal>:
DIO_ERROR_RETVAL_t DIO_SetPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <DIO_SetPortVal+0x6>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <DIO_SetPortVal+0x8>
     6fe:	0f 92       	push	r0
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	8a 83       	std	Y+2, r24	; 0x02
     706:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     708:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	85 30       	cpi	r24, 0x05	; 5
     70e:	08 f0       	brcs	.+2      	; 0x712 <DIO_SetPortVal+0x1c>
     710:	57 c0       	rjmp	.+174    	; 0x7c0 <DIO_SetPortVal+0xca>
		switch (DIO_port) {
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	28 2f       	mov	r18, r24
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	3d 83       	std	Y+5, r19	; 0x05
     71a:	2c 83       	std	Y+4, r18	; 0x04
     71c:	8c 81       	ldd	r24, Y+4	; 0x04
     71e:	9d 81       	ldd	r25, Y+5	; 0x05
     720:	82 30       	cpi	r24, 0x02	; 2
     722:	91 05       	cpc	r25, r1
     724:	19 f1       	breq	.+70     	; 0x76c <DIO_SetPortVal+0x76>
     726:	2c 81       	ldd	r18, Y+4	; 0x04
     728:	3d 81       	ldd	r19, Y+5	; 0x05
     72a:	23 30       	cpi	r18, 0x03	; 3
     72c:	31 05       	cpc	r19, r1
     72e:	34 f4       	brge	.+12     	; 0x73c <DIO_SetPortVal+0x46>
     730:	8c 81       	ldd	r24, Y+4	; 0x04
     732:	9d 81       	ldd	r25, Y+5	; 0x05
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	91 05       	cpc	r25, r1
     738:	61 f0       	breq	.+24     	; 0x752 <DIO_SetPortVal+0x5c>
     73a:	3f c0       	rjmp	.+126    	; 0x7ba <DIO_SetPortVal+0xc4>
     73c:	2c 81       	ldd	r18, Y+4	; 0x04
     73e:	3d 81       	ldd	r19, Y+5	; 0x05
     740:	23 30       	cpi	r18, 0x03	; 3
     742:	31 05       	cpc	r19, r1
     744:	01 f1       	breq	.+64     	; 0x786 <DIO_SetPortVal+0x90>
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	9d 81       	ldd	r25, Y+5	; 0x05
     74a:	84 30       	cpi	r24, 0x04	; 4
     74c:	91 05       	cpc	r25, r1
     74e:	41 f1       	breq	.+80     	; 0x7a0 <DIO_SetPortVal+0xaa>
     750:	34 c0       	rjmp	.+104    	; 0x7ba <DIO_SetPortVal+0xc4>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, value);
     752:	ab e3       	ldi	r26, 0x3B	; 59
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	eb e3       	ldi	r30, 0x3B	; 59
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	98 2f       	mov	r25, r24
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	80 95       	com	r24
     762:	98 23       	and	r25, r24
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	89 2b       	or	r24, r25
     768:	8c 93       	st	X, r24
     76a:	2c c0       	rjmp	.+88     	; 0x7c4 <DIO_SetPortVal+0xce>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, value);
     76c:	a8 e3       	ldi	r26, 0x38	; 56
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	e8 e3       	ldi	r30, 0x38	; 56
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	98 2f       	mov	r25, r24
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	80 95       	com	r24
     77c:	98 23       	and	r25, r24
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	89 2b       	or	r24, r25
     782:	8c 93       	st	X, r24
     784:	1f c0       	rjmp	.+62     	; 0x7c4 <DIO_SetPortVal+0xce>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, value);
     786:	a5 e3       	ldi	r26, 0x35	; 53
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	e5 e3       	ldi	r30, 0x35	; 53
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	98 2f       	mov	r25, r24
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	80 95       	com	r24
     796:	98 23       	and	r25, r24
     798:	8b 81       	ldd	r24, Y+3	; 0x03
     79a:	89 2b       	or	r24, r25
     79c:	8c 93       	st	X, r24
     79e:	12 c0       	rjmp	.+36     	; 0x7c4 <DIO_SetPortVal+0xce>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, value);
     7a0:	a2 e3       	ldi	r26, 0x32	; 50
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	e2 e3       	ldi	r30, 0x32	; 50
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	98 2f       	mov	r25, r24
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	80 95       	com	r24
     7b0:	98 23       	and	r25, r24
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	89 2b       	or	r24, r25
     7b6:	8c 93       	st	X, r24
     7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <DIO_SetPortVal+0xce>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_SetPortVal+0xce>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
}
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	cf 91       	pop	r28
     7d2:	df 91       	pop	r29
     7d4:	08 95       	ret

000007d6 <DIO_ClrPortVal>:
DIO_ERROR_RETVAL_t DIO_ClrPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	29 97       	sbiw	r28, 0x09	; 9
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     7ee:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	85 30       	cpi	r24, 0x05	; 5
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <DIO_ClrPortVal+0x22>
     7f6:	53 c0       	rjmp	.+166    	; 0x89e <__stack+0x3f>
		switch (DIO_port) {
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	28 2f       	mov	r18, r24
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	39 87       	std	Y+9, r19	; 0x09
     800:	28 87       	std	Y+8, r18	; 0x08
     802:	88 85       	ldd	r24, Y+8	; 0x08
     804:	99 85       	ldd	r25, Y+9	; 0x09
     806:	82 30       	cpi	r24, 0x02	; 2
     808:	91 05       	cpc	r25, r1
     80a:	11 f1       	breq	.+68     	; 0x850 <DIO_ClrPortVal+0x7a>
     80c:	28 85       	ldd	r18, Y+8	; 0x08
     80e:	39 85       	ldd	r19, Y+9	; 0x09
     810:	23 30       	cpi	r18, 0x03	; 3
     812:	31 05       	cpc	r19, r1
     814:	34 f4       	brge	.+12     	; 0x822 <DIO_ClrPortVal+0x4c>
     816:	88 85       	ldd	r24, Y+8	; 0x08
     818:	99 85       	ldd	r25, Y+9	; 0x09
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	91 05       	cpc	r25, r1
     81e:	61 f0       	breq	.+24     	; 0x838 <DIO_ClrPortVal+0x62>
     820:	3b c0       	rjmp	.+118    	; 0x898 <__stack+0x39>
     822:	28 85       	ldd	r18, Y+8	; 0x08
     824:	39 85       	ldd	r19, Y+9	; 0x09
     826:	23 30       	cpi	r18, 0x03	; 3
     828:	31 05       	cpc	r19, r1
     82a:	f1 f0       	breq	.+60     	; 0x868 <__stack+0x9>
     82c:	88 85       	ldd	r24, Y+8	; 0x08
     82e:	99 85       	ldd	r25, Y+9	; 0x09
     830:	84 30       	cpi	r24, 0x04	; 4
     832:	91 05       	cpc	r25, r1
     834:	29 f1       	breq	.+74     	; 0x880 <__stack+0x21>
     836:	30 c0       	rjmp	.+96     	; 0x898 <__stack+0x39>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, ~value);
     838:	eb e3       	ldi	r30, 0x3B	; 59
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	90 81       	ld	r25, Z
     83e:	eb e3       	ldi	r30, 0x3B	; 59
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	80 95       	com	r24
     84a:	90 95       	com	r25
     84c:	80 83       	st	Z, r24
     84e:	29 c0       	rjmp	.+82     	; 0x8a2 <__stack+0x43>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, ~value);
     850:	e8 e3       	ldi	r30, 0x38	; 56
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	20 81       	ld	r18, Z
     856:	e8 e3       	ldi	r30, 0x38	; 56
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	80 95       	com	r24
     862:	90 95       	com	r25
     864:	80 83       	st	Z, r24
     866:	1d c0       	rjmp	.+58     	; 0x8a2 <__stack+0x43>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, ~value);
     868:	e5 e3       	ldi	r30, 0x35	; 53
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	30 81       	ld	r19, Z
     86e:	e5 e3       	ldi	r30, 0x35	; 53
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	80 95       	com	r24
     87a:	90 95       	com	r25
     87c:	80 83       	st	Z, r24
     87e:	11 c0       	rjmp	.+34     	; 0x8a2 <__stack+0x43>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, ~value);
     880:	e2 e3       	ldi	r30, 0x32	; 50
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	e2 e3       	ldi	r30, 0x32	; 50
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	80 95       	com	r24
     892:	90 95       	com	r25
     894:	80 83       	st	Z, r24
     896:	05 c0       	rjmp	.+10     	; 0x8a2 <__stack+0x43>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	89 83       	std	Y+1, r24	; 0x01
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     8a4:	29 96       	adiw	r28, 0x09	; 9
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	cf 91       	pop	r28
     8b2:	df 91       	pop	r29
     8b4:	08 95       	ret

000008b6 <DIO_GetPortVal>:
Byte DIO_GetPortVal(DIO_PORT_ID_t DIO_port) {
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <DIO_GetPortVal+0x6>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <DIO_GetPortVal+0x8>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	8a 83       	std	Y+2, r24	; 0x02
	Byte RETVAL = EXIT_FAILURE;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD)) {
     8c8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ca:	85 30       	cpi	r24, 0x05	; 5
     8cc:	b8 f5       	brcc	.+110    	; 0x93c <DIO_GetPortVal+0x86>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	3c 83       	std	Y+4, r19	; 0x04
     8d6:	2b 83       	std	Y+3, r18	; 0x03
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	9c 81       	ldd	r25, Y+4	; 0x04
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	91 05       	cpc	r25, r1
     8e0:	d9 f0       	breq	.+54     	; 0x918 <DIO_GetPortVal+0x62>
     8e2:	2b 81       	ldd	r18, Y+3	; 0x03
     8e4:	3c 81       	ldd	r19, Y+4	; 0x04
     8e6:	23 30       	cpi	r18, 0x03	; 3
     8e8:	31 05       	cpc	r19, r1
     8ea:	34 f4       	brge	.+12     	; 0x8f8 <DIO_GetPortVal+0x42>
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	9c 81       	ldd	r25, Y+4	; 0x04
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	91 05       	cpc	r25, r1
     8f4:	61 f0       	breq	.+24     	; 0x90e <DIO_GetPortVal+0x58>
     8f6:	1f c0       	rjmp	.+62     	; 0x936 <DIO_GetPortVal+0x80>
     8f8:	2b 81       	ldd	r18, Y+3	; 0x03
     8fa:	3c 81       	ldd	r19, Y+4	; 0x04
     8fc:	23 30       	cpi	r18, 0x03	; 3
     8fe:	31 05       	cpc	r19, r1
     900:	81 f0       	breq	.+32     	; 0x922 <DIO_GetPortVal+0x6c>
     902:	8b 81       	ldd	r24, Y+3	; 0x03
     904:	9c 81       	ldd	r25, Y+4	; 0x04
     906:	84 30       	cpi	r24, 0x04	; 4
     908:	91 05       	cpc	r25, r1
     90a:	81 f0       	breq	.+32     	; 0x92c <DIO_GetPortVal+0x76>
     90c:	14 c0       	rjmp	.+40     	; 0x936 <DIO_GetPortVal+0x80>
		case PORTA:
			RETVAL = READ_REG(PINA_Register);
     90e:	e9 e3       	ldi	r30, 0x39	; 57
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	14 c0       	rjmp	.+40     	; 0x940 <DIO_GetPortVal+0x8a>
			break;
		case PORTB:
			RETVAL = READ_REG(PINB_Register);
     918:	e6 e3       	ldi	r30, 0x36	; 54
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	89 83       	std	Y+1, r24	; 0x01
     920:	0f c0       	rjmp	.+30     	; 0x940 <DIO_GetPortVal+0x8a>
			break;
		case PORTC:
			RETVAL = READ_REG(PINC_Register);
     922:	e3 e3       	ldi	r30, 0x33	; 51
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	0a c0       	rjmp	.+20     	; 0x940 <DIO_GetPortVal+0x8a>
			break;
		case PORTD:
			RETVAL = READ_REG(PIND_Register);
     92c:	e0 e3       	ldi	r30, 0x30	; 48
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	05 c0       	rjmp	.+10     	; 0x940 <DIO_GetPortVal+0x8a>
			break;
		default:
			RETVAL = EXIT_FAILURE;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	02 c0       	rjmp	.+4      	; 0x940 <DIO_GetPortVal+0x8a>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	89 83       	std	Y+1, r24	; 0x01
	}
	return RETVAL;
     940:	89 81       	ldd	r24, Y+1	; 0x01
}
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	08 95       	ret

00000950 <DIO_TogPortVal>:
DIO_ERROR_RETVAL_t DIO_TogPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     950:	df 93       	push	r29
     952:	cf 93       	push	r28
     954:	00 d0       	rcall	.+0      	; 0x956 <DIO_TogPortVal+0x6>
     956:	00 d0       	rcall	.+0      	; 0x958 <DIO_TogPortVal+0x8>
     958:	0f 92       	push	r0
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	8a 83       	std	Y+2, r24	; 0x02
     960:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     962:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     964:	8a 81       	ldd	r24, Y+2	; 0x02
     966:	85 30       	cpi	r24, 0x05	; 5
     968:	08 f0       	brcs	.+2      	; 0x96c <DIO_TogPortVal+0x1c>
     96a:	67 c0       	rjmp	.+206    	; 0xa3a <DIO_TogPortVal+0xea>
		switch (DIO_port) {
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	3d 83       	std	Y+5, r19	; 0x05
     974:	2c 83       	std	Y+4, r18	; 0x04
     976:	8c 81       	ldd	r24, Y+4	; 0x04
     978:	9d 81       	ldd	r25, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	91 05       	cpc	r25, r1
     97e:	39 f1       	breq	.+78     	; 0x9ce <DIO_TogPortVal+0x7e>
     980:	2c 81       	ldd	r18, Y+4	; 0x04
     982:	3d 81       	ldd	r19, Y+5	; 0x05
     984:	23 30       	cpi	r18, 0x03	; 3
     986:	31 05       	cpc	r19, r1
     988:	34 f4       	brge	.+12     	; 0x996 <DIO_TogPortVal+0x46>
     98a:	8c 81       	ldd	r24, Y+4	; 0x04
     98c:	9d 81       	ldd	r25, Y+5	; 0x05
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	91 05       	cpc	r25, r1
     992:	61 f0       	breq	.+24     	; 0x9ac <DIO_TogPortVal+0x5c>
     994:	4f c0       	rjmp	.+158    	; 0xa34 <DIO_TogPortVal+0xe4>
     996:	2c 81       	ldd	r18, Y+4	; 0x04
     998:	3d 81       	ldd	r19, Y+5	; 0x05
     99a:	23 30       	cpi	r18, 0x03	; 3
     99c:	31 05       	cpc	r19, r1
     99e:	41 f1       	breq	.+80     	; 0x9f0 <DIO_TogPortVal+0xa0>
     9a0:	8c 81       	ldd	r24, Y+4	; 0x04
     9a2:	9d 81       	ldd	r25, Y+5	; 0x05
     9a4:	84 30       	cpi	r24, 0x04	; 4
     9a6:	91 05       	cpc	r25, r1
     9a8:	a1 f1       	breq	.+104    	; 0xa12 <DIO_TogPortVal+0xc2>
     9aa:	44 c0       	rjmp	.+136    	; 0xa34 <DIO_TogPortVal+0xe4>
		case PORTA:
			if (READ_REG(DDRA_Register) == PORT_OUTPUT) {
     9ac:	ea e3       	ldi	r30, 0x3A	; 58
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	8f 3f       	cpi	r24, 0xFF	; 255
     9b4:	49 f4       	brne	.+18     	; 0x9c8 <DIO_TogPortVal+0x78>
				TOG_REG(PORTA_Register, value);
     9b6:	ab e3       	ldi	r26, 0x3B	; 59
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	eb e3       	ldi	r30, 0x3B	; 59
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	90 81       	ld	r25, Z
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	89 27       	eor	r24, r25
     9c4:	8c 93       	st	X, r24
     9c6:	3b c0       	rjmp	.+118    	; 0xa3e <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	38 c0       	rjmp	.+112    	; 0xa3e <DIO_TogPortVal+0xee>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PORT_OUTPUT) {
     9ce:	e7 e3       	ldi	r30, 0x37	; 55
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	8f 3f       	cpi	r24, 0xFF	; 255
     9d6:	49 f4       	brne	.+18     	; 0x9ea <DIO_TogPortVal+0x9a>
				TOG_REG(PORTB_Register, value);
     9d8:	a8 e3       	ldi	r26, 0x38	; 56
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	e8 e3       	ldi	r30, 0x38	; 56
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	90 81       	ld	r25, Z
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	89 27       	eor	r24, r25
     9e6:	8c 93       	st	X, r24
     9e8:	2a c0       	rjmp	.+84     	; 0xa3e <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	27 c0       	rjmp	.+78     	; 0xa3e <DIO_TogPortVal+0xee>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PORT_OUTPUT) {
     9f0:	e4 e3       	ldi	r30, 0x34	; 52
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8f 3f       	cpi	r24, 0xFF	; 255
     9f8:	49 f4       	brne	.+18     	; 0xa0c <DIO_TogPortVal+0xbc>
				TOG_REG(PORTC_Register, value);
     9fa:	a5 e3       	ldi	r26, 0x35	; 53
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e5 e3       	ldi	r30, 0x35	; 53
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	90 81       	ld	r25, Z
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	89 27       	eor	r24, r25
     a08:	8c 93       	st	X, r24
     a0a:	19 c0       	rjmp	.+50     	; 0xa3e <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	89 83       	std	Y+1, r24	; 0x01
     a10:	16 c0       	rjmp	.+44     	; 0xa3e <DIO_TogPortVal+0xee>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PORT_OUTPUT) {
     a12:	e1 e3       	ldi	r30, 0x31	; 49
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	8f 3f       	cpi	r24, 0xFF	; 255
     a1a:	49 f4       	brne	.+18     	; 0xa2e <DIO_TogPortVal+0xde>
				TOG_REG(PORTD_Register, value);
     a1c:	a2 e3       	ldi	r26, 0x32	; 50
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e2 e3       	ldi	r30, 0x32	; 50
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	90 81       	ld	r25, Z
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	89 27       	eor	r24, r25
     a2a:	8c 93       	st	X, r24
     a2c:	08 c0       	rjmp	.+16     	; 0xa3e <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <DIO_TogPortVal+0xee>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <DIO_TogPortVal+0xee>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <DIO_SetPinDirection>:
/*main APIs*/
uint8_t DIO_SetPinDirection(uint8_t PortName, uint8_t PinNo,
		uint8_t PinDirection) {
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	28 97       	sbiw	r28, 0x08	; 8
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	8a 83       	std	Y+2, r24	; 0x02
     a66:	6b 83       	std	Y+3, r22	; 0x03
     a68:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     a6a:	19 82       	std	Y+1, r1	; 0x01

	if ((PortName <= PORTD) && (PinNo <= PIN7)) {
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	85 30       	cpi	r24, 0x05	; 5
     a70:	08 f0       	brcs	.+2      	; 0xa74 <DIO_SetPinDirection+0x24>
     a72:	fa c0       	rjmp	.+500    	; 0xc68 <DIO_SetPinDirection+0x218>
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	88 30       	cpi	r24, 0x08	; 8
     a78:	08 f0       	brcs	.+2      	; 0xa7c <DIO_SetPinDirection+0x2c>
     a7a:	f6 c0       	rjmp	.+492    	; 0xc68 <DIO_SetPinDirection+0x218>
		if (PinDirection == PIN_OUTPUT) {
     a7c:	8c 81       	ldd	r24, Y+4	; 0x04
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	09 f0       	breq	.+2      	; 0xa84 <DIO_SetPinDirection+0x34>
     a82:	73 c0       	rjmp	.+230    	; 0xb6a <DIO_SetPinDirection+0x11a>

			switch (PortName) {
     a84:	8a 81       	ldd	r24, Y+2	; 0x02
     a86:	28 2f       	mov	r18, r24
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	38 87       	std	Y+8, r19	; 0x08
     a8c:	2f 83       	std	Y+7, r18	; 0x07
     a8e:	8f 81       	ldd	r24, Y+7	; 0x07
     a90:	98 85       	ldd	r25, Y+8	; 0x08
     a92:	82 30       	cpi	r24, 0x02	; 2
     a94:	91 05       	cpc	r25, r1
     a96:	51 f1       	breq	.+84     	; 0xaec <DIO_SetPinDirection+0x9c>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	23 30       	cpi	r18, 0x03	; 3
     a9e:	31 05       	cpc	r19, r1
     aa0:	34 f4       	brge	.+12     	; 0xaae <DIO_SetPinDirection+0x5e>
     aa2:	8f 81       	ldd	r24, Y+7	; 0x07
     aa4:	98 85       	ldd	r25, Y+8	; 0x08
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	91 05       	cpc	r25, r1
     aaa:	61 f0       	breq	.+24     	; 0xac4 <DIO_SetPinDirection+0x74>
     aac:	5b c0       	rjmp	.+182    	; 0xb64 <DIO_SetPinDirection+0x114>
     aae:	2f 81       	ldd	r18, Y+7	; 0x07
     ab0:	38 85       	ldd	r19, Y+8	; 0x08
     ab2:	23 30       	cpi	r18, 0x03	; 3
     ab4:	31 05       	cpc	r19, r1
     ab6:	71 f1       	breq	.+92     	; 0xb14 <DIO_SetPinDirection+0xc4>
     ab8:	8f 81       	ldd	r24, Y+7	; 0x07
     aba:	98 85       	ldd	r25, Y+8	; 0x08
     abc:	84 30       	cpi	r24, 0x04	; 4
     abe:	91 05       	cpc	r25, r1
     ac0:	e9 f1       	breq	.+122    	; 0xb3c <DIO_SetPinDirection+0xec>
     ac2:	50 c0       	rjmp	.+160    	; 0xb64 <DIO_SetPinDirection+0x114>
			case PORTA:
				SET_BIT(DDRA_Register, PinNo);
     ac4:	aa e3       	ldi	r26, 0x3A	; 58
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	ea e3       	ldi	r30, 0x3A	; 58
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	48 2f       	mov	r20, r24
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	28 2f       	mov	r18, r24
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 2e       	mov	r0, r18
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <DIO_SetPinDirection+0x92>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	0a 94       	dec	r0
     ae4:	e2 f7       	brpl	.-8      	; 0xade <DIO_SetPinDirection+0x8e>
     ae6:	84 2b       	or	r24, r20
     ae8:	8c 93       	st	X, r24
     aea:	c0 c0       	rjmp	.+384    	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				SET_BIT(DDRB_Register, PinNo);
     aec:	a7 e3       	ldi	r26, 0x37	; 55
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	e7 e3       	ldi	r30, 0x37	; 55
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 2e       	mov	r0, r18
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_SetPinDirection+0xba>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_SetPinDirection+0xb6>
     b0e:	84 2b       	or	r24, r20
     b10:	8c 93       	st	X, r24
     b12:	ac c0       	rjmp	.+344    	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				SET_BIT(DDRC_Register, PinNo);
     b14:	a4 e3       	ldi	r26, 0x34	; 52
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e4 e3       	ldi	r30, 0x34	; 52
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	48 2f       	mov	r20, r24
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	28 2f       	mov	r18, r24
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	02 2e       	mov	r0, r18
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <DIO_SetPinDirection+0xe2>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	0a 94       	dec	r0
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <DIO_SetPinDirection+0xde>
     b36:	84 2b       	or	r24, r20
     b38:	8c 93       	st	X, r24
     b3a:	98 c0       	rjmp	.+304    	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				SET_BIT(DDRD_Register, PinNo);
     b3c:	a1 e3       	ldi	r26, 0x31	; 49
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	e1 e3       	ldi	r30, 0x31	; 49
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	48 2f       	mov	r20, r24
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 2e       	mov	r0, r18
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <DIO_SetPinDirection+0x10a>
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	0a 94       	dec	r0
     b5c:	e2 f7       	brpl	.-8      	; 0xb56 <DIO_SetPinDirection+0x106>
     b5e:	84 2b       	or	r24, r20
     b60:	8c 93       	st	X, r24
     b62:	84 c0       	rjmp	.+264    	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	81 c0       	rjmp	.+258    	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			}
		} else if (PinDirection == PIN_INPUT) {
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	88 23       	and	r24, r24
     b6e:	09 f0       	breq	.+2      	; 0xb72 <DIO_SetPinDirection+0x122>
     b70:	78 c0       	rjmp	.+240    	; 0xc62 <DIO_SetPinDirection+0x212>

			switch (PortName) {
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	3e 83       	std	Y+6, r19	; 0x06
     b7a:	2d 83       	std	Y+5, r18	; 0x05
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	9e 81       	ldd	r25, Y+6	; 0x06
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	91 05       	cpc	r25, r1
     b84:	61 f1       	breq	.+88     	; 0xbde <DIO_SetPinDirection+0x18e>
     b86:	2d 81       	ldd	r18, Y+5	; 0x05
     b88:	3e 81       	ldd	r19, Y+6	; 0x06
     b8a:	23 30       	cpi	r18, 0x03	; 3
     b8c:	31 05       	cpc	r19, r1
     b8e:	34 f4       	brge	.+12     	; 0xb9c <DIO_SetPinDirection+0x14c>
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	91 05       	cpc	r25, r1
     b98:	69 f0       	breq	.+26     	; 0xbb4 <DIO_SetPinDirection+0x164>
     b9a:	60 c0       	rjmp	.+192    	; 0xc5c <DIO_SetPinDirection+0x20c>
     b9c:	2d 81       	ldd	r18, Y+5	; 0x05
     b9e:	3e 81       	ldd	r19, Y+6	; 0x06
     ba0:	23 30       	cpi	r18, 0x03	; 3
     ba2:	31 05       	cpc	r19, r1
     ba4:	89 f1       	breq	.+98     	; 0xc08 <DIO_SetPinDirection+0x1b8>
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	84 30       	cpi	r24, 0x04	; 4
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <DIO_SetPinDirection+0x162>
     bb0:	40 c0       	rjmp	.+128    	; 0xc32 <DIO_SetPinDirection+0x1e2>
     bb2:	54 c0       	rjmp	.+168    	; 0xc5c <DIO_SetPinDirection+0x20c>
			case PORTA:
				CLEAR_BIT(DDRA_Register, PinNo);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_SetPinDirection+0x182>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_SetPinDirection+0x17e>
     bd6:	80 95       	com	r24
     bd8:	84 23       	and	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	47 c0       	rjmp	.+142    	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			case PORTB:
				CLEAR_BIT(DDRB_Register, PinNo);
     bde:	a7 e3       	ldi	r26, 0x37	; 55
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e7 e3       	ldi	r30, 0x37	; 55
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_SetPinDirection+0x1ac>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_SetPinDirection+0x1a8>
     c00:	80 95       	com	r24
     c02:	84 23       	and	r24, r20
     c04:	8c 93       	st	X, r24
     c06:	32 c0       	rjmp	.+100    	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			case PORTC:
				CLEAR_BIT(DDRC_Register, PinNo);
     c08:	a4 e3       	ldi	r26, 0x34	; 52
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e4 e3       	ldi	r30, 0x34	; 52
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	48 2f       	mov	r20, r24
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 2e       	mov	r0, r18
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_SetPinDirection+0x1d6>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <DIO_SetPinDirection+0x1d2>
     c2a:	80 95       	com	r24
     c2c:	84 23       	and	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	1d c0       	rjmp	.+58     	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			case PORTD:
				CLEAR_BIT(DDRD_Register, PinNo);
     c32:	a1 e3       	ldi	r26, 0x31	; 49
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e1 e3       	ldi	r30, 0x31	; 49
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_SetPinDirection+0x200>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_SetPinDirection+0x1fc>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <DIO_SetPinDirection+0x21c>
				break;
			}
		}

		else {
			ErrorValue = EXIT_FAILURE;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_SetPinDirection+0x21c>
		}
	}

	else {
		ErrorValue = EXIT_FAILURE;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6e:	28 96       	adiw	r28, 0x08	; 8
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <DIO_WritePin>:
uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	28 97       	sbiw	r28, 0x08	; 8
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	8a 83       	std	Y+2, r24	; 0x02
     c96:	6b 83       	std	Y+3, r22	; 0x03
     c98:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     c9a:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	85 30       	cpi	r24, 0x05	; 5
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <DIO_WritePin+0x24>
     ca2:	0f c2       	rjmp	.+1054   	; 0x10c2 <DIO_WritePin+0x442>
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	88 30       	cpi	r24, 0x08	; 8
     ca8:	08 f0       	brcs	.+2      	; 0xcac <DIO_WritePin+0x2c>
     caa:	0b c2       	rjmp	.+1046   	; 0x10c2 <DIO_WritePin+0x442>
			if (PinValue == PIN_HIGH) {
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <DIO_WritePin+0x34>
     cb2:	fe c0       	rjmp	.+508    	; 0xeb0 <DIO_WritePin+0x230>

				switch (PortName) {
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	38 87       	std	Y+8, r19	; 0x08
     cbc:	2f 83       	std	Y+7, r18	; 0x07
     cbe:	4f 81       	ldd	r20, Y+7	; 0x07
     cc0:	58 85       	ldd	r21, Y+8	; 0x08
     cc2:	42 30       	cpi	r20, 0x02	; 2
     cc4:	51 05       	cpc	r21, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <DIO_WritePin+0x4a>
     cc8:	4e c0       	rjmp	.+156    	; 0xd66 <DIO_WritePin+0xe6>
     cca:	8f 81       	ldd	r24, Y+7	; 0x07
     ccc:	98 85       	ldd	r25, Y+8	; 0x08
     cce:	83 30       	cpi	r24, 0x03	; 3
     cd0:	91 05       	cpc	r25, r1
     cd2:	34 f4       	brge	.+12     	; 0xce0 <DIO_WritePin+0x60>
     cd4:	2f 81       	ldd	r18, Y+7	; 0x07
     cd6:	38 85       	ldd	r19, Y+8	; 0x08
     cd8:	21 30       	cpi	r18, 0x01	; 1
     cda:	31 05       	cpc	r19, r1
     cdc:	71 f0       	breq	.+28     	; 0xcfa <DIO_WritePin+0x7a>
     cde:	e5 c0       	rjmp	.+458    	; 0xeaa <DIO_WritePin+0x22a>
     ce0:	4f 81       	ldd	r20, Y+7	; 0x07
     ce2:	58 85       	ldd	r21, Y+8	; 0x08
     ce4:	43 30       	cpi	r20, 0x03	; 3
     ce6:	51 05       	cpc	r21, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <DIO_WritePin+0x6c>
     cea:	73 c0       	rjmp	.+230    	; 0xdd2 <DIO_WritePin+0x152>
     cec:	8f 81       	ldd	r24, Y+7	; 0x07
     cee:	98 85       	ldd	r25, Y+8	; 0x08
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <DIO_WritePin+0x78>
     cf6:	a3 c0       	rjmp	.+326    	; 0xe3e <DIO_WritePin+0x1be>
     cf8:	d8 c0       	rjmp	.+432    	; 0xeaa <DIO_WritePin+0x22a>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
     cfa:	ea e3       	ldi	r30, 0x3A	; 58
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_WritePin+0x94>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	2a 95       	dec	r18
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_WritePin+0x90>
     d18:	9a 01       	movw	r18, r20
     d1a:	28 23       	and	r18, r24
     d1c:	39 23       	and	r19, r25
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a9 01       	movw	r20, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_WritePin+0xac>
     d28:	55 95       	asr	r21
     d2a:	47 95       	ror	r20
     d2c:	8a 95       	dec	r24
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_WritePin+0xa8>
     d30:	ca 01       	movw	r24, r20
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	a1 f4       	brne	.+40     	; 0xd60 <DIO_WritePin+0xe0>
						SET_BIT(PORTA_Register, PinNo);
     d38:	ab e3       	ldi	r26, 0x3B	; 59
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	eb e3       	ldi	r30, 0x3B	; 59
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 2e       	mov	r0, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_WritePin+0xd6>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <DIO_WritePin+0xd2>
     d5a:	84 2b       	or	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	b3 c1       	rjmp	.+870    	; 0x10c6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	b0 c1       	rjmp	.+864    	; 0x10c6 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
     d66:	e7 e3       	ldi	r30, 0x37	; 55
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_WritePin+0x100>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	2a 95       	dec	r18
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_WritePin+0xfc>
     d84:	9a 01       	movw	r18, r20
     d86:	28 23       	and	r18, r24
     d88:	39 23       	and	r19, r25
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a9 01       	movw	r20, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_WritePin+0x118>
     d94:	55 95       	asr	r21
     d96:	47 95       	ror	r20
     d98:	8a 95       	dec	r24
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_WritePin+0x114>
     d9c:	ca 01       	movw	r24, r20
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	91 05       	cpc	r25, r1
     da2:	a1 f4       	brne	.+40     	; 0xdcc <DIO_WritePin+0x14c>
						SET_BIT(PORTB_Register, PinNo);
     da4:	a8 e3       	ldi	r26, 0x38	; 56
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e8 e3       	ldi	r30, 0x38	; 56
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_WritePin+0x142>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_WritePin+0x13e>
     dc6:	84 2b       	or	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	7d c1       	rjmp	.+762    	; 0x10c6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	7a c1       	rjmp	.+756    	; 0x10c6 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
     dd2:	e4 e3       	ldi	r30, 0x34	; 52
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_WritePin+0x16c>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	2a 95       	dec	r18
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_WritePin+0x168>
     df0:	9a 01       	movw	r18, r20
     df2:	28 23       	and	r18, r24
     df4:	39 23       	and	r19, r25
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a9 01       	movw	r20, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_WritePin+0x184>
     e00:	55 95       	asr	r21
     e02:	47 95       	ror	r20
     e04:	8a 95       	dec	r24
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_WritePin+0x180>
     e08:	ca 01       	movw	r24, r20
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	91 05       	cpc	r25, r1
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <DIO_WritePin+0x1b8>
						SET_BIT(PORTC_Register, PinNo);
     e10:	a5 e3       	ldi	r26, 0x35	; 53
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e5 e3       	ldi	r30, 0x35	; 53
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_WritePin+0x1ae>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_WritePin+0x1aa>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	47 c1       	rjmp	.+654    	; 0x10c6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	44 c1       	rjmp	.+648    	; 0x10c6 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
     e3e:	e1 e3       	ldi	r30, 0x31	; 49
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_WritePin+0x1d8>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	2a 95       	dec	r18
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_WritePin+0x1d4>
     e5c:	9a 01       	movw	r18, r20
     e5e:	28 23       	and	r18, r24
     e60:	39 23       	and	r19, r25
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a9 01       	movw	r20, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_WritePin+0x1f0>
     e6c:	55 95       	asr	r21
     e6e:	47 95       	ror	r20
     e70:	8a 95       	dec	r24
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_WritePin+0x1ec>
     e74:	ca 01       	movw	r24, r20
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <DIO_WritePin+0x224>
						SET_BIT(PORTD_Register, PinNo);
     e7c:	a2 e3       	ldi	r26, 0x32	; 50
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e2 e3       	ldi	r30, 0x32	; 50
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_WritePin+0x21a>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_WritePin+0x216>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	11 c1       	rjmp	.+546    	; 0x10c6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	0e c1       	rjmp	.+540    	; 0x10c6 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	0b c1       	rjmp	.+534    	; 0x10c6 <DIO_WritePin+0x446>
					break;
				}
			} else if (PinValue == PIN_LOW) {
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	88 23       	and	r24, r24
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <DIO_WritePin+0x238>
     eb6:	02 c1       	rjmp	.+516    	; 0x10bc <DIO_WritePin+0x43c>

				switch (PortName) {
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3e 83       	std	Y+6, r19	; 0x06
     ec0:	2d 83       	std	Y+5, r18	; 0x05
     ec2:	4d 81       	ldd	r20, Y+5	; 0x05
     ec4:	5e 81       	ldd	r21, Y+6	; 0x06
     ec6:	42 30       	cpi	r20, 0x02	; 2
     ec8:	51 05       	cpc	r21, r1
     eca:	09 f4       	brne	.+2      	; 0xece <DIO_WritePin+0x24e>
     ecc:	4f c0       	rjmp	.+158    	; 0xf6c <DIO_WritePin+0x2ec>
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	34 f4       	brge	.+12     	; 0xee4 <DIO_WritePin+0x264>
     ed8:	2d 81       	ldd	r18, Y+5	; 0x05
     eda:	3e 81       	ldd	r19, Y+6	; 0x06
     edc:	21 30       	cpi	r18, 0x01	; 1
     ede:	31 05       	cpc	r19, r1
     ee0:	71 f0       	breq	.+28     	; 0xefe <DIO_WritePin+0x27e>
     ee2:	e9 c0       	rjmp	.+466    	; 0x10b6 <DIO_WritePin+0x436>
     ee4:	4d 81       	ldd	r20, Y+5	; 0x05
     ee6:	5e 81       	ldd	r21, Y+6	; 0x06
     ee8:	43 30       	cpi	r20, 0x03	; 3
     eea:	51 05       	cpc	r21, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <DIO_WritePin+0x270>
     eee:	75 c0       	rjmp	.+234    	; 0xfda <DIO_WritePin+0x35a>
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	84 30       	cpi	r24, 0x04	; 4
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <DIO_WritePin+0x27c>
     efa:	a6 c0       	rjmp	.+332    	; 0x1048 <DIO_WritePin+0x3c8>
     efc:	dc c0       	rjmp	.+440    	; 0x10b6 <DIO_WritePin+0x436>
				case PORTA:
					if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
     efe:	ea e3       	ldi	r30, 0x3A	; 58
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_WritePin+0x298>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	2a 95       	dec	r18
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_WritePin+0x294>
     f1c:	9a 01       	movw	r18, r20
     f1e:	28 23       	and	r18, r24
     f20:	39 23       	and	r19, r25
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	a9 01       	movw	r20, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_WritePin+0x2b0>
     f2c:	55 95       	asr	r21
     f2e:	47 95       	ror	r20
     f30:	8a 95       	dec	r24
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_WritePin+0x2ac>
     f34:	ca 01       	movw	r24, r20
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	a9 f4       	brne	.+42     	; 0xf66 <DIO_WritePin+0x2e6>
						CLEAR_BIT(PORTA_Register, PinNo);
     f3c:	ab e3       	ldi	r26, 0x3B	; 59
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_WritePin+0x2da>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_WritePin+0x2d6>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	b0 c0       	rjmp	.+352    	; 0x10c6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	ad c0       	rjmp	.+346    	; 0x10c6 <DIO_WritePin+0x446>
					}
					break;
				case PORTB:
					if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
     f6c:	e7 e3       	ldi	r30, 0x37	; 55
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_WritePin+0x306>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	2a 95       	dec	r18
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_WritePin+0x302>
     f8a:	9a 01       	movw	r18, r20
     f8c:	28 23       	and	r18, r24
     f8e:	39 23       	and	r19, r25
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_WritePin+0x31e>
     f9a:	55 95       	asr	r21
     f9c:	47 95       	ror	r20
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_WritePin+0x31a>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	a9 f4       	brne	.+42     	; 0xfd4 <DIO_WritePin+0x354>
						CLEAR_BIT(PORTB_Register, PinNo);
     faa:	a8 e3       	ldi	r26, 0x38	; 56
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e8 e3       	ldi	r30, 0x38	; 56
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_WritePin+0x348>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_WritePin+0x344>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	79 c0       	rjmp	.+242    	; 0x10c6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	76 c0       	rjmp	.+236    	; 0x10c6 <DIO_WritePin+0x446>
					}
					break;
				case PORTC:
					if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
     fda:	e4 e3       	ldi	r30, 0x34	; 52
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_WritePin+0x374>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	2a 95       	dec	r18
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_WritePin+0x370>
     ff8:	9a 01       	movw	r18, r20
     ffa:	28 23       	and	r18, r24
     ffc:	39 23       	and	r19, r25
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_WritePin+0x38c>
    1008:	55 95       	asr	r21
    100a:	47 95       	ror	r20
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_WritePin+0x388>
    1010:	ca 01       	movw	r24, r20
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	a9 f4       	brne	.+42     	; 0x1042 <DIO_WritePin+0x3c2>
						CLEAR_BIT(PORTC_Register, PinNo);
    1018:	a5 e3       	ldi	r26, 0x35	; 53
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e5 e3       	ldi	r30, 0x35	; 53
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_WritePin+0x3b6>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_WritePin+0x3b2>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	42 c0       	rjmp	.+132    	; 0x10c6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	3f c0       	rjmp	.+126    	; 0x10c6 <DIO_WritePin+0x446>
					}
					break;
				case PORTD:
					if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    1048:	e1 e3       	ldi	r30, 0x31	; 49
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_WritePin+0x3e2>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	2a 95       	dec	r18
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_WritePin+0x3de>
    1066:	9a 01       	movw	r18, r20
    1068:	28 23       	and	r18, r24
    106a:	39 23       	and	r19, r25
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a9 01       	movw	r20, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_WritePin+0x3fa>
    1076:	55 95       	asr	r21
    1078:	47 95       	ror	r20
    107a:	8a 95       	dec	r24
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_WritePin+0x3f6>
    107e:	ca 01       	movw	r24, r20
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	91 05       	cpc	r25, r1
    1084:	a9 f4       	brne	.+42     	; 0x10b0 <DIO_WritePin+0x430>
						CLEAR_BIT(PORTD_Register, PinNo);
    1086:	a2 e3       	ldi	r26, 0x32	; 50
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e2 e3       	ldi	r30, 0x32	; 50
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_WritePin+0x424>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_WritePin+0x420>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	0b c0       	rjmp	.+22     	; 0x10c6 <DIO_WritePin+0x446>
					} else {
						ErrorValue = EXIT_FAILURE;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	08 c0       	rjmp	.+16     	; 0x10c6 <DIO_WritePin+0x446>
					}
					break;
				default:
					ErrorValue = EXIT_FAILURE;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <DIO_WritePin+0x446>
					break;
				}
			} else {
				ErrorValue = EXIT_FAILURE;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_WritePin+0x446>
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	28 96       	adiw	r28, 0x08	; 8
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <DIO_TogglePin>:
uint8_t DIO_TogglePin(uint8_t PortName,uint8_t PinNo)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <DIO_TogglePin+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_TogglePin+0x8>
    10e2:	0f 92       	push	r0
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    10ec:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	85 30       	cpi	r24, 0x05	; 5
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <DIO_TogglePin+0x1c>
    10f4:	02 c1       	rjmp	.+516    	; 0x12fa <DIO_TogglePin+0x220>
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 30       	cpi	r24, 0x08	; 8
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <DIO_TogglePin+0x24>
    10fc:	fe c0       	rjmp	.+508    	; 0x12fa <DIO_TogglePin+0x220>
			switch (PortName) {
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3d 83       	std	Y+5, r19	; 0x05
    1106:	2c 83       	std	Y+4, r18	; 0x04
    1108:	4c 81       	ldd	r20, Y+4	; 0x04
    110a:	5d 81       	ldd	r21, Y+5	; 0x05
    110c:	42 30       	cpi	r20, 0x02	; 2
    110e:	51 05       	cpc	r21, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <DIO_TogglePin+0x3a>
    1112:	4e c0       	rjmp	.+156    	; 0x11b0 <DIO_TogglePin+0xd6>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	91 05       	cpc	r25, r1
    111c:	34 f4       	brge	.+12     	; 0x112a <DIO_TogglePin+0x50>
    111e:	2c 81       	ldd	r18, Y+4	; 0x04
    1120:	3d 81       	ldd	r19, Y+5	; 0x05
    1122:	21 30       	cpi	r18, 0x01	; 1
    1124:	31 05       	cpc	r19, r1
    1126:	71 f0       	breq	.+28     	; 0x1144 <DIO_TogglePin+0x6a>
    1128:	e5 c0       	rjmp	.+458    	; 0x12f4 <DIO_TogglePin+0x21a>
    112a:	4c 81       	ldd	r20, Y+4	; 0x04
    112c:	5d 81       	ldd	r21, Y+5	; 0x05
    112e:	43 30       	cpi	r20, 0x03	; 3
    1130:	51 05       	cpc	r21, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <DIO_TogglePin+0x5c>
    1134:	73 c0       	rjmp	.+230    	; 0x121c <DIO_TogglePin+0x142>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <DIO_TogglePin+0x68>
    1140:	a3 c0       	rjmp	.+326    	; 0x1288 <DIO_TogglePin+0x1ae>
    1142:	d8 c0       	rjmp	.+432    	; 0x12f4 <DIO_TogglePin+0x21a>
			case PORTA:
				if (READ_BIT(DDRA_Register, PinNo) == PIN_OUTPUT) {
    1144:	ea e3       	ldi	r30, 0x3A	; 58
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_TogglePin+0x84>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	2a 95       	dec	r18
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_TogglePin+0x80>
    1162:	9a 01       	movw	r18, r20
    1164:	28 23       	and	r18, r24
    1166:	39 23       	and	r19, r25
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a9 01       	movw	r20, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_TogglePin+0x9c>
    1172:	55 95       	asr	r21
    1174:	47 95       	ror	r20
    1176:	8a 95       	dec	r24
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_TogglePin+0x98>
    117a:	ca 01       	movw	r24, r20
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	a1 f4       	brne	.+40     	; 0x11aa <DIO_TogglePin+0xd0>
					TOG_BIT(PORTA_Register, PinNo);
    1182:	ab e3       	ldi	r26, 0x3B	; 59
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	eb e3       	ldi	r30, 0x3B	; 59
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_TogglePin+0xc6>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_TogglePin+0xc2>
    11a4:	84 27       	eor	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	aa c0       	rjmp	.+340    	; 0x12fe <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	a7 c0       	rjmp	.+334    	; 0x12fe <DIO_TogglePin+0x224>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, PinNo) == PIN_OUTPUT) {
    11b0:	e7 e3       	ldi	r30, 0x37	; 55
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_TogglePin+0xf0>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	2a 95       	dec	r18
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_TogglePin+0xec>
    11ce:	9a 01       	movw	r18, r20
    11d0:	28 23       	and	r18, r24
    11d2:	39 23       	and	r19, r25
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a9 01       	movw	r20, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_TogglePin+0x108>
    11de:	55 95       	asr	r21
    11e0:	47 95       	ror	r20
    11e2:	8a 95       	dec	r24
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_TogglePin+0x104>
    11e6:	ca 01       	movw	r24, r20
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	a1 f4       	brne	.+40     	; 0x1216 <DIO_TogglePin+0x13c>
					TOG_BIT(PORTB_Register, PinNo);
    11ee:	a8 e3       	ldi	r26, 0x38	; 56
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e8 e3       	ldi	r30, 0x38	; 56
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_TogglePin+0x132>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_TogglePin+0x12e>
    1210:	84 27       	eor	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	74 c0       	rjmp	.+232    	; 0x12fe <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	71 c0       	rjmp	.+226    	; 0x12fe <DIO_TogglePin+0x224>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, PinNo) == PIN_OUTPUT) {
    121c:	e4 e3       	ldi	r30, 0x34	; 52
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_TogglePin+0x15c>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	2a 95       	dec	r18
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_TogglePin+0x158>
    123a:	9a 01       	movw	r18, r20
    123c:	28 23       	and	r18, r24
    123e:	39 23       	and	r19, r25
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_TogglePin+0x174>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_TogglePin+0x170>
    1252:	ca 01       	movw	r24, r20
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	a1 f4       	brne	.+40     	; 0x1282 <DIO_TogglePin+0x1a8>
					TOG_BIT(PORTC_Register, PinNo);
    125a:	a5 e3       	ldi	r26, 0x35	; 53
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e5 e3       	ldi	r30, 0x35	; 53
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_TogglePin+0x19e>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_TogglePin+0x19a>
    127c:	84 27       	eor	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	3e c0       	rjmp	.+124    	; 0x12fe <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	3b c0       	rjmp	.+118    	; 0x12fe <DIO_TogglePin+0x224>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, PinNo) == PIN_OUTPUT) {
    1288:	e1 e3       	ldi	r30, 0x31	; 49
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_TogglePin+0x1c8>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	2a 95       	dec	r18
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_TogglePin+0x1c4>
    12a6:	9a 01       	movw	r18, r20
    12a8:	28 23       	and	r18, r24
    12aa:	39 23       	and	r19, r25
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a9 01       	movw	r20, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_TogglePin+0x1e0>
    12b6:	55 95       	asr	r21
    12b8:	47 95       	ror	r20
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_TogglePin+0x1dc>
    12be:	ca 01       	movw	r24, r20
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	a1 f4       	brne	.+40     	; 0x12ee <DIO_TogglePin+0x214>
					TOG_BIT(PORTD_Register, PinNo);
    12c6:	a2 e3       	ldi	r26, 0x32	; 50
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e2 e3       	ldi	r30, 0x32	; 50
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_TogglePin+0x20a>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_TogglePin+0x206>
    12e8:	84 27       	eor	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	08 c0       	rjmp	.+16     	; 0x12fe <DIO_TogglePin+0x224>
				} else {
					ErrorValue = EXIT_FAILURE;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <DIO_TogglePin+0x224>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_TogglePin+0x224>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <DIO_ReadPin>:
uint8_t DIO_ReadPin(uint8_t PortName,uint8_t PinNo,ptr_uint8_t PinData)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	27 97       	sbiw	r28, 0x07	; 7
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	6b 83       	std	Y+3, r22	; 0x03
    1328:	5d 83       	std	Y+5, r21	; 0x05
    132a:	4c 83       	std	Y+4, r20	; 0x04
	Byte RETVAL = EXIT_SUCCESFUL;
    132c:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	85 30       	cpi	r24, 0x05	; 5
    1332:	08 f0       	brcs	.+2      	; 0x1336 <DIO_ReadPin+0x26>
    1334:	a9 c0       	rjmp	.+338    	; 0x1488 <DIO_ReadPin+0x178>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 30       	cpi	r24, 0x08	; 8
    133a:	08 f0       	brcs	.+2      	; 0x133e <DIO_ReadPin+0x2e>
    133c:	a5 c0       	rjmp	.+330    	; 0x1488 <DIO_ReadPin+0x178>

			switch (PortName) {
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3f 83       	std	Y+7, r19	; 0x07
    1346:	2e 83       	std	Y+6, r18	; 0x06
    1348:	4e 81       	ldd	r20, Y+6	; 0x06
    134a:	5f 81       	ldd	r21, Y+7	; 0x07
    134c:	42 30       	cpi	r20, 0x02	; 2
    134e:	51 05       	cpc	r21, r1
    1350:	c1 f1       	breq	.+112    	; 0x13c2 <DIO_ReadPin+0xb2>
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	91 05       	cpc	r25, r1
    135a:	34 f4       	brge	.+12     	; 0x1368 <DIO_ReadPin+0x58>
    135c:	2e 81       	ldd	r18, Y+6	; 0x06
    135e:	3f 81       	ldd	r19, Y+7	; 0x07
    1360:	21 30       	cpi	r18, 0x01	; 1
    1362:	31 05       	cpc	r19, r1
    1364:	71 f0       	breq	.+28     	; 0x1382 <DIO_ReadPin+0x72>
    1366:	8d c0       	rjmp	.+282    	; 0x1482 <DIO_ReadPin+0x172>
    1368:	4e 81       	ldd	r20, Y+6	; 0x06
    136a:	5f 81       	ldd	r21, Y+7	; 0x07
    136c:	43 30       	cpi	r20, 0x03	; 3
    136e:	51 05       	cpc	r21, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <DIO_ReadPin+0x64>
    1372:	47 c0       	rjmp	.+142    	; 0x1402 <DIO_ReadPin+0xf2>
    1374:	8e 81       	ldd	r24, Y+6	; 0x06
    1376:	9f 81       	ldd	r25, Y+7	; 0x07
    1378:	84 30       	cpi	r24, 0x04	; 4
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <DIO_ReadPin+0x70>
    137e:	61 c0       	rjmp	.+194    	; 0x1442 <DIO_ReadPin+0x132>
    1380:	80 c0       	rjmp	.+256    	; 0x1482 <DIO_ReadPin+0x172>
			case PORTA:
				*PinData = READ_BIT(PINA_Register, PinNo);
    1382:	e9 e3       	ldi	r30, 0x39	; 57
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_ReadPin+0x8c>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	2a 95       	dec	r18
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_ReadPin+0x88>
    13a0:	9a 01       	movw	r18, r20
    13a2:	28 23       	and	r18, r24
    13a4:	39 23       	and	r19, r25
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_ReadPin+0xa4>
    13b0:	55 95       	asr	r21
    13b2:	47 95       	ror	r20
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_ReadPin+0xa0>
    13b8:	ca 01       	movw	r24, r20
    13ba:	ec 81       	ldd	r30, Y+4	; 0x04
    13bc:	fd 81       	ldd	r31, Y+5	; 0x05
    13be:	80 83       	st	Z, r24
    13c0:	65 c0       	rjmp	.+202    	; 0x148c <DIO_ReadPin+0x17c>
				break;
			case PORTB:
				*PinData = READ_BIT(PINB_Register, PinNo);
    13c2:	e6 e3       	ldi	r30, 0x36	; 54
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_ReadPin+0xcc>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	2a 95       	dec	r18
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_ReadPin+0xc8>
    13e0:	9a 01       	movw	r18, r20
    13e2:	28 23       	and	r18, r24
    13e4:	39 23       	and	r19, r25
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a9 01       	movw	r20, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_ReadPin+0xe4>
    13f0:	55 95       	asr	r21
    13f2:	47 95       	ror	r20
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_ReadPin+0xe0>
    13f8:	ca 01       	movw	r24, r20
    13fa:	ec 81       	ldd	r30, Y+4	; 0x04
    13fc:	fd 81       	ldd	r31, Y+5	; 0x05
    13fe:	80 83       	st	Z, r24
    1400:	45 c0       	rjmp	.+138    	; 0x148c <DIO_ReadPin+0x17c>
				break;
			case PORTC:
				*PinData = READ_BIT(PINC_Register, PinNo);
    1402:	e3 e3       	ldi	r30, 0x33	; 51
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_ReadPin+0x10c>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	2a 95       	dec	r18
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_ReadPin+0x108>
    1420:	9a 01       	movw	r18, r20
    1422:	28 23       	and	r18, r24
    1424:	39 23       	and	r19, r25
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_ReadPin+0x124>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_ReadPin+0x120>
    1438:	ca 01       	movw	r24, r20
    143a:	ec 81       	ldd	r30, Y+4	; 0x04
    143c:	fd 81       	ldd	r31, Y+5	; 0x05
    143e:	80 83       	st	Z, r24
    1440:	25 c0       	rjmp	.+74     	; 0x148c <DIO_ReadPin+0x17c>
				break;
			case PORTD:
				*PinData = READ_BIT(PIND_Register, PinNo);
    1442:	e0 e3       	ldi	r30, 0x30	; 48
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_ReadPin+0x14c>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	2a 95       	dec	r18
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_ReadPin+0x148>
    1460:	9a 01       	movw	r18, r20
    1462:	28 23       	and	r18, r24
    1464:	39 23       	and	r19, r25
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a9 01       	movw	r20, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_ReadPin+0x164>
    1470:	55 95       	asr	r21
    1472:	47 95       	ror	r20
    1474:	8a 95       	dec	r24
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_ReadPin+0x160>
    1478:	ca 01       	movw	r24, r20
    147a:	ec 81       	ldd	r30, Y+4	; 0x04
    147c:	fd 81       	ldd	r31, Y+5	; 0x05
    147e:	80 83       	st	Z, r24
    1480:	05 c0       	rjmp	.+10     	; 0x148c <DIO_ReadPin+0x17c>
				break;
			default:
				RETVAL = EXIT_FAILURE;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_ReadPin+0x17c>
			}
		} else {
			RETVAL = EXIT_FAILURE;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	89 83       	std	Y+1, r24	; 0x01
		}

		return RETVAL;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
}
    148e:	27 96       	adiw	r28, 0x07	; 7
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <DIO_EnablePinPullup>:
uint8_t DIO_EnablePinPullup(uint8_t PortName,uint8_t PinNo)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <DIO_EnablePinPullup+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <DIO_EnablePinPullup+0x8>
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	8a 83       	std	Y+2, r24	; 0x02
    14b0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    14b2:	19 82       	std	Y+1, r1	; 0x01
		if ((PortName <= PORTD) && (PinNo <= PIN7)) {
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	85 30       	cpi	r24, 0x05	; 5
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <DIO_EnablePinPullup+0x1c>
    14ba:	99 c0       	rjmp	.+306    	; 0x15ee <DIO_EnablePinPullup+0x14e>
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 30       	cpi	r24, 0x08	; 8
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <DIO_EnablePinPullup+0x24>
    14c2:	95 c0       	rjmp	.+298    	; 0x15ee <DIO_EnablePinPullup+0x14e>
			/* Check on the Required PORT Number */
			switch (PortName) {
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3d 83       	std	Y+5, r19	; 0x05
    14cc:	2c 83       	std	Y+4, r18	; 0x04
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	82 30       	cpi	r24, 0x02	; 2
    14d4:	91 05       	cpc	r25, r1
    14d6:	a1 f1       	breq	.+104    	; 0x1540 <DIO_EnablePinPullup+0xa0>
    14d8:	2c 81       	ldd	r18, Y+4	; 0x04
    14da:	3d 81       	ldd	r19, Y+5	; 0x05
    14dc:	23 30       	cpi	r18, 0x03	; 3
    14de:	31 05       	cpc	r19, r1
    14e0:	34 f4       	brge	.+12     	; 0x14ee <DIO_EnablePinPullup+0x4e>
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	91 05       	cpc	r25, r1
    14ea:	71 f0       	breq	.+28     	; 0x1508 <DIO_EnablePinPullup+0x68>
    14ec:	7d c0       	rjmp	.+250    	; 0x15e8 <DIO_EnablePinPullup+0x148>
    14ee:	2c 81       	ldd	r18, Y+4	; 0x04
    14f0:	3d 81       	ldd	r19, Y+5	; 0x05
    14f2:	23 30       	cpi	r18, 0x03	; 3
    14f4:	31 05       	cpc	r19, r1
    14f6:	09 f4       	brne	.+2      	; 0x14fa <DIO_EnablePinPullup+0x5a>
    14f8:	3f c0       	rjmp	.+126    	; 0x1578 <DIO_EnablePinPullup+0xd8>
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	91 05       	cpc	r25, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <DIO_EnablePinPullup+0x66>
    1504:	55 c0       	rjmp	.+170    	; 0x15b0 <DIO_EnablePinPullup+0x110>
    1506:	70 c0       	rjmp	.+224    	; 0x15e8 <DIO_EnablePinPullup+0x148>
			case PORTA:
				if (READ_REG(DDRA_Register) == PIN_INPUT) {
    1508:	ea e3       	ldi	r30, 0x3A	; 58
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	88 23       	and	r24, r24
    1510:	a1 f4       	brne	.+40     	; 0x153a <DIO_EnablePinPullup+0x9a>
					SET_BIT(PORTA_Register, PinNo);
    1512:	ab e3       	ldi	r26, 0x3B	; 59
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e3       	ldi	r30, 0x3B	; 59
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_EnablePinPullup+0x90>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_EnablePinPullup+0x8c>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	5c c0       	rjmp	.+184    	; 0x15f2 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	59 c0       	rjmp	.+178    	; 0x15f2 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTB:
				if (READ_REG(DDRB_Register) == PIN_INPUT) {
    1540:	e7 e3       	ldi	r30, 0x37	; 55
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	88 23       	and	r24, r24
    1548:	a1 f4       	brne	.+40     	; 0x1572 <DIO_EnablePinPullup+0xd2>
					SET_BIT(PORTB_Register, PinNo);
    154a:	a8 e3       	ldi	r26, 0x38	; 56
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e8 e3       	ldi	r30, 0x38	; 56
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_EnablePinPullup+0xc8>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_EnablePinPullup+0xc4>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	40 c0       	rjmp	.+128    	; 0x15f2 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	3d c0       	rjmp	.+122    	; 0x15f2 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTC:
				if (READ_REG(DDRC_Register) == PIN_INPUT) {
    1578:	e4 e3       	ldi	r30, 0x34	; 52
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	88 23       	and	r24, r24
    1580:	a1 f4       	brne	.+40     	; 0x15aa <DIO_EnablePinPullup+0x10a>
					SET_BIT(PORTC_Register, PinNo);
    1582:	a5 e3       	ldi	r26, 0x35	; 53
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e3       	ldi	r30, 0x35	; 53
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_EnablePinPullup+0x100>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_EnablePinPullup+0xfc>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	24 c0       	rjmp	.+72     	; 0x15f2 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	21 c0       	rjmp	.+66     	; 0x15f2 <DIO_EnablePinPullup+0x152>
				}
				break;
			case PORTD:
				if (READ_REG(DDRD_Register) == PIN_INPUT) {
    15b0:	e1 e3       	ldi	r30, 0x31	; 49
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	88 23       	and	r24, r24
    15b8:	a1 f4       	brne	.+40     	; 0x15e2 <DIO_EnablePinPullup+0x142>
					SET_BIT(PORTD_Register, PinNo);
    15ba:	a2 e3       	ldi	r26, 0x32	; 50
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e2 e3       	ldi	r30, 0x32	; 50
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_EnablePinPullup+0x138>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_EnablePinPullup+0x134>
    15dc:	84 2b       	or	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	08 c0       	rjmp	.+16     	; 0x15f2 <DIO_EnablePinPullup+0x152>
				} else {
					ErrorValue = EXIT_FAILURE;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <DIO_EnablePinPullup+0x152>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_EnablePinPullup+0x152>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01
		}
		return ErrorValue;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <PSHBTTN_Init>:
#include "../../MCAL/DIO/DIO_DRIVER.h"
#include "PushButton_TypeDef.h"
#include "PushButton.h"

PSHBTTN_ERROR_RETVAL_t PSHBTTN_Init(DIO_PORT_ID_t port, DIO_PIN_ID_t pin,
		PSHBTTN_PULLUP_Status_t status) {
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	00 d0       	rcall	.+0      	; 0x160a <PSHBTTN_Init+0x6>
    160a:	00 d0       	rcall	.+0      	; 0x160c <PSHBTTN_Init+0x8>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	6b 83       	std	Y+3, r22	; 0x03
    1614:	4c 83       	std	Y+4, r20	; 0x04
	PSHBTTN_ERROR_RETVAL_t retVal = EXIT_SUCCESFUL;
    1616:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinDirection(port, pin, PIN_INPUT);
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	6b 81       	ldd	r22, Y+3	; 0x03
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_SetPinDirection>
	if (!status)
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	88 23       	and	r24, r24
    1626:	21 f4       	brne	.+8      	; 0x1630 <PSHBTTN_Init+0x2c>
		PSHBTTN_EnablePullUp(port, pin);
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	6b 81       	ldd	r22, Y+3	; 0x03
    162c:	0e 94 20 0b 	call	0x1640	; 0x1640 <PSHBTTN_EnablePullUp>
	return retVal;
    1630:	89 81       	ldd	r24, Y+1	; 0x01
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <PSHBTTN_EnablePullUp>:
PSHBTTN_ERROR_RETVAL_t PSHBTTN_EnablePullUp(DIO_PORT_ID_t port,
		DIO_PIN_ID_t pin) {
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <PSHBTTN_EnablePullUp+0x6>
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	8a 83       	std	Y+2, r24	; 0x02
    164e:	6b 83       	std	Y+3, r22	; 0x03
	PSHBTTN_ERROR_RETVAL_t retVal = EXIT_SUCCESFUL;
    1650:	19 82       	std	Y+1, r1	; 0x01
	DIO_EnablePinPullup(port, pin);
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	6b 81       	ldd	r22, Y+3	; 0x03
    1656:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_EnablePinPullup>
	return retVal;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <PSHBTTN_Status>:
Byte PSHBTTN_Status(DIO_PORT_ID_t port, DIO_PIN_ID_t pin) {
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	27 97       	sbiw	r28, 0x07	; 7
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	8e 83       	std	Y+6, r24	; 0x06
    167e:	6f 83       	std	Y+7, r22	; 0x07
	Byte retVal;
	DIO_ReadPin(port, pin, &retVal);
    1680:	8e 81       	ldd	r24, Y+6	; 0x06
    1682:	6f 81       	ldd	r22, Y+7	; 0x07
    1684:	9e 01       	movw	r18, r28
    1686:	2f 5f       	subi	r18, 0xFF	; 255
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	a9 01       	movw	r20, r18
    168c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_ReadPin>
	if (retVal == 0) {
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	88 23       	and	r24, r24
    1694:	31 f5       	brne	.+76     	; 0x16e2 <PSHBTTN_Status+0x7a>
		for (volatile uint16_t i = 0; i < 1000; i++) {
    1696:	1b 82       	std	Y+3, r1	; 0x03
    1698:	1a 82       	std	Y+2, r1	; 0x02
    169a:	15 c0       	rjmp	.+42     	; 0x16c6 <PSHBTTN_Status+0x5e>
			for (volatile uint8_t j = 0; j < 16; j++) {
    169c:	1c 82       	std	Y+4, r1	; 0x04
    169e:	0b c0       	rjmp	.+22     	; 0x16b6 <PSHBTTN_Status+0x4e>
				for (volatile uint8_t k = 0; k < 20; k++)
    16a0:	1d 82       	std	Y+5, r1	; 0x05
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <PSHBTTN_Status+0x42>
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	84 31       	cpi	r24, 0x14	; 20
    16ae:	d0 f3       	brcs	.-12     	; 0x16a4 <PSHBTTN_Status+0x3c>
Byte PSHBTTN_Status(DIO_PORT_ID_t port, DIO_PIN_ID_t pin) {
	Byte retVal;
	DIO_ReadPin(port, pin, &retVal);
	if (retVal == 0) {
		for (volatile uint16_t i = 0; i < 1000; i++) {
			for (volatile uint8_t j = 0; j < 16; j++) {
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
    16b4:	8c 83       	std	Y+4, r24	; 0x04
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	80 31       	cpi	r24, 0x10	; 16
    16ba:	90 f3       	brcs	.-28     	; 0x16a0 <PSHBTTN_Status+0x38>
}
Byte PSHBTTN_Status(DIO_PORT_ID_t port, DIO_PIN_ID_t pin) {
	Byte retVal;
	DIO_ReadPin(port, pin, &retVal);
	if (retVal == 0) {
		for (volatile uint16_t i = 0; i < 1000; i++) {
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	9b 81       	ldd	r25, Y+3	; 0x03
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	9b 83       	std	Y+3, r25	; 0x03
    16c4:	8a 83       	std	Y+2, r24	; 0x02
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ca:	23 e0       	ldi	r18, 0x03	; 3
    16cc:	88 3e       	cpi	r24, 0xE8	; 232
    16ce:	92 07       	cpc	r25, r18
    16d0:	28 f3       	brcs	.-54     	; 0x169c <PSHBTTN_Status+0x34>
			for (volatile uint8_t j = 0; j < 16; j++) {
				for (volatile uint8_t k = 0; k < 20; k++)
					;
			}
		} //dummy delay for 20ms
		DIO_ReadPin(port, pin, &retVal);
    16d2:	8e 81       	ldd	r24, Y+6	; 0x06
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	9e 01       	movw	r18, r28
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	a9 01       	movw	r20, r18
    16de:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_ReadPin>
	}
	return retVal;
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e4:	27 96       	adiw	r28, 0x07	; 7
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <led_init>:
#include "../../MCAL/DIO/DIO_DRIVER.h"
#include "LED.h"


void led_init(DIO_PORT_ID_t port, DIO_PIN_ID_t pin)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <led_init+0x6>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	6a 83       	std	Y+2, r22	; 0x02
	DIO_SetPinDirection(port, pin, PIN_OUTPUT);
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	6a 81       	ldd	r22, Y+2	; 0x02
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_SetPinDirection>
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <led_togling>:
void led_togling(DIO_PORT_ID_t port, DIO_PIN_ID_t pin)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <led_togling+0x6>
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	6a 83       	std	Y+2, r22	; 0x02
	DIO_TogglePin(port, pin);
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	6a 81       	ldd	r22, Y+2	; 0x02
    172a:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_TogglePin>
}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <LED_On>:
void LED_On(DIO_PORT_ID_t port, DIO_PIN_ID_t pin){
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <LED_On+0x6>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	6a 83       	std	Y+2, r22	; 0x02
DIO_WritePin(port, pin, PIN_HIGH);
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	6a 81       	ldd	r22, Y+2	; 0x02
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_WritePin>
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <LED_Off>:
void LED_Off(DIO_PORT_ID_t port, DIO_PIN_ID_t pin){
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <LED_Off+0x6>
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	6a 83       	std	Y+2, r22	; 0x02
	DIO_WritePin(port, pin, PIN_LOW);
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	6a 81       	ldd	r22, Y+2	; 0x02
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_WritePin>
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <APP_Init>:
#include "../HAL/LED/LED.h"
#include "APP.h"
uint8_t chararr[255]="ahmed";
uint8_t *words[4]= {(uint8_t*)"START",(uint8_t*)"STOP",(uint8_t*)"WAIT",(uint8_t*)"AT"};
void APP_Init()
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	UART_Init(UARTChannel_1);
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
	led_init(LEDS_PORT, RED_LED_PIN);
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	62 e0       	ldi	r22, 0x02	; 2
    178e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <led_init>
	led_init(LEDS_PORT, YELLOW_LED_PIN);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <led_init>
	led_init(LEDS_PORT, GREEN_LED_PIN);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <led_init>
	LED_Off(LEDS_PORT,GREEN_LED_PIN);
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
	LED_Off(LEDS_PORT,YELLOW_LED_PIN);
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
	LED_Off(LEDS_PORT,RED_LED_PIN);
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	62 e0       	ldi	r22, 0x02	; 2
    17b6:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
}
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <APP_Start>:
void APP_Start()
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <APP_Start+0x6>
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t state;
	while(UART_ReceiveString(UARTChannel_1, chararr)!= OperationSuccess);
    17cc:	25 ea       	ldi	r18, 0xA5	; 165
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	b9 01       	movw	r22, r18
    17d4:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_ReceiveString>
    17d8:	88 23       	and	r24, r24
    17da:	c1 f7       	brne	.-16     	; 0x17cc <APP_Start+0xc>
	state = String_CMP(chararr,words);
    17dc:	85 ea       	ldi	r24, 0xA5	; 165
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	24 ea       	ldi	r18, 0xA4	; 164
    17e2:	31 e0       	ldi	r19, 0x01	; 1
    17e4:	b9 01       	movw	r22, r18
    17e6:	0e 94 6f 0c 	call	0x18de	; 0x18de <String_CMP>
    17ea:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3b 83       	std	Y+3, r19	; 0x03
    17f4:	2a 83       	std	Y+2, r18	; 0x02
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	59 f1       	breq	.+86     	; 0x1856 <APP_Start+0x96>
    1800:	2a 81       	ldd	r18, Y+2	; 0x02
    1802:	3b 81       	ldd	r19, Y+3	; 0x03
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	2c f4       	brge	.+10     	; 0x1814 <APP_Start+0x54>
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	69 f0       	breq	.+26     	; 0x182c <APP_Start+0x6c>
    1812:	5f c0       	rjmp	.+190    	; 0x18d2 <APP_Start+0x112>
    1814:	2a 81       	ldd	r18, Y+2	; 0x02
    1816:	3b 81       	ldd	r19, Y+3	; 0x03
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	89 f1       	breq	.+98     	; 0x1880 <APP_Start+0xc0>
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	91 05       	cpc	r25, r1
    1826:	09 f4       	brne	.+2      	; 0x182a <APP_Start+0x6a>
    1828:	40 c0       	rjmp	.+128    	; 0x18aa <APP_Start+0xea>
    182a:	53 c0       	rjmp	.+166    	; 0x18d2 <APP_Start+0x112>
	{
	case 0:
		LED_On(LEDS_PORT,GREEN_LED_PIN);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LED_On>
		LED_Off(LEDS_PORT,YELLOW_LED_PIN);
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		LED_Off(LEDS_PORT,RED_LED_PIN);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	62 e0       	ldi	r22, 0x02	; 2
    1840:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		while(UART_TransmitString(UARTChannel_1, (uint8_t*)"Green LED is on")!=OperationSuccess);
    1844:	23 e7       	ldi	r18, 0x73	; 115
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	b9 01       	movw	r22, r18
    184c:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    1850:	88 23       	and	r24, r24
    1852:	c1 f7       	brne	.-16     	; 0x1844 <APP_Start+0x84>
    1854:	3e c0       	rjmp	.+124    	; 0x18d2 <APP_Start+0x112>
		break;
	case 1:
		LED_Off(LEDS_PORT,GREEN_LED_PIN);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		LED_Off(LEDS_PORT,YELLOW_LED_PIN);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		LED_On(LEDS_PORT,RED_LED_PIN);
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	62 e0       	ldi	r22, 0x02	; 2
    186a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LED_On>
		while(UART_TransmitString(UARTChannel_1, (uint8_t*)"Red LED is on")!=OperationSuccess);
    186e:	23 e8       	ldi	r18, 0x83	; 131
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	b9 01       	movw	r22, r18
    1876:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    187a:	88 23       	and	r24, r24
    187c:	c1 f7       	brne	.-16     	; 0x186e <APP_Start+0xae>
    187e:	29 c0       	rjmp	.+82     	; 0x18d2 <APP_Start+0x112>
		break;
	case 2:
		LED_Off(LEDS_PORT,GREEN_LED_PIN);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		LED_On(LEDS_PORT,YELLOW_LED_PIN);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LED_On>
		LED_Off(LEDS_PORT,RED_LED_PIN);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		while(UART_TransmitString(UARTChannel_1, (uint8_t*)"Yellow LED is on")!=OperationSuccess);
    1898:	21 e9       	ldi	r18, 0x91	; 145
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	b9 01       	movw	r22, r18
    18a0:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    18a4:	88 23       	and	r24, r24
    18a6:	c1 f7       	brne	.-16     	; 0x1898 <APP_Start+0xd8>
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <APP_Start+0x112>
		break;
	case 3:
		LED_Off(LEDS_PORT,GREEN_LED_PIN);
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		LED_Off(LEDS_PORT,YELLOW_LED_PIN);
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		LED_Off(LEDS_PORT,RED_LED_PIN);
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	62 e0       	ldi	r22, 0x02	; 2
    18be:	0e 94 ad 0b 	call	0x175a	; 0x175a <LED_Off>
		while(UART_TransmitString(UARTChannel_1, (uint8_t*)"OK")!=OperationSuccess);
    18c2:	22 ea       	ldi	r18, 0xA2	; 162
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	b9 01       	movw	r22, r18
    18ca:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    18ce:	88 23       	and	r24, r24
    18d0:	c1 f7       	brne	.-16     	; 0x18c2 <APP_Start+0x102>
		break;
	default:
		break;
	}
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <String_CMP>:
uint8_t String_CMP(ptr_uint8_t arrayofcharacters, ptr_uint8_t *arrayofwords)//String compare
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	28 97       	sbiw	r28, 0x08	; 8
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03
    18f6:	7e 83       	std	Y+6, r23	; 0x06
    18f8:	6d 83       	std	Y+5, r22	; 0x05
	for(uint8_t Iterator = 0; Iterator <= 3; Iterator++) {
    18fa:	1a 82       	std	Y+2, r1	; 0x02
    18fc:	56 c0       	rjmp	.+172    	; 0x19aa <String_CMP+0xcc>
			for(uint8_t Iterator1 = 0; Iterator1 <= 255; Iterator1++)
    18fe:	19 82       	std	Y+1, r1	; 0x01
			{
				if(arrayofcharacters[Iterator1]==arrayofwords[Iterator][Iterator1])
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	fc 01       	movw	r30, r24
    190c:	e2 0f       	add	r30, r18
    190e:	f3 1f       	adc	r31, r19
    1910:	40 81       	ld	r20, Z
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9c 01       	movw	r18, r24
    191a:	22 0f       	add	r18, r18
    191c:	33 1f       	adc	r19, r19
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	fc 01       	movw	r30, r24
    1924:	e2 0f       	add	r30, r18
    1926:	f3 1f       	adc	r31, r19
    1928:	20 81       	ld	r18, Z
    192a:	31 81       	ldd	r19, Z+1	; 0x01
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	f9 01       	movw	r30, r18
    1934:	e8 0f       	add	r30, r24
    1936:	f9 1f       	adc	r31, r25
    1938:	80 81       	ld	r24, Z
    193a:	48 17       	cp	r20, r24
    193c:	29 f5       	brne	.+74     	; 0x1988 <String_CMP+0xaa>
				{
//					if(Iterator==0)
//						while(UART_TransmitString(UARTChannel_1, (uint8_t*)"iterating")!=OperationSuccess);
					if(arrayofcharacters[Iterator1]=='\0'&&arrayofwords[Iterator][Iterator1]=='\0')
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	fc 01       	movw	r30, r24
    194a:	e2 0f       	add	r30, r18
    194c:	f3 1f       	adc	r31, r19
    194e:	80 81       	ld	r24, Z
    1950:	88 23       	and	r24, r24
    1952:	39 f5       	brne	.+78     	; 0x19a2 <String_CMP+0xc4>
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9c 01       	movw	r18, r24
    195c:	22 0f       	add	r18, r18
    195e:	33 1f       	adc	r19, r19
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	fc 01       	movw	r30, r24
    1966:	e2 0f       	add	r30, r18
    1968:	f3 1f       	adc	r31, r19
    196a:	20 81       	ld	r18, Z
    196c:	31 81       	ldd	r19, Z+1	; 0x01
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	f9 01       	movw	r30, r18
    1976:	e8 0f       	add	r30, r24
    1978:	f9 1f       	adc	r31, r25
    197a:	80 81       	ld	r24, Z
    197c:	88 23       	and	r24, r24
    197e:	89 f4       	brne	.+34     	; 0x19a2 <String_CMP+0xc4>
						return Iterator;
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	88 87       	std	Y+8, r24	; 0x08
					break;
				}
			}
	}

}
    1984:	88 85       	ldd	r24, Y+8	; 0x08
    1986:	15 c0       	rjmp	.+42     	; 0x19b2 <String_CMP+0xd4>
					else
						continue;
				}
				else
				{
					if(arrayofcharacters[Iterator1]=='\0'||arrayofwords[Iterator][Iterator1]=='\0')
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	fc 01       	movw	r30, r24
    1994:	e2 0f       	add	r30, r18
    1996:	f3 1f       	adc	r31, r19
    1998:	80 81       	ld	r24, Z
		break;
	}
}
uint8_t String_CMP(ptr_uint8_t arrayofcharacters, ptr_uint8_t *arrayofwords)//String compare
{
	for(uint8_t Iterator = 0; Iterator <= 3; Iterator++) {
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	8f 5f       	subi	r24, 0xFF	; 255
    199e:	8a 83       	std	Y+2, r24	; 0x02
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <String_CMP+0xcc>
			for(uint8_t Iterator1 = 0; Iterator1 <= 255; Iterator1++)
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	ab cf       	rjmp	.-170    	; 0x1900 <String_CMP+0x22>
		break;
	}
}
uint8_t String_CMP(ptr_uint8_t arrayofcharacters, ptr_uint8_t *arrayofwords)//String compare
{
	for(uint8_t Iterator = 0; Iterator <= 3; Iterator++) {
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	08 f4       	brcc	.+2      	; 0x19b2 <String_CMP+0xd4>
    19b0:	a6 cf       	rjmp	.-180    	; 0x18fe <String_CMP+0x20>
					break;
				}
			}
	}

}
    19b2:	28 96       	adiw	r28, 0x08	; 8
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <main>:
#include "Infrastructure/LIB/Bit Operations.h"
#include "MCAL/DIO/DIO_DRIVER_TypeDef.h"
#include "MCAL/DIO/DIO_DRIVER.h"
#include "MCAL/UART/UART.h"
#include "APP/APP.h"
int main() {
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	APP_Init();
    19cc:	0e 94 be 0b 	call	0x177c	; 0x177c <APP_Init>

	while (1) {
		APP_Start();
    19d0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <APP_Start>
    19d4:	fd cf       	rjmp	.-6      	; 0x19d0 <main+0xc>

000019d6 <_exit>:
    19d6:	f8 94       	cli

000019d8 <__stop_program>:
    19d8:	ff cf       	rjmp	.-2      	; 0x19d8 <__stop_program>
