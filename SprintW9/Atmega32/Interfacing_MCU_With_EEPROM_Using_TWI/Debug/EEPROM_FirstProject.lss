
EEPROM_FirstProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  000021f8  0000228c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  0080010e  0080010e  0000233a  2**0
                  ALLOC
  3 .stab         000030c0  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e70  00000000  00000000  000053fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_13>
      38:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_14>
      3c:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 31       	cpi	r26, 0x1A	; 26
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 10 	call	0x2160	; 0x2160 <main>
      8a:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
void static (*UART_TX_Complete_callback)(void)=NULL;
void __vector_13(void)__attribute__((signal,used));//RX_complete
void __vector_14(void)__attribute__((signal,used));//UDRE Empty
void __vector_15(void)__attribute__((signal,used));//TX_complete
//void static (*PtrToFunction)(void);
uint8_t UART_Init(uint8_t UartNumber) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_Init+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ErrRetVal = OperationStarted;
      9e:	8f ef       	ldi	r24, 0xFF	; 255
      a0:	89 83       	std	Y+1, r24	; 0x01
	if (UartNumber > NumOfUARTChannels) {
      a2:	8a 81       	ldd	r24, Y+2	; 0x02
      a4:	82 30       	cpi	r24, 0x02	; 2
      a6:	18 f0       	brcs	.+6      	; 0xae <UART_Init+0x1c>
		//error uart channel out of range
		ErrRetVal = Unavailable_UART_Channel;
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	89 83       	std	Y+1, r24	; 0x01
      ac:	67 c0       	rjmp	.+206    	; 0x17c <UART_Init+0xea>
	} else {
		/* configure control and status register A
		 * (double transmission speed & Multi-processor communication mode) */
		MODIFY_REG(UART_ControlStatusRegA, UART_DoubleTransmissionSpeed_MSK,
      ae:	ab e2       	ldi	r26, 0x2B	; 43
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	eb e2       	ldi	r30, 0x2B	; 43
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	82 60       	ori	r24, 0x02	; 2
      ba:	8c 93       	st	X, r24
				DoubleSpeedTransmission<<UART_DoubleTransmissionSpeed_BIT);
		MODIFY_REG(UART_ControlStatusRegA,
      bc:	ab e2       	ldi	r26, 0x2B	; 43
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	eb e2       	ldi	r30, 0x2B	; 43
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	8e 7f       	andi	r24, 0xFE	; 254
      c8:	8c 93       	st	X, r24
				UART_MultiProcessorCommunicationMode_MSK,
				MultiProcessCommunicationMode<<UART_MultiProcessorCommunicationMode_BIT);

		/* Setting Uart Data Size */
		MODIFY_REG(UART_ControlStatusRegB, UART_CharacterSizeBit_2_MSK,
      ca:	aa e2       	ldi	r26, 0x2A	; 42
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	ea e2       	ldi	r30, 0x2A	; 42
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8b 7f       	andi	r24, 0xFB	; 251
      d6:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,2)<<UART_CharacterSizeBit_2_BIT);
		SET_BIT(UART_ControlStatusRegC, UART_RegisterSelect_BIT);
      d8:	a0 e4       	ldi	r26, 0x40	; 64
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e0 e4       	ldi	r30, 0x40	; 64
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	8c 93       	st	X, r24
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_1_MSK,
      e6:	a0 e4       	ldi	r26, 0x40	; 64
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e0 e4       	ldi	r30, 0x40	; 64
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,1)<<UART_CharacterSizeBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_CharacterSizeBit_0_MSK,
      f4:	a0 e4       	ldi	r26, 0x40	; 64
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e0 e4       	ldi	r30, 0x40	; 64
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	82 60       	ori	r24, 0x02	; 2
     100:	8c 93       	st	X, r24
				READ_BIT(Uart_DataSize,0)<<UART_CharacterSizeBit_0_BIT);

		/* setting Stop Bit */
		MODIFY_REG(UART_ControlStatusRegC, UART_StopBitSelect_MSK,
     102:	a0 e4       	ldi	r26, 0x40	; 64
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	e0 e4       	ldi	r30, 0x40	; 64
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	87 7f       	andi	r24, 0xF7	; 247
     10e:	8c 93       	st	X, r24
				StopBitMode<<UART_StopBitSelect_BIT);

		/* Setting Parity mode */
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_1_MSK,
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e0 e4       	ldi	r30, 0x40	; 64
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8f 7d       	andi	r24, 0xDF	; 223
     11c:	8c 93       	st	X, r24
				READ_BIT(ParityMode,1)<<UART_ParityModeSelectBit_1_BIT);
		MODIFY_REG(UART_ControlStatusRegC, UART_ParityModeSelectBit_0_MSK,
     11e:	a0 e4       	ldi	r26, 0x40	; 64
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e0 e4       	ldi	r30, 0x40	; 64
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8f 7e       	andi	r24, 0xEF	; 239
     12a:	8c 93       	st	X, r24
				READ_BIT(ParityMode,0)<<UART_ParityModeSelectBit_0_BIT);
		/* Setting communication mode (synch. or Asynch.)*/
		MODIFY_REG(UART_ControlStatusRegC, UART_SynchAsynchModeSelect_MSK,
     12c:	a0 e4       	ldi	r26, 0x40	; 64
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	e0 e4       	ldi	r30, 0x40	; 64
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8f 7b       	andi	r24, 0xBF	; 191
     138:	8c 93       	st	X, r24
				CommunicationMode<<UART_SynchAsynchModeSelect_BIT);

		/*Set Clock Poalrity*/
		// ignored as all our work is asynchronus communication mode.
		/*Set the value of baud rate register*/
		CLEAR_BIT(UART_BaudRateRegH,UART_RegisterSelect_BIT);
     13a:	a0 e4       	ldi	r26, 0x40	; 64
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	e0 e4       	ldi	r30, 0x40	; 64
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	8f 77       	andi	r24, 0x7F	; 127
     146:	8c 93       	st	X, r24
		MODIFY_REG(UART_BaudRateRegH, UART_BaudRateRegH_MSK, (BaudCalc(BaudRate)>>8)&0x0F);
     148:	a0 e4       	ldi	r26, 0x40	; 64
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e0 e4       	ldi	r30, 0x40	; 64
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	8c 93       	st	X, r24
		WRITE_REG(UART_BaudRateRegL,BaudCalc(BaudRate)&0xFF);
     156:	e9 e2       	ldi	r30, 0x29	; 41
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	87 e6       	ldi	r24, 0x67	; 103
     15c:	80 83       	st	Z, r24

		/* Enabling receiving and transmitting*/
		MODIFY_REG(UART_ControlStatusRegB, UART_ReceiveEnable_MSK,
     15e:	aa e2       	ldi	r26, 0x2A	; 42
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ea e2       	ldi	r30, 0x2A	; 42
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	80 61       	ori	r24, 0x10	; 16
     16a:	8c 93       	st	X, r24
				UART_ReceiveEnable_MSK);
		MODIFY_REG(UART_ControlStatusRegB, UART_TransmissionEnable_MSK,
     16c:	aa e2       	ldi	r26, 0x2A	; 42
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ea e2       	ldi	r30, 0x2A	; 42
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	88 60       	ori	r24, 0x08	; 8
     178:	8c 93       	st	X, r24
				UART_TransmissionEnable_MSK);
		ErrRetVal = OperationSuccess;
     17a:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrRetVal;
     17c:	89 81       	ldd	r24, Y+1	; 0x01
}
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	cf 91       	pop	r28
     184:	df 91       	pop	r29
     186:	08 95       	ret

00000188 <UART_FlushReceiveBuffer>:
uint8_t UART_FlushReceiveBuffer(void) {
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	00 d0       	rcall	.+0      	; 0x18e <UART_FlushReceiveBuffer+0x6>
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
     192:	8f ef       	ldi	r24, 0xFF	; 255
     194:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flushedCharacter;
	flushedCharacter = UART_DataReg;
     196:	ec e2       	ldi	r30, 0x2C	; 44
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = OperationSuccess;
     19e:	1a 82       	std	Y+2, r1	; 0x02
	return ErrRetVal;
     1a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	cf 91       	pop	r28
     1a8:	df 91       	pop	r29
     1aa:	08 95       	ret

000001ac <UART_TransmitChar>:

uint8_t UART_TransmitChar(uint8_t UartNumber, uint8_t TxChar) {
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <UART_TransmitChar+0x6>
     1b2:	0f 92       	push	r0
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	8a 83       	std	Y+2, r24	; 0x02
     1ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     1bc:	8f ef       	ldi	r24, 0xFF	; 255
     1be:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA, 5)) {
     1c0:	eb e2       	ldi	r30, 0x2B	; 43
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	88 2f       	mov	r24, r24
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	80 72       	andi	r24, 0x20	; 32
     1cc:	90 70       	andi	r25, 0x00	; 0
     1ce:	95 95       	asr	r25
     1d0:	87 95       	ror	r24
     1d2:	95 95       	asr	r25
     1d4:	87 95       	ror	r24
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	95 95       	asr	r25
     1dc:	87 95       	ror	r24
     1de:	95 95       	asr	r25
     1e0:	87 95       	ror	r24
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	31 f0       	breq	.+12     	; 0x1f2 <UART_TransmitChar+0x46>
		UART_DataReg= TxChar;
     1e6:	ec e2       	ldi	r30, 0x2C	; 44
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	8b 81       	ldd	r24, Y+3	; 0x03
     1ec:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     1ee:	19 82       	std	Y+1, r1	; 0x01
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <UART_TransmitChar+0x4a>
	}
	else
	{
		ErrRetVal = Transmission_Fail;
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	08 95       	ret

00000204 <UART_ReceiveChar>:
uint8_t UART_ReceiveChar(uint8_t UartNumber, ptr_uint8_t RxChar) {
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	00 d0       	rcall	.+0      	; 0x20a <UART_ReceiveChar+0x6>
     20a:	00 d0       	rcall	.+0      	; 0x20c <UART_ReceiveChar+0x8>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	8a 83       	std	Y+2, r24	; 0x02
     212:	7c 83       	std	Y+4, r23	; 0x04
     214:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     216:	8f ef       	ldi	r24, 0xFF	; 255
     218:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UART_ControlStatusRegA,7) == 1) {
     21a:	eb e2       	ldi	r30, 0x2B	; 43
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	88 1f       	adc	r24, r24
     222:	88 27       	eor	r24, r24
     224:	88 1f       	adc	r24, r24
     226:	88 2f       	mov	r24, r24
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 70       	andi	r25, 0x00	; 0
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	91 05       	cpc	r25, r1
     230:	41 f4       	brne	.+16     	; 0x242 <UART_ReceiveChar+0x3e>
		*RxChar = UART_DataReg;
     232:	ec e2       	ldi	r30, 0x2C	; 44
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	eb 81       	ldd	r30, Y+3	; 0x03
     23a:	fc 81       	ldd	r31, Y+4	; 0x04
     23c:	80 83       	st	Z, r24
		ErrRetVal = OperationSuccess;
     23e:	19 82       	std	Y+1, r1	; 0x01
     240:	02 c0       	rjmp	.+4      	; 0x246 <UART_ReceiveChar+0x42>
	}
	else
	{
		ErrRetVal = Receiving_Fail;
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     246:	89 81       	ldd	r24, Y+1	; 0x01
}
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	08 95       	ret

00000256 <UART_TransmitString>:

uint8_t UART_TransmitString(uint8_t UartNumber, ptr_uint8_t TxString)
{
     256:	df 93       	push	r29
     258:	cf 93       	push	r28
     25a:	00 d0       	rcall	.+0      	; 0x25c <UART_TransmitString+0x6>
     25c:	00 d0       	rcall	.+0      	; 0x25e <UART_TransmitString+0x8>
     25e:	0f 92       	push	r0
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	8b 83       	std	Y+3, r24	; 0x03
     266:	7d 83       	std	Y+5, r23	; 0x05
     268:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     26e:	19 82       	std	Y+1, r1	; 0x01
	while(iterator <= 255)
	{
		if(*TxString=='\0')
     270:	ec 81       	ldd	r30, Y+4	; 0x04
     272:	fd 81       	ldd	r31, Y+5	; 0x05
     274:	80 81       	ld	r24, Z
     276:	88 23       	and	r24, r24
     278:	81 f4       	brne	.+32     	; 0x29a <UART_TransmitString+0x44>
		{
			ErrRetVal=OperationSuccess;
     27a:	1a 82       	std	Y+2, r1	; 0x02
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	6d e0       	ldi	r22, 0x0D	; 13
     280:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
     284:	88 23       	and	r24, r24
     286:	d1 f7       	brne	.-12     	; 0x27c <UART_TransmitString+0x26>
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
			iterator++;
			TxString++;
		}
	}
	return ErrRetVal;
     288:	8a 81       	ldd	r24, Y+2	; 0x02
}
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret
			while(UART_TransmitChar(UartNumber,'\r')!=OperationSuccess);
			break;
		}
		else
		{
			while(UART_TransmitChar(UartNumber,*TxString)!=OperationSuccess);
     29a:	ec 81       	ldd	r30, Y+4	; 0x04
     29c:	fd 81       	ldd	r31, Y+5	; 0x05
     29e:	90 81       	ld	r25, Z
     2a0:	8b 81       	ldd	r24, Y+3	; 0x03
     2a2:	69 2f       	mov	r22, r25
     2a4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
     2a8:	88 23       	and	r24, r24
     2aa:	b9 f7       	brne	.-18     	; 0x29a <UART_TransmitString+0x44>
			iterator++;
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	8f 5f       	subi	r24, 0xFF	; 255
     2b0:	89 83       	std	Y+1, r24	; 0x01
			TxString++;
     2b2:	8c 81       	ldd	r24, Y+4	; 0x04
     2b4:	9d 81       	ldd	r25, Y+5	; 0x05
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	9d 83       	std	Y+5, r25	; 0x05
     2ba:	8c 83       	std	Y+4, r24	; 0x04
     2bc:	d9 cf       	rjmp	.-78     	; 0x270 <UART_TransmitString+0x1a>

000002be <UART_ReceiveString>:
		}
	}
	return ErrRetVal;
}
uint8_t UART_ReceiveString(uint8_t UartNumber, ptr_uint8_t RxString) {
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <UART_ReceiveString+0x6>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <UART_ReceiveString+0x8>
     2c6:	0f 92       	push	r0
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	8b 83       	std	Y+3, r24	; 0x03
     2ce:	7d 83       	std	Y+5, r23	; 0x05
     2d0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator = 0;
     2d6:	19 82       	std	Y+1, r1	; 0x01
	while(iterator<=255)
	{
		if(UART_ReceiveChar(UartNumber,RxString)==OperationSuccess)
     2d8:	2c 81       	ldd	r18, Y+4	; 0x04
     2da:	3d 81       	ldd	r19, Y+5	; 0x05
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	b9 01       	movw	r22, r18
     2e0:	0e 94 02 01 	call	0x204	; 0x204 <UART_ReceiveChar>
     2e4:	88 23       	and	r24, r24
     2e6:	c1 f7       	brne	.-16     	; 0x2d8 <UART_ReceiveString+0x1a>
		{
			if(*RxString == '\r' || *RxString == '\n')
     2e8:	ec 81       	ldd	r30, Y+4	; 0x04
     2ea:	fd 81       	ldd	r31, Y+5	; 0x05
     2ec:	80 81       	ld	r24, Z
     2ee:	8d 30       	cpi	r24, 0x0D	; 13
     2f0:	29 f0       	breq	.+10     	; 0x2fc <UART_ReceiveString+0x3e>
     2f2:	ec 81       	ldd	r30, Y+4	; 0x04
     2f4:	fd 81       	ldd	r31, Y+5	; 0x05
     2f6:	80 81       	ld	r24, Z
     2f8:	8a 30       	cpi	r24, 0x0A	; 10
     2fa:	69 f4       	brne	.+26     	; 0x316 <UART_ReceiveString+0x58>
			{
				*RxString='\0';
     2fc:	ec 81       	ldd	r30, Y+4	; 0x04
     2fe:	fd 81       	ldd	r31, Y+5	; 0x05
     300:	10 82       	st	Z, r1
				ErrRetVal = OperationSuccess;
     302:	1a 82       	std	Y+2, r1	; 0x02
//		} else {
//			continue;
//		}
//	} while (iterator < 255);
////	*RxString='\0';
	return ErrRetVal;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
}
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	08 95       	ret
				ErrRetVal = OperationSuccess;
				break;
			}
			else
			{
			RxString++;
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	9d 81       	ldd	r25, Y+5	; 0x05
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	9d 83       	std	Y+5, r25	; 0x05
     31e:	8c 83       	std	Y+4, r24	; 0x04
			iterator++;
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	d8 cf       	rjmp	.-80     	; 0x2d8 <UART_ReceiveString+0x1a>

00000328 <UART_EnableInterrupt>:
//	} while (iterator < 255);
////	*RxString='\0';
	return ErrRetVal;
}

uint8_t UART_EnableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	00 d0       	rcall	.+0      	; 0x32e <UART_EnableInterrupt+0x6>
     32e:	00 d0       	rcall	.+0      	; 0x330 <UART_EnableInterrupt+0x8>
     330:	0f 92       	push	r0
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	8a 83       	std	Y+2, r24	; 0x02
     338:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Global Interrupt*/
	SET_BIT(STATUS_REG, 7);
     33e:	af e5       	ldi	r26, 0x5F	; 95
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	ef e5       	ldi	r30, 0x5F	; 95
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	80 68       	ori	r24, 0x80	; 128
     34a:	8c 93       	st	X, r24
	/*Enable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	88 f5       	brcc	.+98     	; 0x3b4 <UART_EnableInterrupt+0x8c>
	{
		switch (UartInterruptType)
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	3d 83       	std	Y+5, r19	; 0x05
     35a:	2c 83       	std	Y+4, r18	; 0x04
     35c:	8c 81       	ldd	r24, Y+4	; 0x04
     35e:	9d 81       	ldd	r25, Y+5	; 0x05
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	91 05       	cpc	r25, r1
     364:	91 f0       	breq	.+36     	; 0x38a <UART_EnableInterrupt+0x62>
     366:	2c 81       	ldd	r18, Y+4	; 0x04
     368:	3d 81       	ldd	r19, Y+5	; 0x05
     36a:	22 30       	cpi	r18, 0x02	; 2
     36c:	31 05       	cpc	r19, r1
     36e:	b1 f0       	breq	.+44     	; 0x39c <UART_EnableInterrupt+0x74>
     370:	8c 81       	ldd	r24, Y+4	; 0x04
     372:	9d 81       	ldd	r25, Y+5	; 0x05
     374:	00 97       	sbiw	r24, 0x00	; 0
     376:	d9 f4       	brne	.+54     	; 0x3ae <UART_EnableInterrupt+0x86>
		{
		case RxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     378:	aa e2       	ldi	r26, 0x2A	; 42
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	ea e2       	ldi	r30, 0x2A	; 42
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	80 68       	ori	r24, 0x80	; 128
     384:	8c 93       	st	X, r24
					UART_ReceiveCompleteInterruptEnable_MSK,
					UART_ReceiveCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     386:	19 82       	std	Y+1, r1	; 0x01
     388:	17 c0       	rjmp	.+46     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		case DataBufferEmptyInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     38a:	aa e2       	ldi	r26, 0x2A	; 42
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	ea e2       	ldi	r30, 0x2A	; 42
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	80 62       	ori	r24, 0x20	; 32
     396:	8c 93       	st	X, r24
					UART_DataRegisterEmptyInterruptEnable_MSK,
					UART_DataRegisterEmptyInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     398:	19 82       	std	Y+1, r1	; 0x01
     39a:	0e c0       	rjmp	.+28     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		case TxCompleteInterrupt:
			MODIFY_REG(UART_ControlStatusRegB,
     39c:	aa e2       	ldi	r26, 0x2A	; 42
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	ea e2       	ldi	r30, 0x2A	; 42
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	80 64       	ori	r24, 0x40	; 64
     3a8:	8c 93       	st	X, r24
					UART_TransmissionCompleteInterruptEnable_MSK,
					UART_TransmissionCompleteInterruptEnable_MSK);
			ErrRetVal = OperationSuccess;
     3aa:	19 82       	std	Y+1, r1	; 0x01
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <UART_EnableInterrupt+0x90>
			break;
		default:
			ErrRetVal = Interrupt_Enabling_Fail;
     3ae:	89 e0       	ldi	r24, 0x09	; 9
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <UART_EnableInterrupt+0x90>
		}
	}
	else
	{
		ErrRetVal = Interrupt_Enabling_Fail;
     3b4:	89 e0       	ldi	r24, 0x09	; 9
     3b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	08 95       	ret

000003ca <UART_DisableInterrupt>:
uint8_t UART_DisableInterrupt(uint8_t UartNumber, uint8_t UartInterruptType) {
     3ca:	df 93       	push	r29
     3cc:	cf 93       	push	r28
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <UART_DisableInterrupt+0x6>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <UART_DisableInterrupt+0x8>
     3d2:	0f 92       	push	r0
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	8a 83       	std	Y+2, r24	; 0x02
     3da:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	89 83       	std	Y+1, r24	; 0x01
	/*Disable Local Interrupt*/
	if(UartInterruptType < NumOfInterrupts )
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	83 30       	cpi	r24, 0x03	; 3
     3e4:	88 f5       	brcc	.+98     	; 0x448 <UART_DisableInterrupt+0x7e>
		{
			switch (UartInterruptType)
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	3d 83       	std	Y+5, r19	; 0x05
     3ee:	2c 83       	std	Y+4, r18	; 0x04
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	9d 81       	ldd	r25, Y+5	; 0x05
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	91 05       	cpc	r25, r1
     3f8:	91 f0       	breq	.+36     	; 0x41e <UART_DisableInterrupt+0x54>
     3fa:	2c 81       	ldd	r18, Y+4	; 0x04
     3fc:	3d 81       	ldd	r19, Y+5	; 0x05
     3fe:	22 30       	cpi	r18, 0x02	; 2
     400:	31 05       	cpc	r19, r1
     402:	b1 f0       	breq	.+44     	; 0x430 <UART_DisableInterrupt+0x66>
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	9d 81       	ldd	r25, Y+5	; 0x05
     408:	00 97       	sbiw	r24, 0x00	; 0
     40a:	d9 f4       	brne	.+54     	; 0x442 <UART_DisableInterrupt+0x78>
			{
			case RxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     40c:	aa e2       	ldi	r26, 0x2A	; 42
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	ea e2       	ldi	r30, 0x2A	; 42
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	8f 77       	andi	r24, 0x7F	; 127
     418:	8c 93       	st	X, r24
						UART_ReceiveCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     41a:	19 82       	std	Y+1, r1	; 0x01
     41c:	17 c0       	rjmp	.+46     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			case DataBufferEmptyInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     41e:	aa e2       	ldi	r26, 0x2A	; 42
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	ea e2       	ldi	r30, 0x2A	; 42
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	8f 7d       	andi	r24, 0xDF	; 223
     42a:	8c 93       	st	X, r24
						UART_DataRegisterEmptyInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     42c:	19 82       	std	Y+1, r1	; 0x01
     42e:	0e c0       	rjmp	.+28     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			case TxCompleteInterrupt:
				CLEAR_BIT(UART_ControlStatusRegB,
     430:	aa e2       	ldi	r26, 0x2A	; 42
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	ea e2       	ldi	r30, 0x2A	; 42
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	8f 7b       	andi	r24, 0xBF	; 191
     43c:	8c 93       	st	X, r24
						UART_TransmissionCompleteInterruptEnable_BIT);
				ErrRetVal = OperationSuccess;
     43e:	19 82       	std	Y+1, r1	; 0x01
     440:	05 c0       	rjmp	.+10     	; 0x44c <UART_DisableInterrupt+0x82>
				break;
			default:
				ErrRetVal = Interrupt_Disabling_Fail;
     442:	88 e0       	ldi	r24, 0x08	; 8
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	02 c0       	rjmp	.+4      	; 0x44c <UART_DisableInterrupt+0x82>
			}
		}
		else
		{
			ErrRetVal = Interrupt_Disabling_Fail;
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	89 83       	std	Y+1, r24	; 0x01
		}
	return ErrRetVal;
     44c:	89 81       	ldd	r24, Y+1	; 0x01
}
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	cf 91       	pop	r28
     45a:	df 91       	pop	r29
     45c:	08 95       	ret

0000045e <UART_Set_RX_CompleteCallback>:

uint8_t UART_Set_RX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	00 d0       	rcall	.+0      	; 0x464 <UART_Set_RX_CompleteCallback+0x6>
     464:	00 d0       	rcall	.+0      	; 0x466 <UART_Set_RX_CompleteCallback+0x8>
     466:	0f 92       	push	r0
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	8a 83       	std	Y+2, r24	; 0x02
     46e:	6b 83       	std	Y+3, r22	; 0x03
     470:	5d 83       	std	Y+5, r21	; 0x05
     472:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     474:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     476:	8c 81       	ldd	r24, Y+4	; 0x04
     478:	9d 81       	ldd	r25, Y+5	; 0x05
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	31 f0       	breq	.+12     	; 0x48a <UART_Set_RX_CompleteCallback+0x2c>
		UART_RX_Complete_callback = callBack;
     47e:	8c 81       	ldd	r24, Y+4	; 0x04
     480:	9d 81       	ldd	r25, Y+5	; 0x05
     482:	90 93 0f 01 	sts	0x010F, r25
     486:	80 93 0e 01 	sts	0x010E, r24
	return ErrRetVal;
     48a:	89 81       	ldd	r24, Y+1	; 0x01
}
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	cf 91       	pop	r28
     498:	df 91       	pop	r29
     49a:	08 95       	ret

0000049c <UART_UDRE_Empty_CompleteCallback>:
uint8_t UART_UDRE_Empty_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <UART_UDRE_Empty_CompleteCallback+0x6>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <UART_UDRE_Empty_CompleteCallback+0x8>
     4a4:	0f 92       	push	r0
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	8a 83       	std	Y+2, r24	; 0x02
     4ac:	6b 83       	std	Y+3, r22	; 0x03
     4ae:	5d 83       	std	Y+5, r21	; 0x05
     4b0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4b2:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4b4:	8c 81       	ldd	r24, Y+4	; 0x04
     4b6:	9d 81       	ldd	r25, Y+5	; 0x05
     4b8:	00 97       	sbiw	r24, 0x00	; 0
     4ba:	31 f0       	breq	.+12     	; 0x4c8 <UART_UDRE_Empty_CompleteCallback+0x2c>
		UART_UDRE_Empty_callback = callBack;
     4bc:	8c 81       	ldd	r24, Y+4	; 0x04
     4be:	9d 81       	ldd	r25, Y+5	; 0x05
     4c0:	90 93 11 01 	sts	0x0111, r25
     4c4:	80 93 10 01 	sts	0x0110, r24
	return ErrRetVal;
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	08 95       	ret

000004da <UART_Set_TX_CompleteCallback>:
uint8_t UART_Set_TX_CompleteCallback(uint8_t UartNumber, uint8_t UartInterruptType,
		void (*callBack)(void)) {
     4da:	df 93       	push	r29
     4dc:	cf 93       	push	r28
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <UART_Set_TX_CompleteCallback+0x6>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <UART_Set_TX_CompleteCallback+0x8>
     4e2:	0f 92       	push	r0
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	8a 83       	std	Y+2, r24	; 0x02
     4ea:	6b 83       	std	Y+3, r22	; 0x03
     4ec:	5d 83       	std	Y+5, r21	; 0x05
     4ee:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t ErrRetVal = 0;
     4f0:	19 82       	std	Y+1, r1	; 0x01
	if (callBack != NULL)
     4f2:	8c 81       	ldd	r24, Y+4	; 0x04
     4f4:	9d 81       	ldd	r25, Y+5	; 0x05
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	31 f0       	breq	.+12     	; 0x506 <UART_Set_TX_CompleteCallback+0x2c>
		UART_TX_Complete_callback = callBack;
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	9d 81       	ldd	r25, Y+5	; 0x05
     4fe:	90 93 13 01 	sts	0x0113, r25
     502:	80 93 12 01 	sts	0x0112, r24
	return ErrRetVal;
     506:	89 81       	ldd	r24, Y+1	; 0x01
}
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <__vector_13>:

void __vector_13(void)
{
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Complete_callback != NULL)
     542:	80 91 0e 01 	lds	r24, 0x010E
     546:	90 91 0f 01 	lds	r25, 0x010F
     54a:	00 97       	sbiw	r24, 0x00	; 0
     54c:	29 f0       	breq	.+10     	; 0x558 <__vector_13+0x40>
		UART_RX_Complete_callback();
     54e:	e0 91 0e 01 	lds	r30, 0x010E
     552:	f0 91 0f 01 	lds	r31, 0x010F
     556:	09 95       	icall
}
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <__vector_14>:
void __vector_14(void)
{
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
	if (UART_UDRE_Empty_callback != NULL)
     5a8:	80 91 10 01 	lds	r24, 0x0110
     5ac:	90 91 11 01 	lds	r25, 0x0111
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	29 f0       	breq	.+10     	; 0x5be <__vector_14+0x40>
		UART_UDRE_Empty_callback();
     5b4:	e0 91 10 01 	lds	r30, 0x0110
     5b8:	f0 91 11 01 	lds	r31, 0x0111
     5bc:	09 95       	icall
}
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	0f 90       	pop	r0
     5e0:	1f 90       	pop	r1
     5e2:	18 95       	reti

000005e4 <__vector_15>:
void __vector_15(void)
{
     5e4:	1f 92       	push	r1
     5e6:	0f 92       	push	r0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
     5ee:	2f 93       	push	r18
     5f0:	3f 93       	push	r19
     5f2:	4f 93       	push	r20
     5f4:	5f 93       	push	r21
     5f6:	6f 93       	push	r22
     5f8:	7f 93       	push	r23
     5fa:	8f 93       	push	r24
     5fc:	9f 93       	push	r25
     5fe:	af 93       	push	r26
     600:	bf 93       	push	r27
     602:	ef 93       	push	r30
     604:	ff 93       	push	r31
     606:	df 93       	push	r29
     608:	cf 93       	push	r28
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Complete_callback != NULL)
     60e:	80 91 12 01 	lds	r24, 0x0112
     612:	90 91 13 01 	lds	r25, 0x0113
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	29 f0       	breq	.+10     	; 0x624 <__vector_15+0x40>
		UART_TX_Complete_callback();
     61a:	e0 91 12 01 	lds	r30, 0x0112
     61e:	f0 91 13 01 	lds	r31, 0x0113
     622:	09 95       	icall
}
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	0f be       	out	0x3f, r0	; 63
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <TWI_Init>:
/*static functions*/
static void TWI_SetClk(void);


uint8_t TWI_Init(uint8_t TWI_channel)
{
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <TWI_Init+0x6>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	89 83       	std	Y+1, r24	; 0x01

	/*setting control register to default value*/
	WRITE_REG(TWI_ControlRegister, ResgisterDefaultVal);
     65a:	e6 e5       	ldi	r30, 0x56	; 86
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	10 82       	st	Z, r1

	/*Set TWI CLK (SCL)*/
	TWI_SetClk();
     660:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <TWI_SetClk>

	/*Set the Device Address*/
	TWI_AddressRegister = (deviceAddress<<1);
     664:	e2 e2       	ldi	r30, 0x22	; 34
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	8a ea       	ldi	r24, 0xAA	; 170
     66a:	80 83       	st	Z, r24

	/*Enable or Disable general call*/
	if(GeneralCallRecognition==Enabled)
	{
		SET_BIT(TWI_AddressRegister,TWI_GeneralCallRecognitionEnable_BIT);
     66c:	a2 e2       	ldi	r26, 0x22	; 34
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	e2 e2       	ldi	r30, 0x22	; 34
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	81 60       	ori	r24, 0x01	; 1
     678:	8c 93       	st	X, r24
	{
		CLEAR_BIT(TWI_AddressRegister,TWI_GeneralCallRecognitionEnable_BIT);
	}

	/*clear the interrupt flag*/
	SET_BIT(TWI_ControlRegister,TWI_InterruptFlag_BIT);
     67a:	a6 e5       	ldi	r26, 0x56	; 86
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	e6 e5       	ldi	r30, 0x56	; 86
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	80 68       	ori	r24, 0x80	; 128
     686:	8c 93       	st	X, r24

	/*Enable TWI_Module*/
	SET_BIT(TWI_ControlRegister,TWI_ModuleEnable_BIT);
     688:	a6 e5       	ldi	r26, 0x56	; 86
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	e6 e5       	ldi	r30, 0x56	; 86
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	84 60       	ori	r24, 0x04	; 4
     694:	8c 93       	st	X, r24

	return ErrRetVal;
     696:	89 81       	ldd	r24, Y+1	; 0x01
}
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	cf 91       	pop	r28
     69e:	df 91       	pop	r29
     6a0:	08 95       	ret

000006a2 <TWI_ReadDataWithACK>:

uint8_t TWI_ReadDataWithACK(uint8_t TWI_channel, ptr_uint8_t Data)
{
     6a2:	df 93       	push	r29
     6a4:	cf 93       	push	r28
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <TWI_ReadDataWithACK+0x6>
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <TWI_ReadDataWithACK+0x8>
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <TWI_ReadDataWithACK+0xa>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	8a 83       	std	Y+2, r24	; 0x02
     6b2:	7c 83       	std	Y+4, r23	; 0x04
     6b4:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch(State)
     6ba:	80 91 09 01 	lds	r24, 0x0109
     6be:	28 2f       	mov	r18, r24
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	3e 83       	std	Y+6, r19	; 0x06
     6c4:	2d 83       	std	Y+5, r18	; 0x05
     6c6:	8d 81       	ldd	r24, Y+5	; 0x05
     6c8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	91 05       	cpc	r25, r1
     6ce:	c1 f0       	breq	.+48     	; 0x700 <TWI_ReadDataWithACK+0x5e>
     6d0:	2d 81       	ldd	r18, Y+5	; 0x05
     6d2:	3e 81       	ldd	r19, Y+6	; 0x06
     6d4:	2f 3f       	cpi	r18, 0xFF	; 255
     6d6:	31 05       	cpc	r19, r1
     6d8:	19 f5       	brne	.+70     	; 0x720 <TWI_ReadDataWithACK+0x7e>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &=0x07;
     6da:	a6 e5       	ldi	r26, 0x56	; 86
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	e6 e5       	ldi	r30, 0x56	; 86
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	87 70       	andi	r24, 0x07	; 7
     6e6:	8c 93       	st	X, r24

		/*Set enable_acknowledgement bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
     6e8:	a6 e5       	ldi	r26, 0x56	; 86
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	e6 e5       	ldi	r30, 0x56	; 86
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	80 6c       	ori	r24, 0xC0	; 192
     6f6:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_EnableAcknowledge_MSK|TWI_InterruptFlag_MSK);

		/*changing the function state*/
		State = FlagLowForReadDataWithACK;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 09 01 	sts	0x0109, r24
     6fe:	12 c0       	rjmp	.+36     	; 0x724 <TWI_ReadDataWithACK+0x82>
		break;
	/*Function's Ending State*/
	case FlagLowForReadDataWithACK:
		/*Checking if TWI-interrupt Flag is raised for Data Reading event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
     700:	e6 e5       	ldi	r30, 0x56	; 86
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	88 23       	and	r24, r24
     708:	6c f4       	brge	.+26     	; 0x724 <TWI_ReadDataWithACK+0x82>
		{
			/*Submit DATA received to the argument used for data return*/
			*Data=TWI_DataRegister;
     70a:	e3 e2       	ldi	r30, 0x23	; 35
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	eb 81       	ldd	r30, Y+3	; 0x03
     712:	fc 81       	ldd	r31, Y+4	; 0x04
     714:	80 83       	st	Z, r24

			/*reseting the Functions State*/
			State=OperationStarted;
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	80 93 09 01 	sts	0x0109, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	02 c0       	rjmp	.+4      	; 0x724 <TWI_ReadDataWithACK+0x82>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     724:	89 81       	ldd	r24, Y+1	; 0x01
}
     726:	26 96       	adiw	r28, 0x06	; 6
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	08 95       	ret

00000738 <TWI_ReadDataWithNACK>:

uint8_t TWI_ReadDataWithNACK(uint8_t TWI_channel, ptr_uint8_t Data)
{
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	00 d0       	rcall	.+0      	; 0x73e <TWI_ReadDataWithNACK+0x6>
     73e:	00 d0       	rcall	.+0      	; 0x740 <TWI_ReadDataWithNACK+0x8>
     740:	00 d0       	rcall	.+0      	; 0x742 <TWI_ReadDataWithNACK+0xa>
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	8a 83       	std	Y+2, r24	; 0x02
     748:	7c 83       	std	Y+4, r23	; 0x04
     74a:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch(State)
     750:	80 91 0a 01 	lds	r24, 0x010A
     754:	28 2f       	mov	r18, r24
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	2d 83       	std	Y+5, r18	; 0x05
     75c:	8d 81       	ldd	r24, Y+5	; 0x05
     75e:	9e 81       	ldd	r25, Y+6	; 0x06
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	91 05       	cpc	r25, r1
     764:	b9 f0       	breq	.+46     	; 0x794 <TWI_ReadDataWithNACK+0x5c>
     766:	2d 81       	ldd	r18, Y+5	; 0x05
     768:	3e 81       	ldd	r19, Y+6	; 0x06
     76a:	2f 3f       	cpi	r18, 0xFF	; 255
     76c:	31 05       	cpc	r19, r1
     76e:	11 f5       	brne	.+68     	; 0x7b4 <TWI_ReadDataWithNACK+0x7c>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &=0x07;
     770:	a6 e5       	ldi	r26, 0x56	; 86
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	e6 e5       	ldi	r30, 0x56	; 86
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	87 70       	andi	r24, 0x07	; 7
     77c:	8c 93       	st	X, r24

		/*Clear interrupt flag manually*/
		SET_BIT(TWI_ControlRegister, TWI_InterruptFlag_BIT);
     77e:	a6 e5       	ldi	r26, 0x56	; 86
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	e6 e5       	ldi	r30, 0x56	; 86
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	80 68       	ori	r24, 0x80	; 128
     78a:	8c 93       	st	X, r24

		/*changing the function state*/
		State = FlagLowForReadDataWithNACK;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 0a 01 	sts	0x010A, r24
     792:	12 c0       	rjmp	.+36     	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		break;
	/*Function's Ending State*/
	case FlagLowForReadDataWithNACK:
		/*Checking if TWI-interrupt Flag is raised for Data Reading event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
     794:	e6 e5       	ldi	r30, 0x56	; 86
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	88 23       	and	r24, r24
     79c:	6c f4       	brge	.+26     	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		{
			/*Submit DATA received to the argument used for data return*/
			*Data=TWI_DataRegister;
     79e:	e3 e2       	ldi	r30, 0x23	; 35
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	eb 81       	ldd	r30, Y+3	; 0x03
     7a6:	fc 81       	ldd	r31, Y+4	; 0x04
     7a8:	80 83       	st	Z, r24

			/*reseting the Functions State*/
			State=OperationStarted;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	80 93 0a 01 	sts	0x010A, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
     7b0:	19 82       	std	Y+1, r1	; 0x01
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <TWI_ReadDataWithNACK+0x80>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ba:	26 96       	adiw	r28, 0x06	; 6
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <TWI_WriteData>:

uint8_t TWI_WriteData(uint8_t TWI_channel, uint8_t Data)
{
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <TWI_WriteData+0x6>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <TWI_WriteData+0x8>
     7d4:	0f 92       	push	r0
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	6b 83       	std	Y+3, r22	; 0x03
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State)
     7e2:	80 91 0b 01 	lds	r24, 0x010B
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	3d 83       	std	Y+5, r19	; 0x05
     7ec:	2c 83       	std	Y+4, r18	; 0x04
     7ee:	8c 81       	ldd	r24, Y+4	; 0x04
     7f0:	9d 81       	ldd	r25, Y+5	; 0x05
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	91 05       	cpc	r25, r1
     7f6:	d9 f0       	breq	.+54     	; 0x82e <TWI_WriteData+0x62>
     7f8:	2c 81       	ldd	r18, Y+4	; 0x04
     7fa:	3d 81       	ldd	r19, Y+5	; 0x05
     7fc:	2f 3f       	cpi	r18, 0xFF	; 255
     7fe:	31 05       	cpc	r19, r1
     800:	01 f5       	brne	.+64     	; 0x842 <TWI_WriteData+0x76>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*clear start, stop and enable Acknowledge bits*/
		TWI_ControlRegister &= 0x07;
     802:	a6 e5       	ldi	r26, 0x56	; 86
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	e6 e5       	ldi	r30, 0x56	; 86
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	87 70       	andi	r24, 0x07	; 7
     80e:	8c 93       	st	X, r24

		/*set the data register*/
		TWI_DataRegister = Data;
     810:	e3 e2       	ldi	r30, 0x23	; 35
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	8b 81       	ldd	r24, Y+3	; 0x03
     816:	80 83       	st	Z, r24

		/*Clear interrupt flag manually*/
		SET_BIT(TWI_ControlRegister, TWI_InterruptFlag_BIT);
     818:	a6 e5       	ldi	r26, 0x56	; 86
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e6 e5       	ldi	r30, 0x56	; 86
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	80 68       	ori	r24, 0x80	; 128
     824:	8c 93       	st	X, r24

		/*changing the function state*/
		State = FlagLowForWritingDataRegister;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 0b 01 	sts	0x010B, r24
     82c:	0c c0       	rjmp	.+24     	; 0x846 <TWI_WriteData+0x7a>
		break;
	/*Function's Ending State*/
	case FlagLowForWritingDataRegister:
		/*Checking if TWI-interrupt Flag is raised for Data Writing event*/
		if ((TWI_ControlRegister & TWI_InterruptFlag_MSK)) {
     82e:	e6 e5       	ldi	r30, 0x56	; 86
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	88 23       	and	r24, r24
     836:	3c f4       	brge	.+14     	; 0x846 <TWI_WriteData+0x7a>
			/*reseting the Functions State*/
			State = OperationStarted;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	80 93 0b 01 	sts	0x010B, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal = OperationSuccess;
     83e:	19 82       	std	Y+1, r1	; 0x01
     840:	02 c0       	rjmp	.+4      	; 0x846 <TWI_WriteData+0x7a>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal = OperationFail;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     846:	89 81       	ldd	r24, Y+1	; 0x01
}
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	cf 91       	pop	r28
     854:	df 91       	pop	r29
     856:	08 95       	ret

00000858 <TWI_SendStartCondition>:

uint8_t TWI_SendStartCondition(uint8_t TWI_channel)
{
     858:	df 93       	push	r29
     85a:	cf 93       	push	r28
     85c:	00 d0       	rcall	.+0      	; 0x85e <TWI_SendStartCondition+0x6>
     85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State)
     86a:	80 91 0c 01 	lds	r24, 0x010C
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	3c 83       	std	Y+4, r19	; 0x04
     874:	2b 83       	std	Y+3, r18	; 0x03
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	91 05       	cpc	r25, r1
     87e:	a9 f0       	breq	.+42     	; 0x8aa <__stack+0x4b>
     880:	2b 81       	ldd	r18, Y+3	; 0x03
     882:	3c 81       	ldd	r19, Y+4	; 0x04
     884:	2f 3f       	cpi	r18, 0xFF	; 255
     886:	31 05       	cpc	r19, r1
     888:	d1 f4       	brne	.+52     	; 0x8be <__stack+0x5f>
	{
	/*Function's Starting State*/
	case OperationStarted:
		/*Clearing bits of control register except TWI_Enable and TWI_Interrupt Bits*/
		TWI_ControlRegister=0x07;
     88a:	e6 e5       	ldi	r30, 0x56	; 86
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	87 e0       	ldi	r24, 0x07	; 7
     890:	80 83       	st	Z, r24

		/*Set start_condition bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
     892:	a6 e5       	ldi	r26, 0x56	; 86
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	e6 e5       	ldi	r30, 0x56	; 86
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	80 6a       	ori	r24, 0xA0	; 160
     8a0:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_StartCondition_MSK|TWI_InterruptFlag_MSK);

		/*changing the function state*/
		State = StartConditionFiredInterruptFlagLow;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 0c 01 	sts	0x010C, r24
     8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <__stack+0x63>
		break;
	/*Function's Ending State*/
	case StartConditionFiredInterruptFlagLow:
		/*Checking if TWI-interrupt Flag is raised for Starting event*/
		if((TWI_ControlRegister&TWI_InterruptFlag_MSK))
     8aa:	e6 e5       	ldi	r30, 0x56	; 86
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	88 23       	and	r24, r24
     8b2:	3c f4       	brge	.+14     	; 0x8c2 <__stack+0x63>
		{
			/*reseting the Functions State*/
			State=OperationStarted;
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	80 93 0c 01 	sts	0x010C, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal=OperationSuccess;
     8ba:	19 82       	std	Y+1, r1	; 0x01
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal=OperationFail;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	cf 91       	pop	r28
     8ce:	df 91       	pop	r29
     8d0:	08 95       	ret

000008d2 <TWI_SendStopCondition>:

uint8_t TWI_SendStopCondition(uint8_t TWI_channel)
{
     8d2:	df 93       	push	r29
     8d4:	cf 93       	push	r28
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <TWI_SendStopCondition+0x6>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <TWI_SendStopCondition+0x8>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	8a 83       	std	Y+2, r24	; 0x02
	/*function variables initialization*/
	uint8_t ErrRetVal = OperationStarted;
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t State = OperationStarted;

	switch (State) {
     8e4:	80 91 0d 01 	lds	r24, 0x010D
     8e8:	28 2f       	mov	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	3c 83       	std	Y+4, r19	; 0x04
     8ee:	2b 83       	std	Y+3, r18	; 0x03
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	9c 81       	ldd	r25, Y+4	; 0x04
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	91 05       	cpc	r25, r1
     8f8:	a9 f0       	breq	.+42     	; 0x924 <TWI_SendStopCondition+0x52>
     8fa:	2b 81       	ldd	r18, Y+3	; 0x03
     8fc:	3c 81       	ldd	r19, Y+4	; 0x04
     8fe:	2f 3f       	cpi	r18, 0xFF	; 255
     900:	31 05       	cpc	r19, r1
     902:	f1 f4       	brne	.+60     	; 0x940 <TWI_SendStopCondition+0x6e>
	/*Function's Starting State*/
	case OperationStarted:
		/*Clearing bits of control register except TWI_Enable and TWI_Interrupt Bits*/
		TWI_ControlRegister = 0x07;
     904:	e6 e5       	ldi	r30, 0x56	; 86
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	87 e0       	ldi	r24, 0x07	; 7
     90a:	80 83       	st	Z, r24

		/*Setting The stop_condition bit and Clearing the interrupt flag*/
		MODIFY_REG(TWI_ControlRegister,
     90c:	a6 e5       	ldi	r26, 0x56	; 86
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	e6 e5       	ldi	r30, 0x56	; 86
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	8f 70       	andi	r24, 0x0F	; 15
     918:	80 69       	ori	r24, 0x90	; 144
     91a:	8c 93       	st	X, r24
				TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
				TWI_StopCondition_MSK|TWI_InterruptFlag_MSK);

		/*Changing the State of the Function*/
		State=StopConditionFired;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 0d 01 	sts	0x010D, r24
     922:	10 c0       	rjmp	.+32     	; 0x944 <TWI_SendStopCondition+0x72>
		break;
	/*Function's Ending State*/
	case StopConditionFired:
		/*checking if the Stop-condition Bit is reseted to zero or not*/
		if (!(TWI_ControlRegister & TWI_StopCondition_MSK)) {
     924:	e6 e5       	ldi	r30, 0x56	; 86
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	80 71       	andi	r24, 0x10	; 16
     930:	90 70       	andi	r25, 0x00	; 0
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	39 f4       	brne	.+14     	; 0x944 <TWI_SendStopCondition+0x72>
			/*reseting the Functions State*/
			State = OperationStarted;
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	80 93 0d 01 	sts	0x010D, r24

			/*setting Error return value to OperationSuccess*/
			ErrRetVal = OperationSuccess;
     93c:	19 82       	std	Y+1, r1	; 0x01
     93e:	02 c0       	rjmp	.+4      	; 0x944 <TWI_SendStopCondition+0x72>
		}
		break;
	default:
		/*setting Error return value to OperationFail*/
		ErrRetVal = OperationFail;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
     944:	89 81       	ldd	r24, Y+1	; 0x01
}
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	08 95       	ret

00000954 <TWI_GetStatus>:

uint8_t TWI_GetStatus()
{
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	0f 92       	push	r0
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
	uint8_t statusRegVal=0;
     95e:	19 82       	std	Y+1, r1	; 0x01
	statusRegVal = TWI_StatusRegister & TWI_Status_MSK;
     960:	e1 e2       	ldi	r30, 0x21	; 33
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	88 7f       	andi	r24, 0xF8	; 248
     968:	89 83       	std	Y+1, r24	; 0x01
	return	statusRegVal;
     96a:	89 81       	ldd	r24, Y+1	; 0x01
}
     96c:	0f 90       	pop	r0
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	08 95       	ret

00000974 <TWI_EnableACK>:

void TWI_EnableACK()
{
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
	TWI_ControlRegister &=0x07;
     97c:	a6 e5       	ldi	r26, 0x56	; 86
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e6 e5       	ldi	r30, 0x56	; 86
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	87 70       	andi	r24, 0x07	; 7
     988:	8c 93       	st	X, r24

	/*Set enable_acknowledgement bit and Clearing the interrupt flag*/
	MODIFY_REG(TWI_ControlRegister,
     98a:	a6 e5       	ldi	r26, 0x56	; 86
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	e6 e5       	ldi	r30, 0x56	; 86
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	8f 70       	andi	r24, 0x0F	; 15
     996:	80 6c       	ori	r24, 0xC0	; 192
     998:	8c 93       	st	X, r24
			TWI_StartCondition_MSK|TWI_EnableAcknowledge_MSK|TWI_StopCondition_MSK|TWI_InterruptFlag_MSK,
			TWI_EnableAcknowledge_MSK|TWI_InterruptFlag_MSK);
}
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	08 95       	ret

000009a0 <TWI_SetClk>:

static void TWI_SetClk(void)
{
     9a0:	df 93       	push	r29
     9a2:	cf 93       	push	r28
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <TWI_SetClk+0x6>
     9a6:	0f 92       	push	r0
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
     9ac:	19 82       	std	Y+1, r1	; 0x01
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	8a 83       	std	Y+2, r24	; 0x02
     9b2:	46 c0       	rjmp	.+140    	; 0xa40 <TWI_SetClk+0xa0>
	{
		for(TWBR=1; TWBR<=255; TWBR++)
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	8b 83       	std	Y+3, r24	; 0x03
		{
			if((TWBR*Prescalar)==ClockRatio)
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	ac 01       	movw	r20, r24
     9c6:	24 9f       	mul	r18, r20
     9c8:	c0 01       	movw	r24, r0
     9ca:	25 9f       	mul	r18, r21
     9cc:	90 0d       	add	r25, r0
     9ce:	34 9f       	mul	r19, r20
     9d0:	90 0d       	add	r25, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	80 32       	cpi	r24, 0x20	; 32
     9d6:	91 05       	cpc	r25, r1
     9d8:	31 f4       	brne	.+12     	; 0x9e6 <TWI_SetClk+0x46>
			{
				Flag=1;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				continue;
			}
		}
		if(Flag==1)
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	29 f0       	breq	.+10     	; 0x9ee <TWI_SetClk+0x4e>
     9e4:	15 c0       	rjmp	.+42     	; 0xa10 <TWI_SetClk+0x70>
{
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
	{
		for(TWBR=1; TWBR<=255; TWBR++)
     9e6:	8b 81       	ldd	r24, Y+3	; 0x03
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	8b 83       	std	Y+3, r24	; 0x03
     9ec:	e5 cf       	rjmp	.-54     	; 0x9b8 <TWI_SetClk+0x18>
				continue;
			}
		}
		if(Flag==1)
		{
			TWI_BaudRateRegister=TWBR;
     9ee:	e0 e2       	ldi	r30, 0x20	; 32
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	80 83       	st	Z, r24
			MODIFY_REG(TWI_StatusRegister,TWI_Prescalar_MSK,Prescalar/4);
     9f6:	a1 e2       	ldi	r26, 0x21	; 33
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	e1 e2       	ldi	r30, 0x21	; 33
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	98 2f       	mov	r25, r24
     a02:	9c 7f       	andi	r25, 0xFC	; 252
     a04:	8a 81       	ldd	r24, Y+2	; 0x02
     a06:	86 95       	lsr	r24
     a08:	86 95       	lsr	r24
     a0a:	89 2b       	or	r24, r25
     a0c:	8c 93       	st	X, r24
     a0e:	1c c0       	rjmp	.+56     	; 0xa48 <TWI_SetClk+0xa8>
			break;
		}
		else if(TWBR==255 && Prescalar==64)
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	69 f4       	brne	.+26     	; 0xa30 <TWI_SetClk+0x90>
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	51 f4       	brne	.+20     	; 0xa30 <TWI_SetClk+0x90>
		{
			//required SCL isn't available.
			TWI_BaudRateRegister=0;
     a1c:	e0 e2       	ldi	r30, 0x20	; 32
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	10 82       	st	Z, r1
			MODIFY_REG(TWI_StatusRegister,TWI_Prescalar_MSK,0);
     a22:	a1 e2       	ldi	r26, 0x21	; 33
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e1 e2       	ldi	r30, 0x21	; 33
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	8c 7f       	andi	r24, 0xFC	; 252
     a2e:	8c 93       	st	X, r24

static void TWI_SetClk(void)
{
	uint8_t TWBR,Prescalar;
	uint8_t Flag = 0;
	for(Prescalar=1; Prescalar<=64; Prescalar=Prescalar*4)
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	88 2f       	mov	r24, r24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	8a 83       	std	Y+2, r24	; 0x02
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	81 34       	cpi	r24, 0x41	; 65
     a44:	08 f4       	brcc	.+2      	; 0xa48 <TWI_SetClk+0xa8>
     a46:	b6 cf       	rjmp	.-148    	; 0x9b4 <TWI_SetClk+0x14>
		else
		{
			continue;
		}
	}
}
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	cf 91       	pop	r28
     a50:	df 91       	pop	r29
     a52:	08 95       	ret

00000a54 <DIO_PortInit>:
#include "../DIO/DIO_DRIVER_TypeDef.h"
#include "../DIO/DIO_DRIVER.h"
#include "../DIO/DIO_DRIVER_Priv.h"

DIO_ERROR_RETVAL_t DIO_PortInit(DIO_PORT_ID_t DIO_port,
		DIO_DIRECTION_t DIO_direction) {
     a54:	df 93       	push	r29
     a56:	cf 93       	push	r28
     a58:	00 d0       	rcall	.+0      	; 0xa5a <DIO_PortInit+0x6>
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <DIO_PortInit+0x8>
     a5c:	0f 92       	push	r0
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	8a 83       	std	Y+2, r24	; 0x02
     a64:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     a66:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD)
     a68:	8a 81       	ldd	r24, Y+2	; 0x02
     a6a:	85 30       	cpi	r24, 0x05	; 5
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <DIO_PortInit+0x1c>
     a6e:	3d c0       	rjmp	.+122    	; 0xaea <DIO_PortInit+0x96>
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	88 23       	and	r24, r24
     a74:	19 f0       	breq	.+6      	; 0xa7c <DIO_PortInit+0x28>
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	b9 f5       	brne	.+110    	; 0xaea <DIO_PortInit+0x96>
			&& (DIO_direction == PORT_INPUT || DIO_direction == PORT_OUTPUT)) {
		switch (DIO_port) {
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	3d 83       	std	Y+5, r19	; 0x05
     a84:	2c 83       	std	Y+4, r18	; 0x04
     a86:	8c 81       	ldd	r24, Y+4	; 0x04
     a88:	9d 81       	ldd	r25, Y+5	; 0x05
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	91 05       	cpc	r25, r1
     a8e:	d9 f0       	breq	.+54     	; 0xac6 <DIO_PortInit+0x72>
     a90:	2c 81       	ldd	r18, Y+4	; 0x04
     a92:	3d 81       	ldd	r19, Y+5	; 0x05
     a94:	23 30       	cpi	r18, 0x03	; 3
     a96:	31 05       	cpc	r19, r1
     a98:	34 f4       	brge	.+12     	; 0xaa6 <DIO_PortInit+0x52>
     a9a:	8c 81       	ldd	r24, Y+4	; 0x04
     a9c:	9d 81       	ldd	r25, Y+5	; 0x05
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	91 05       	cpc	r25, r1
     aa2:	61 f0       	breq	.+24     	; 0xabc <DIO_PortInit+0x68>
     aa4:	1f c0       	rjmp	.+62     	; 0xae4 <DIO_PortInit+0x90>
     aa6:	2c 81       	ldd	r18, Y+4	; 0x04
     aa8:	3d 81       	ldd	r19, Y+5	; 0x05
     aaa:	23 30       	cpi	r18, 0x03	; 3
     aac:	31 05       	cpc	r19, r1
     aae:	81 f0       	breq	.+32     	; 0xad0 <DIO_PortInit+0x7c>
     ab0:	8c 81       	ldd	r24, Y+4	; 0x04
     ab2:	9d 81       	ldd	r25, Y+5	; 0x05
     ab4:	84 30       	cpi	r24, 0x04	; 4
     ab6:	91 05       	cpc	r25, r1
     ab8:	81 f0       	breq	.+32     	; 0xada <DIO_PortInit+0x86>
     aba:	14 c0       	rjmp	.+40     	; 0xae4 <DIO_PortInit+0x90>
		case PORTA:
			WRITE_REG(DDRA_Register, DIO_direction);
     abc:	ea e3       	ldi	r30, 0x3A	; 58
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	80 83       	st	Z, r24
     ac4:	14 c0       	rjmp	.+40     	; 0xaee <DIO_PortInit+0x9a>
			break;
		case PORTB:
			WRITE_REG(DDRB_Register, DIO_direction);
     ac6:	e7 e3       	ldi	r30, 0x37	; 55
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	80 83       	st	Z, r24
     ace:	0f c0       	rjmp	.+30     	; 0xaee <DIO_PortInit+0x9a>
			break;
		case PORTC:
			WRITE_REG(DDRC_Register, DIO_direction);
     ad0:	e4 e3       	ldi	r30, 0x34	; 52
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	80 83       	st	Z, r24
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <DIO_PortInit+0x9a>
			break;
		case PORTD:
			WRITE_REG(DDRD_Register, DIO_direction);
     ada:	e1 e3       	ldi	r30, 0x31	; 49
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	80 83       	st	Z, r24
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <DIO_PortInit+0x9a>
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <DIO_PortInit+0x9a>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     aee:	89 81       	ldd	r24, Y+1	; 0x01
}
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	08 95       	ret

00000b00 <DIO_PinInit>:

DIO_ERROR_RETVAL_t DIO_PinInit(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin,
		DIO_DIRECTION_t DIO_direction) {
     b00:	df 93       	push	r29
     b02:	cf 93       	push	r28
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	28 97       	sbiw	r28, 0x08	; 8
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	8a 83       	std	Y+2, r24	; 0x02
     b16:	6b 83       	std	Y+3, r22	; 0x03
     b18:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     b1a:	19 82       	std	Y+1, r1	; 0x01

	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
     b1c:	8a 81       	ldd	r24, Y+2	; 0x02
     b1e:	85 30       	cpi	r24, 0x05	; 5
     b20:	08 f0       	brcs	.+2      	; 0xb24 <DIO_PinInit+0x24>
     b22:	fa c0       	rjmp	.+500    	; 0xd18 <DIO_PinInit+0x218>
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	88 30       	cpi	r24, 0x08	; 8
     b28:	08 f0       	brcs	.+2      	; 0xb2c <DIO_PinInit+0x2c>
     b2a:	f6 c0       	rjmp	.+492    	; 0xd18 <DIO_PinInit+0x218>
		if (DIO_direction == PIN_OUTPUT) {
     b2c:	8c 81       	ldd	r24, Y+4	; 0x04
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	09 f0       	breq	.+2      	; 0xb34 <DIO_PinInit+0x34>
     b32:	73 c0       	rjmp	.+230    	; 0xc1a <DIO_PinInit+0x11a>

			switch (DIO_port) {
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	28 2f       	mov	r18, r24
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	38 87       	std	Y+8, r19	; 0x08
     b3c:	2f 83       	std	Y+7, r18	; 0x07
     b3e:	8f 81       	ldd	r24, Y+7	; 0x07
     b40:	98 85       	ldd	r25, Y+8	; 0x08
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	91 05       	cpc	r25, r1
     b46:	51 f1       	breq	.+84     	; 0xb9c <DIO_PinInit+0x9c>
     b48:	2f 81       	ldd	r18, Y+7	; 0x07
     b4a:	38 85       	ldd	r19, Y+8	; 0x08
     b4c:	23 30       	cpi	r18, 0x03	; 3
     b4e:	31 05       	cpc	r19, r1
     b50:	34 f4       	brge	.+12     	; 0xb5e <DIO_PinInit+0x5e>
     b52:	8f 81       	ldd	r24, Y+7	; 0x07
     b54:	98 85       	ldd	r25, Y+8	; 0x08
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	91 05       	cpc	r25, r1
     b5a:	61 f0       	breq	.+24     	; 0xb74 <DIO_PinInit+0x74>
     b5c:	5b c0       	rjmp	.+182    	; 0xc14 <DIO_PinInit+0x114>
     b5e:	2f 81       	ldd	r18, Y+7	; 0x07
     b60:	38 85       	ldd	r19, Y+8	; 0x08
     b62:	23 30       	cpi	r18, 0x03	; 3
     b64:	31 05       	cpc	r19, r1
     b66:	71 f1       	breq	.+92     	; 0xbc4 <DIO_PinInit+0xc4>
     b68:	8f 81       	ldd	r24, Y+7	; 0x07
     b6a:	98 85       	ldd	r25, Y+8	; 0x08
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	91 05       	cpc	r25, r1
     b70:	e9 f1       	breq	.+122    	; 0xbec <DIO_PinInit+0xec>
     b72:	50 c0       	rjmp	.+160    	; 0xc14 <DIO_PinInit+0x114>
			case PORTA:
				SET_BIT(DDRA_Register, DIO_pin);
     b74:	aa e3       	ldi	r26, 0x3A	; 58
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ea e3       	ldi	r30, 0x3A	; 58
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	48 2f       	mov	r20, r24
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	02 2e       	mov	r0, r18
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <DIO_PinInit+0x92>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	0a 94       	dec	r0
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <DIO_PinInit+0x8e>
     b96:	84 2b       	or	r24, r20
     b98:	8c 93       	st	X, r24
     b9a:	c0 c0       	rjmp	.+384    	; 0xd1c <DIO_PinInit+0x21c>
				break;
			case PORTB:
				SET_BIT(DDRB_Register, DIO_pin);
     b9c:	a7 e3       	ldi	r26, 0x37	; 55
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e7 e3       	ldi	r30, 0x37	; 55
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	48 2f       	mov	r20, r24
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 2e       	mov	r0, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_PinInit+0xba>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_PinInit+0xb6>
     bbe:	84 2b       	or	r24, r20
     bc0:	8c 93       	st	X, r24
     bc2:	ac c0       	rjmp	.+344    	; 0xd1c <DIO_PinInit+0x21c>
				break;
			case PORTC:
				SET_BIT(DDRC_Register, DIO_pin);
     bc4:	a4 e3       	ldi	r26, 0x34	; 52
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e4 e3       	ldi	r30, 0x34	; 52
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	48 2f       	mov	r20, r24
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	02 2e       	mov	r0, r18
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DIO_PinInit+0xe2>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <DIO_PinInit+0xde>
     be6:	84 2b       	or	r24, r20
     be8:	8c 93       	st	X, r24
     bea:	98 c0       	rjmp	.+304    	; 0xd1c <DIO_PinInit+0x21c>
				break;
			case PORTD:
				SET_BIT(DDRD_Register, DIO_pin);
     bec:	a1 e3       	ldi	r26, 0x31	; 49
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e1 e3       	ldi	r30, 0x31	; 49
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_PinInit+0x10a>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_PinInit+0x106>
     c0e:	84 2b       	or	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	84 c0       	rjmp	.+264    	; 0xd1c <DIO_PinInit+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	81 c0       	rjmp	.+258    	; 0xd1c <DIO_PinInit+0x21c>
				break;
			}
		} else if (DIO_direction == PIN_INPUT) {
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	88 23       	and	r24, r24
     c1e:	09 f0       	breq	.+2      	; 0xc22 <DIO_PinInit+0x122>
     c20:	78 c0       	rjmp	.+240    	; 0xd12 <DIO_PinInit+0x212>

			switch (DIO_port) {
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	3e 83       	std	Y+6, r19	; 0x06
     c2a:	2d 83       	std	Y+5, r18	; 0x05
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	91 05       	cpc	r25, r1
     c34:	61 f1       	breq	.+88     	; 0xc8e <DIO_PinInit+0x18e>
     c36:	2d 81       	ldd	r18, Y+5	; 0x05
     c38:	3e 81       	ldd	r19, Y+6	; 0x06
     c3a:	23 30       	cpi	r18, 0x03	; 3
     c3c:	31 05       	cpc	r19, r1
     c3e:	34 f4       	brge	.+12     	; 0xc4c <DIO_PinInit+0x14c>
     c40:	8d 81       	ldd	r24, Y+5	; 0x05
     c42:	9e 81       	ldd	r25, Y+6	; 0x06
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	91 05       	cpc	r25, r1
     c48:	69 f0       	breq	.+26     	; 0xc64 <DIO_PinInit+0x164>
     c4a:	60 c0       	rjmp	.+192    	; 0xd0c <DIO_PinInit+0x20c>
     c4c:	2d 81       	ldd	r18, Y+5	; 0x05
     c4e:	3e 81       	ldd	r19, Y+6	; 0x06
     c50:	23 30       	cpi	r18, 0x03	; 3
     c52:	31 05       	cpc	r19, r1
     c54:	89 f1       	breq	.+98     	; 0xcb8 <DIO_PinInit+0x1b8>
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	9e 81       	ldd	r25, Y+6	; 0x06
     c5a:	84 30       	cpi	r24, 0x04	; 4
     c5c:	91 05       	cpc	r25, r1
     c5e:	09 f4       	brne	.+2      	; 0xc62 <DIO_PinInit+0x162>
     c60:	40 c0       	rjmp	.+128    	; 0xce2 <DIO_PinInit+0x1e2>
     c62:	54 c0       	rjmp	.+168    	; 0xd0c <DIO_PinInit+0x20c>
			case PORTA:
				CLEAR_BIT(DDRA_Register, DIO_pin);
     c64:	aa e3       	ldi	r26, 0x3A	; 58
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	ea e3       	ldi	r30, 0x3A	; 58
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_PinInit+0x182>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_PinInit+0x17e>
     c86:	80 95       	com	r24
     c88:	84 23       	and	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	47 c0       	rjmp	.+142    	; 0xd1c <DIO_PinInit+0x21c>
				break;
			case PORTB:
				CLEAR_BIT(DDRB_Register, DIO_pin);
     c8e:	a7 e3       	ldi	r26, 0x37	; 55
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e7 e3       	ldi	r30, 0x37	; 55
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_PinInit+0x1ac>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_PinInit+0x1a8>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	32 c0       	rjmp	.+100    	; 0xd1c <DIO_PinInit+0x21c>
				break;
			case PORTC:
				CLEAR_BIT(DDRC_Register, DIO_pin);
     cb8:	a4 e3       	ldi	r26, 0x34	; 52
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e4 e3       	ldi	r30, 0x34	; 52
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_PinInit+0x1d6>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_PinInit+0x1d2>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <DIO_PinInit+0x21c>
				break;
			case PORTD:
				CLEAR_BIT(DDRD_Register, DIO_pin);
     ce2:	a1 e3       	ldi	r26, 0x31	; 49
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e1 e3       	ldi	r30, 0x31	; 49
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_PinInit+0x200>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_PinInit+0x1fc>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <DIO_PinInit+0x21c>
				break;
			default:
				ErrorValue = EXIT_FAILURE;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <DIO_PinInit+0x21c>
				break;
			}
		}

		else {
			ErrorValue = EXIT_FAILURE;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_PinInit+0x21c>
		}
	}

	else {
		ErrorValue = EXIT_FAILURE;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d1e:	28 96       	adiw	r28, 0x08	; 8
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <DIO_PinEnablePullUp>:

DIO_ERROR_RETVAL_t DIO_PinEnablePullUp(DIO_PORT_ID_t DIO_port,
		DIO_PIN_ID_t DIO_pin) {
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <DIO_PinEnablePullUp+0x6>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <DIO_PinEnablePullUp+0x8>
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	8a 83       	std	Y+2, r24	; 0x02
     d40:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     d42:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	85 30       	cpi	r24, 0x05	; 5
     d48:	08 f0       	brcs	.+2      	; 0xd4c <DIO_PinEnablePullUp+0x1c>
     d4a:	99 c0       	rjmp	.+306    	; 0xe7e <DIO_PinEnablePullUp+0x14e>
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	88 30       	cpi	r24, 0x08	; 8
     d50:	08 f0       	brcs	.+2      	; 0xd54 <DIO_PinEnablePullUp+0x24>
     d52:	95 c0       	rjmp	.+298    	; 0xe7e <DIO_PinEnablePullUp+0x14e>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3d 83       	std	Y+5, r19	; 0x05
     d5c:	2c 83       	std	Y+4, r18	; 0x04
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	91 05       	cpc	r25, r1
     d66:	a1 f1       	breq	.+104    	; 0xdd0 <DIO_PinEnablePullUp+0xa0>
     d68:	2c 81       	ldd	r18, Y+4	; 0x04
     d6a:	3d 81       	ldd	r19, Y+5	; 0x05
     d6c:	23 30       	cpi	r18, 0x03	; 3
     d6e:	31 05       	cpc	r19, r1
     d70:	34 f4       	brge	.+12     	; 0xd7e <DIO_PinEnablePullUp+0x4e>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	71 f0       	breq	.+28     	; 0xd98 <DIO_PinEnablePullUp+0x68>
     d7c:	7d c0       	rjmp	.+250    	; 0xe78 <DIO_PinEnablePullUp+0x148>
     d7e:	2c 81       	ldd	r18, Y+4	; 0x04
     d80:	3d 81       	ldd	r19, Y+5	; 0x05
     d82:	23 30       	cpi	r18, 0x03	; 3
     d84:	31 05       	cpc	r19, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <DIO_PinEnablePullUp+0x5a>
     d88:	3f c0       	rjmp	.+126    	; 0xe08 <DIO_PinEnablePullUp+0xd8>
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	91 05       	cpc	r25, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <DIO_PinEnablePullUp+0x66>
     d94:	55 c0       	rjmp	.+170    	; 0xe40 <DIO_PinEnablePullUp+0x110>
     d96:	70 c0       	rjmp	.+224    	; 0xe78 <DIO_PinEnablePullUp+0x148>
		case PORTA:
			if (READ_REG(DDRA_Register) == PIN_INPUT) {
     d98:	ea e3       	ldi	r30, 0x3A	; 58
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	88 23       	and	r24, r24
     da0:	a1 f4       	brne	.+40     	; 0xdca <DIO_PinEnablePullUp+0x9a>
				SET_BIT(PORTA_Register, DIO_pin);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_PinEnablePullUp+0x90>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_PinEnablePullUp+0x8c>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	5c c0       	rjmp	.+184    	; 0xe82 <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	59 c0       	rjmp	.+178    	; 0xe82 <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PIN_INPUT) {
     dd0:	e7 e3       	ldi	r30, 0x37	; 55
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 23       	and	r24, r24
     dd8:	a1 f4       	brne	.+40     	; 0xe02 <DIO_PinEnablePullUp+0xd2>
				SET_BIT(PORTB_Register, DIO_pin);
     dda:	a8 e3       	ldi	r26, 0x38	; 56
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 e3       	ldi	r30, 0x38	; 56
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_PinEnablePullUp+0xc8>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_PinEnablePullUp+0xc4>
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	40 c0       	rjmp	.+128    	; 0xe82 <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	3d c0       	rjmp	.+122    	; 0xe82 <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PIN_INPUT) {
     e08:	e4 e3       	ldi	r30, 0x34	; 52
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 23       	and	r24, r24
     e10:	a1 f4       	brne	.+40     	; 0xe3a <DIO_PinEnablePullUp+0x10a>
				SET_BIT(PORTC_Register, DIO_pin);
     e12:	a5 e3       	ldi	r26, 0x35	; 53
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e5 e3       	ldi	r30, 0x35	; 53
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_PinEnablePullUp+0x100>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_PinEnablePullUp+0xfc>
     e34:	84 2b       	or	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	24 c0       	rjmp	.+72     	; 0xe82 <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	21 c0       	rjmp	.+66     	; 0xe82 <DIO_PinEnablePullUp+0x152>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PIN_INPUT) {
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	a1 f4       	brne	.+40     	; 0xe72 <DIO_PinEnablePullUp+0x142>
				SET_BIT(PORTD_Register, DIO_pin);
     e4a:	a2 e3       	ldi	r26, 0x32	; 50
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e2 e3       	ldi	r30, 0x32	; 50
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_PinEnablePullUp+0x138>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_PinEnablePullUp+0x134>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	08 c0       	rjmp	.+16     	; 0xe82 <DIO_PinEnablePullUp+0x152>
			} else {
				ErrorValue = EXIT_FAILURE;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <DIO_PinEnablePullUp+0x152>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_PinEnablePullUp+0x152>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <DIO_SetPortVal>:

DIO_ERROR_RETVAL_t DIO_SetPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <DIO_SetPortVal+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_SetPortVal+0x8>
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	8a 83       	std	Y+2, r24	; 0x02
     ea4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     ea6:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	85 30       	cpi	r24, 0x05	; 5
     eac:	b8 f5       	brcc	.+110    	; 0xf1c <DIO_SetPortVal+0x88>
		switch (DIO_port) {
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3d 83       	std	Y+5, r19	; 0x05
     eb6:	2c 83       	std	Y+4, r18	; 0x04
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	91 05       	cpc	r25, r1
     ec0:	d9 f0       	breq	.+54     	; 0xef8 <DIO_SetPortVal+0x64>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	23 30       	cpi	r18, 0x03	; 3
     ec8:	31 05       	cpc	r19, r1
     eca:	34 f4       	brge	.+12     	; 0xed8 <DIO_SetPortVal+0x44>
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	61 f0       	breq	.+24     	; 0xeee <DIO_SetPortVal+0x5a>
     ed6:	1f c0       	rjmp	.+62     	; 0xf16 <DIO_SetPortVal+0x82>
     ed8:	2c 81       	ldd	r18, Y+4	; 0x04
     eda:	3d 81       	ldd	r19, Y+5	; 0x05
     edc:	23 30       	cpi	r18, 0x03	; 3
     ede:	31 05       	cpc	r19, r1
     ee0:	81 f0       	breq	.+32     	; 0xf02 <DIO_SetPortVal+0x6e>
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	91 05       	cpc	r25, r1
     eea:	81 f0       	breq	.+32     	; 0xf0c <DIO_SetPortVal+0x78>
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <DIO_SetPortVal+0x82>
		case PORTA:

			WRITE_REG(PORTA_Register, value);
     eee:	eb e3       	ldi	r30, 0x3B	; 59
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	80 83       	st	Z, r24
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <DIO_SetPortVal+0x8c>

			break;
		case PORTB:

			WRITE_REG(PORTB_Register, value);
     ef8:	e8 e3       	ldi	r30, 0x38	; 56
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	80 83       	st	Z, r24
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <DIO_SetPortVal+0x8c>

			break;
		case PORTC:

			WRITE_REG(PORTC_Register, value);
     f02:	e5 e3       	ldi	r30, 0x35	; 53
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	80 83       	st	Z, r24
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <DIO_SetPortVal+0x8c>

			break;
		case PORTD:

			WRITE_REG(PORTD_Register, value);
     f0c:	e2 e3       	ldi	r30, 0x32	; 50
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	80 83       	st	Z, r24
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <DIO_SetPortVal+0x8c>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_SetPortVal+0x8c>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <DIO_ClrPortVal>:

DIO_ERROR_RETVAL_t DIO_ClrPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	29 97       	sbiw	r28, 0x09	; 9
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	8a 83       	std	Y+2, r24	; 0x02
     f48:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
     f4a:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	85 30       	cpi	r24, 0x05	; 5
     f50:	08 f0       	brcs	.+2      	; 0xf54 <DIO_ClrPortVal+0x22>
     f52:	53 c0       	rjmp	.+166    	; 0xffa <DIO_ClrPortVal+0xc8>
		switch (DIO_port) {
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	39 87       	std	Y+9, r19	; 0x09
     f5c:	28 87       	std	Y+8, r18	; 0x08
     f5e:	88 85       	ldd	r24, Y+8	; 0x08
     f60:	99 85       	ldd	r25, Y+9	; 0x09
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	91 05       	cpc	r25, r1
     f66:	11 f1       	breq	.+68     	; 0xfac <DIO_ClrPortVal+0x7a>
     f68:	28 85       	ldd	r18, Y+8	; 0x08
     f6a:	39 85       	ldd	r19, Y+9	; 0x09
     f6c:	23 30       	cpi	r18, 0x03	; 3
     f6e:	31 05       	cpc	r19, r1
     f70:	34 f4       	brge	.+12     	; 0xf7e <DIO_ClrPortVal+0x4c>
     f72:	88 85       	ldd	r24, Y+8	; 0x08
     f74:	99 85       	ldd	r25, Y+9	; 0x09
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	91 05       	cpc	r25, r1
     f7a:	61 f0       	breq	.+24     	; 0xf94 <DIO_ClrPortVal+0x62>
     f7c:	3b c0       	rjmp	.+118    	; 0xff4 <DIO_ClrPortVal+0xc2>
     f7e:	28 85       	ldd	r18, Y+8	; 0x08
     f80:	39 85       	ldd	r19, Y+9	; 0x09
     f82:	23 30       	cpi	r18, 0x03	; 3
     f84:	31 05       	cpc	r19, r1
     f86:	f1 f0       	breq	.+60     	; 0xfc4 <DIO_ClrPortVal+0x92>
     f88:	88 85       	ldd	r24, Y+8	; 0x08
     f8a:	99 85       	ldd	r25, Y+9	; 0x09
     f8c:	84 30       	cpi	r24, 0x04	; 4
     f8e:	91 05       	cpc	r25, r1
     f90:	29 f1       	breq	.+74     	; 0xfdc <DIO_ClrPortVal+0xaa>
     f92:	30 c0       	rjmp	.+96     	; 0xff4 <DIO_ClrPortVal+0xc2>
		case PORTA:

			MODIFY_REG(PORTA_Register, value, ~value);
     f94:	eb e3       	ldi	r30, 0x3B	; 59
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	90 81       	ld	r25, Z
     f9a:	eb e3       	ldi	r30, 0x3B	; 59
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	80 95       	com	r24
     fa6:	90 95       	com	r25
     fa8:	80 83       	st	Z, r24
     faa:	29 c0       	rjmp	.+82     	; 0xffe <DIO_ClrPortVal+0xcc>

			break;
		case PORTB:

			MODIFY_REG(PORTB_Register, value, ~value);
     fac:	e8 e3       	ldi	r30, 0x38	; 56
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	20 81       	ld	r18, Z
     fb2:	e8 e3       	ldi	r30, 0x38	; 56
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	80 95       	com	r24
     fbe:	90 95       	com	r25
     fc0:	80 83       	st	Z, r24
     fc2:	1d c0       	rjmp	.+58     	; 0xffe <DIO_ClrPortVal+0xcc>

			break;
		case PORTC:

			MODIFY_REG(PORTC_Register, value, ~value);
     fc4:	e5 e3       	ldi	r30, 0x35	; 53
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	30 81       	ld	r19, Z
     fca:	e5 e3       	ldi	r30, 0x35	; 53
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	80 95       	com	r24
     fd6:	90 95       	com	r25
     fd8:	80 83       	st	Z, r24
     fda:	11 c0       	rjmp	.+34     	; 0xffe <DIO_ClrPortVal+0xcc>

			break;
		case PORTD:

			MODIFY_REG(PORTD_Register, value, ~value);
     fdc:	e2 e3       	ldi	r30, 0x32	; 50
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	e2 e3       	ldi	r30, 0x32	; 50
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	80 95       	com	r24
     fee:	90 95       	com	r25
     ff0:	80 83       	st	Z, r24
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <DIO_ClrPortVal+0xcc>

			break;
		default:
			ErrorValue = EXIT_FAILURE;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_ClrPortVal+0xcc>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	29 96       	adiw	r28, 0x09	; 9
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_SetPinVal>:

DIO_ERROR_RETVAL_t DIO_SetPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin,
		Byte value) {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	28 97       	sbiw	r28, 0x08	; 8
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	8a 83       	std	Y+2, r24	; 0x02
    1028:	6b 83       	std	Y+3, r22	; 0x03
    102a:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    102c:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	85 30       	cpi	r24, 0x05	; 5
    1032:	08 f0       	brcs	.+2      	; 0x1036 <DIO_SetPinVal+0x24>
    1034:	0f c2       	rjmp	.+1054   	; 0x1454 <DIO_SetPinVal+0x442>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	88 30       	cpi	r24, 0x08	; 8
    103a:	08 f0       	brcs	.+2      	; 0x103e <DIO_SetPinVal+0x2c>
    103c:	0b c2       	rjmp	.+1046   	; 0x1454 <DIO_SetPinVal+0x442>
		if (value == PIN_HIGH) {
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	09 f0       	breq	.+2      	; 0x1046 <DIO_SetPinVal+0x34>
    1044:	fe c0       	rjmp	.+508    	; 0x1242 <DIO_SetPinVal+0x230>

			switch (DIO_port) {
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	38 87       	std	Y+8, r19	; 0x08
    104e:	2f 83       	std	Y+7, r18	; 0x07
    1050:	4f 81       	ldd	r20, Y+7	; 0x07
    1052:	58 85       	ldd	r21, Y+8	; 0x08
    1054:	42 30       	cpi	r20, 0x02	; 2
    1056:	51 05       	cpc	r21, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <DIO_SetPinVal+0x4a>
    105a:	4e c0       	rjmp	.+156    	; 0x10f8 <DIO_SetPinVal+0xe6>
    105c:	8f 81       	ldd	r24, Y+7	; 0x07
    105e:	98 85       	ldd	r25, Y+8	; 0x08
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	34 f4       	brge	.+12     	; 0x1072 <DIO_SetPinVal+0x60>
    1066:	2f 81       	ldd	r18, Y+7	; 0x07
    1068:	38 85       	ldd	r19, Y+8	; 0x08
    106a:	21 30       	cpi	r18, 0x01	; 1
    106c:	31 05       	cpc	r19, r1
    106e:	71 f0       	breq	.+28     	; 0x108c <DIO_SetPinVal+0x7a>
    1070:	e5 c0       	rjmp	.+458    	; 0x123c <DIO_SetPinVal+0x22a>
    1072:	4f 81       	ldd	r20, Y+7	; 0x07
    1074:	58 85       	ldd	r21, Y+8	; 0x08
    1076:	43 30       	cpi	r20, 0x03	; 3
    1078:	51 05       	cpc	r21, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <DIO_SetPinVal+0x6c>
    107c:	73 c0       	rjmp	.+230    	; 0x1164 <DIO_SetPinVal+0x152>
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	91 05       	cpc	r25, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <DIO_SetPinVal+0x78>
    1088:	a3 c0       	rjmp	.+326    	; 0x11d0 <DIO_SetPinVal+0x1be>
    108a:	d8 c0       	rjmp	.+432    	; 0x123c <DIO_SetPinVal+0x22a>
			case PORTA:
				if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    108c:	ea e3       	ldi	r30, 0x3A	; 58
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_SetPinVal+0x94>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	2a 95       	dec	r18
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_SetPinVal+0x90>
    10aa:	9a 01       	movw	r18, r20
    10ac:	28 23       	and	r18, r24
    10ae:	39 23       	and	r19, r25
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_SetPinVal+0xac>
    10ba:	55 95       	asr	r21
    10bc:	47 95       	ror	r20
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_SetPinVal+0xa8>
    10c2:	ca 01       	movw	r24, r20
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <DIO_SetPinVal+0xe0>
					SET_BIT(PORTA_Register, DIO_pin);
    10ca:	ab e3       	ldi	r26, 0x3B	; 59
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	eb e3       	ldi	r30, 0x3B	; 59
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_SetPinVal+0xd6>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_SetPinVal+0xd2>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	b3 c1       	rjmp	.+870    	; 0x1458 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	b0 c1       	rjmp	.+864    	; 0x1458 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    10f8:	e7 e3       	ldi	r30, 0x37	; 55
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_SetPinVal+0x100>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	2a 95       	dec	r18
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_SetPinVal+0xfc>
    1116:	9a 01       	movw	r18, r20
    1118:	28 23       	and	r18, r24
    111a:	39 23       	and	r19, r25
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_SetPinVal+0x118>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_SetPinVal+0x114>
    112e:	ca 01       	movw	r24, r20
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	91 05       	cpc	r25, r1
    1134:	a1 f4       	brne	.+40     	; 0x115e <DIO_SetPinVal+0x14c>
					SET_BIT(PORTB_Register, DIO_pin);
    1136:	a8 e3       	ldi	r26, 0x38	; 56
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e8 e3       	ldi	r30, 0x38	; 56
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_SetPinVal+0x142>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_SetPinVal+0x13e>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	7d c1       	rjmp	.+762    	; 0x1458 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	7a c1       	rjmp	.+756    	; 0x1458 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_SetPinVal+0x16c>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	2a 95       	dec	r18
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_SetPinVal+0x168>
    1182:	9a 01       	movw	r18, r20
    1184:	28 23       	and	r18, r24
    1186:	39 23       	and	r19, r25
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a9 01       	movw	r20, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_SetPinVal+0x184>
    1192:	55 95       	asr	r21
    1194:	47 95       	ror	r20
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_SetPinVal+0x180>
    119a:	ca 01       	movw	r24, r20
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	91 05       	cpc	r25, r1
    11a0:	a1 f4       	brne	.+40     	; 0x11ca <DIO_SetPinVal+0x1b8>
					SET_BIT(PORTC_Register, DIO_pin);
    11a2:	a5 e3       	ldi	r26, 0x35	; 53
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e3       	ldi	r30, 0x35	; 53
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_SetPinVal+0x1ae>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_SetPinVal+0x1aa>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	47 c1       	rjmp	.+654    	; 0x1458 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	44 c1       	rjmp	.+648    	; 0x1458 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    11d0:	e1 e3       	ldi	r30, 0x31	; 49
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_SetPinVal+0x1d8>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	2a 95       	dec	r18
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_SetPinVal+0x1d4>
    11ee:	9a 01       	movw	r18, r20
    11f0:	28 23       	and	r18, r24
    11f2:	39 23       	and	r19, r25
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a9 01       	movw	r20, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_SetPinVal+0x1f0>
    11fe:	55 95       	asr	r21
    1200:	47 95       	ror	r20
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_SetPinVal+0x1ec>
    1206:	ca 01       	movw	r24, r20
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	a1 f4       	brne	.+40     	; 0x1236 <DIO_SetPinVal+0x224>
					SET_BIT(PORTD_Register, DIO_pin);
    120e:	a2 e3       	ldi	r26, 0x32	; 50
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e2 e3       	ldi	r30, 0x32	; 50
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_SetPinVal+0x21a>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_SetPinVal+0x216>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	11 c1       	rjmp	.+546    	; 0x1458 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	0e c1       	rjmp	.+540    	; 0x1458 <DIO_SetPinVal+0x446>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	0b c1       	rjmp	.+534    	; 0x1458 <DIO_SetPinVal+0x446>
				break;
			}
		} else if (value == PIN_LOW) {
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	88 23       	and	r24, r24
    1246:	09 f0       	breq	.+2      	; 0x124a <DIO_SetPinVal+0x238>
    1248:	02 c1       	rjmp	.+516    	; 0x144e <DIO_SetPinVal+0x43c>

			switch (DIO_port) {
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3e 83       	std	Y+6, r19	; 0x06
    1252:	2d 83       	std	Y+5, r18	; 0x05
    1254:	4d 81       	ldd	r20, Y+5	; 0x05
    1256:	5e 81       	ldd	r21, Y+6	; 0x06
    1258:	42 30       	cpi	r20, 0x02	; 2
    125a:	51 05       	cpc	r21, r1
    125c:	09 f4       	brne	.+2      	; 0x1260 <DIO_SetPinVal+0x24e>
    125e:	4f c0       	rjmp	.+158    	; 0x12fe <DIO_SetPinVal+0x2ec>
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	91 05       	cpc	r25, r1
    1268:	34 f4       	brge	.+12     	; 0x1276 <DIO_SetPinVal+0x264>
    126a:	2d 81       	ldd	r18, Y+5	; 0x05
    126c:	3e 81       	ldd	r19, Y+6	; 0x06
    126e:	21 30       	cpi	r18, 0x01	; 1
    1270:	31 05       	cpc	r19, r1
    1272:	71 f0       	breq	.+28     	; 0x1290 <DIO_SetPinVal+0x27e>
    1274:	e9 c0       	rjmp	.+466    	; 0x1448 <DIO_SetPinVal+0x436>
    1276:	4d 81       	ldd	r20, Y+5	; 0x05
    1278:	5e 81       	ldd	r21, Y+6	; 0x06
    127a:	43 30       	cpi	r20, 0x03	; 3
    127c:	51 05       	cpc	r21, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <DIO_SetPinVal+0x270>
    1280:	75 c0       	rjmp	.+234    	; 0x136c <DIO_SetPinVal+0x35a>
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	91 05       	cpc	r25, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <DIO_SetPinVal+0x27c>
    128c:	a6 c0       	rjmp	.+332    	; 0x13da <DIO_SetPinVal+0x3c8>
    128e:	dc c0       	rjmp	.+440    	; 0x1448 <DIO_SetPinVal+0x436>
			case PORTA:
				if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    1290:	ea e3       	ldi	r30, 0x3A	; 58
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_SetPinVal+0x298>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	2a 95       	dec	r18
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_SetPinVal+0x294>
    12ae:	9a 01       	movw	r18, r20
    12b0:	28 23       	and	r18, r24
    12b2:	39 23       	and	r19, r25
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_SetPinVal+0x2b0>
    12be:	55 95       	asr	r21
    12c0:	47 95       	ror	r20
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_SetPinVal+0x2ac>
    12c6:	ca 01       	movw	r24, r20
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	a9 f4       	brne	.+42     	; 0x12f8 <DIO_SetPinVal+0x2e6>
					CLEAR_BIT(PORTA_Register, DIO_pin);
    12ce:	ab e3       	ldi	r26, 0x3B	; 59
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_SetPinVal+0x2da>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_SetPinVal+0x2d6>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	b0 c0       	rjmp	.+352    	; 0x1458 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	ad c0       	rjmp	.+346    	; 0x1458 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTB:
				if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    12fe:	e7 e3       	ldi	r30, 0x37	; 55
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_SetPinVal+0x306>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	2a 95       	dec	r18
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_SetPinVal+0x302>
    131c:	9a 01       	movw	r18, r20
    131e:	28 23       	and	r18, r24
    1320:	39 23       	and	r19, r25
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a9 01       	movw	r20, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_SetPinVal+0x31e>
    132c:	55 95       	asr	r21
    132e:	47 95       	ror	r20
    1330:	8a 95       	dec	r24
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_SetPinVal+0x31a>
    1334:	ca 01       	movw	r24, r20
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	a9 f4       	brne	.+42     	; 0x1366 <DIO_SetPinVal+0x354>
					CLEAR_BIT(PORTB_Register, DIO_pin);
    133c:	a8 e3       	ldi	r26, 0x38	; 56
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e8 e3       	ldi	r30, 0x38	; 56
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_SetPinVal+0x348>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_SetPinVal+0x344>
    135e:	80 95       	com	r24
    1360:	84 23       	and	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	79 c0       	rjmp	.+242    	; 0x1458 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	76 c0       	rjmp	.+236    	; 0x1458 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTC:
				if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    136c:	e4 e3       	ldi	r30, 0x34	; 52
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_SetPinVal+0x374>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	2a 95       	dec	r18
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_SetPinVal+0x370>
    138a:	9a 01       	movw	r18, r20
    138c:	28 23       	and	r18, r24
    138e:	39 23       	and	r19, r25
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_SetPinVal+0x38c>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_SetPinVal+0x388>
    13a2:	ca 01       	movw	r24, r20
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	a9 f4       	brne	.+42     	; 0x13d4 <DIO_SetPinVal+0x3c2>
					CLEAR_BIT(PORTC_Register, DIO_pin);
    13aa:	a5 e3       	ldi	r26, 0x35	; 53
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e3       	ldi	r30, 0x35	; 53
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_SetPinVal+0x3b6>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_SetPinVal+0x3b2>
    13cc:	80 95       	com	r24
    13ce:	84 23       	and	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	42 c0       	rjmp	.+132    	; 0x1458 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	3f c0       	rjmp	.+126    	; 0x1458 <DIO_SetPinVal+0x446>
				}
				break;
			case PORTD:
				if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    13da:	e1 e3       	ldi	r30, 0x31	; 49
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_SetPinVal+0x3e2>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	2a 95       	dec	r18
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_SetPinVal+0x3de>
    13f8:	9a 01       	movw	r18, r20
    13fa:	28 23       	and	r18, r24
    13fc:	39 23       	and	r19, r25
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_SetPinVal+0x3fa>
    1408:	55 95       	asr	r21
    140a:	47 95       	ror	r20
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_SetPinVal+0x3f6>
    1410:	ca 01       	movw	r24, r20
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	91 05       	cpc	r25, r1
    1416:	a9 f4       	brne	.+42     	; 0x1442 <DIO_SetPinVal+0x430>
					CLEAR_BIT(PORTD_Register, DIO_pin);
    1418:	a2 e3       	ldi	r26, 0x32	; 50
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e3       	ldi	r30, 0x32	; 50
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_SetPinVal+0x424>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_SetPinVal+0x420>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	0b c0       	rjmp	.+22     	; 0x1458 <DIO_SetPinVal+0x446>
				} else {
					ErrorValue = EXIT_FAILURE;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <DIO_SetPinVal+0x446>
				}
				break;
			default:
				ErrorValue = EXIT_FAILURE;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <DIO_SetPinVal+0x446>
				break;
			}
		} else {
			ErrorValue = EXIT_FAILURE;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_SetPinVal+0x446>
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
}
    145a:	28 96       	adiw	r28, 0x08	; 8
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <DIO_GetPortVal>:

Byte DIO_GetPortVal(DIO_PORT_ID_t DIO_port) {
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <DIO_GetPortVal+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <DIO_GetPortVal+0x8>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	8a 83       	std	Y+2, r24	; 0x02
	Byte RETVAL = EXIT_FAILURE;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD)) {
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	85 30       	cpi	r24, 0x05	; 5
    1482:	b8 f5       	brcc	.+110    	; 0x14f2 <DIO_GetPortVal+0x86>
		/* Check on the Required PORT Number */
		switch (DIO_port) {
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3c 83       	std	Y+4, r19	; 0x04
    148c:	2b 83       	std	Y+3, r18	; 0x03
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	91 05       	cpc	r25, r1
    1496:	d9 f0       	breq	.+54     	; 0x14ce <DIO_GetPortVal+0x62>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	23 30       	cpi	r18, 0x03	; 3
    149e:	31 05       	cpc	r19, r1
    14a0:	34 f4       	brge	.+12     	; 0x14ae <DIO_GetPortVal+0x42>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <DIO_GetPortVal+0x58>
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <DIO_GetPortVal+0x80>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	23 30       	cpi	r18, 0x03	; 3
    14b4:	31 05       	cpc	r19, r1
    14b6:	81 f0       	breq	.+32     	; 0x14d8 <DIO_GetPortVal+0x6c>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	84 30       	cpi	r24, 0x04	; 4
    14be:	91 05       	cpc	r25, r1
    14c0:	81 f0       	breq	.+32     	; 0x14e2 <DIO_GetPortVal+0x76>
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <DIO_GetPortVal+0x80>
		case PORTA:
			RETVAL = READ_REG(PINA_Register);
    14c4:	e9 e3       	ldi	r30, 0x39	; 57
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <DIO_GetPortVal+0x8a>
			break;
		case PORTB:
			RETVAL = READ_REG(PINB_Register);
    14ce:	e6 e3       	ldi	r30, 0x36	; 54
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <DIO_GetPortVal+0x8a>
			break;
		case PORTC:
			RETVAL = READ_REG(PINC_Register);
    14d8:	e3 e3       	ldi	r30, 0x33	; 51
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	0a c0       	rjmp	.+20     	; 0x14f6 <DIO_GetPortVal+0x8a>
			break;
		case PORTD:
			RETVAL = READ_REG(PIND_Register);
    14e2:	e0 e3       	ldi	r30, 0x30	; 48
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <DIO_GetPortVal+0x8a>
			break;
		default:
			RETVAL = EXIT_FAILURE;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_GetPortVal+0x8a>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return RETVAL;
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <DIO_GetPinVal>:

Byte DIO_GetPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin) {
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <DIO_GetPinVal+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <DIO_GetPinVal+0x8>
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	8a 83       	std	Y+2, r24	; 0x02
    1516:	6b 83       	std	Y+3, r22	; 0x03

	Byte RETVAL = EXIT_FAILURE;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	89 83       	std	Y+1, r24	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	85 30       	cpi	r24, 0x05	; 5
    1520:	08 f0       	brcs	.+2      	; 0x1524 <DIO_GetPinVal+0x1e>
    1522:	9e c0       	rjmp	.+316    	; 0x1660 <DIO_GetPinVal+0x15a>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	08 f0       	brcs	.+2      	; 0x152c <DIO_GetPinVal+0x26>
    152a:	9a c0       	rjmp	.+308    	; 0x1660 <DIO_GetPinVal+0x15a>

		switch (DIO_port) {
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3d 83       	std	Y+5, r19	; 0x05
    1534:	2c 83       	std	Y+4, r18	; 0x04
    1536:	4c 81       	ldd	r20, Y+4	; 0x04
    1538:	5d 81       	ldd	r21, Y+5	; 0x05
    153a:	42 30       	cpi	r20, 0x02	; 2
    153c:	51 05       	cpc	r21, r1
    153e:	b1 f1       	breq	.+108    	; 0x15ac <DIO_GetPinVal+0xa6>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	91 05       	cpc	r25, r1
    1548:	34 f4       	brge	.+12     	; 0x1556 <DIO_GetPinVal+0x50>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	21 30       	cpi	r18, 0x01	; 1
    1550:	31 05       	cpc	r19, r1
    1552:	71 f0       	breq	.+28     	; 0x1570 <DIO_GetPinVal+0x6a>
    1554:	87 c0       	rjmp	.+270    	; 0x1664 <DIO_GetPinVal+0x15e>
    1556:	4c 81       	ldd	r20, Y+4	; 0x04
    1558:	5d 81       	ldd	r21, Y+5	; 0x05
    155a:	43 30       	cpi	r20, 0x03	; 3
    155c:	51 05       	cpc	r21, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <DIO_GetPinVal+0x5c>
    1560:	43 c0       	rjmp	.+134    	; 0x15e8 <DIO_GetPinVal+0xe2>
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	91 05       	cpc	r25, r1
    156a:	09 f4       	brne	.+2      	; 0x156e <DIO_GetPinVal+0x68>
    156c:	5b c0       	rjmp	.+182    	; 0x1624 <DIO_GetPinVal+0x11e>
    156e:	7a c0       	rjmp	.+244    	; 0x1664 <DIO_GetPinVal+0x15e>
		case PORTA:
			RETVAL = READ_BIT(PINA_Register, DIO_pin);
    1570:	e9 e3       	ldi	r30, 0x39	; 57
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_GetPinVal+0x84>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	2a 95       	dec	r18
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_GetPinVal+0x80>
    158e:	9a 01       	movw	r18, r20
    1590:	28 23       	and	r18, r24
    1592:	39 23       	and	r19, r25
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a9 01       	movw	r20, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_GetPinVal+0x9c>
    159e:	55 95       	asr	r21
    15a0:	47 95       	ror	r20
    15a2:	8a 95       	dec	r24
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_GetPinVal+0x98>
    15a6:	ca 01       	movw	r24, r20
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	5c c0       	rjmp	.+184    	; 0x1664 <DIO_GetPinVal+0x15e>
			break;
		case PORTB:
			RETVAL = READ_BIT(PINB_Register, DIO_pin);
    15ac:	e6 e3       	ldi	r30, 0x36	; 54
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_GetPinVal+0xc0>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	2a 95       	dec	r18
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_GetPinVal+0xbc>
    15ca:	9a 01       	movw	r18, r20
    15cc:	28 23       	and	r18, r24
    15ce:	39 23       	and	r19, r25
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a9 01       	movw	r20, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_GetPinVal+0xd8>
    15da:	55 95       	asr	r21
    15dc:	47 95       	ror	r20
    15de:	8a 95       	dec	r24
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_GetPinVal+0xd4>
    15e2:	ca 01       	movw	r24, r20
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	3e c0       	rjmp	.+124    	; 0x1664 <DIO_GetPinVal+0x15e>
			break;
		case PORTC:
			RETVAL = READ_BIT(PINC_Register, DIO_pin);
    15e8:	e3 e3       	ldi	r30, 0x33	; 51
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_GetPinVal+0xfc>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	2a 95       	dec	r18
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_GetPinVal+0xf8>
    1606:	9a 01       	movw	r18, r20
    1608:	28 23       	and	r18, r24
    160a:	39 23       	and	r19, r25
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a9 01       	movw	r20, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_GetPinVal+0x114>
    1616:	55 95       	asr	r21
    1618:	47 95       	ror	r20
    161a:	8a 95       	dec	r24
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_GetPinVal+0x110>
    161e:	ca 01       	movw	r24, r20
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	20 c0       	rjmp	.+64     	; 0x1664 <DIO_GetPinVal+0x15e>
			break;
		case PORTD:
			RETVAL = READ_BIT(PIND_Register, DIO_pin);
    1624:	e0 e3       	ldi	r30, 0x30	; 48
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_GetPinVal+0x138>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	2a 95       	dec	r18
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_GetPinVal+0x134>
    1642:	9a 01       	movw	r18, r20
    1644:	28 23       	and	r18, r24
    1646:	39 23       	and	r19, r25
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a9 01       	movw	r20, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_GetPinVal+0x150>
    1652:	55 95       	asr	r21
    1654:	47 95       	ror	r20
    1656:	8a 95       	dec	r24
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_GetPinVal+0x14c>
    165a:	ca 01       	movw	r24, r20
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_GetPinVal+0x15e>
			break;
		}
	} else {
		RETVAL = EXIT_FAILURE;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
	}

	return RETVAL;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <DIO_TogPortVal>:

DIO_ERROR_RETVAL_t DIO_TogPortVal(DIO_PORT_ID_t DIO_port, Byte value) {
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_TogPortVal+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_TogPortVal+0x8>
    167e:	0f 92       	push	r0
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1688:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD)) {
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	85 30       	cpi	r24, 0x05	; 5
    168e:	08 f0       	brcs	.+2      	; 0x1692 <DIO_TogPortVal+0x1c>
    1690:	67 c0       	rjmp	.+206    	; 0x1760 <DIO_TogPortVal+0xea>
		switch (DIO_port) {
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	3d 83       	std	Y+5, r19	; 0x05
    169a:	2c 83       	std	Y+4, r18	; 0x04
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	82 30       	cpi	r24, 0x02	; 2
    16a2:	91 05       	cpc	r25, r1
    16a4:	39 f1       	breq	.+78     	; 0x16f4 <DIO_TogPortVal+0x7e>
    16a6:	2c 81       	ldd	r18, Y+4	; 0x04
    16a8:	3d 81       	ldd	r19, Y+5	; 0x05
    16aa:	23 30       	cpi	r18, 0x03	; 3
    16ac:	31 05       	cpc	r19, r1
    16ae:	34 f4       	brge	.+12     	; 0x16bc <DIO_TogPortVal+0x46>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <DIO_TogPortVal+0x5c>
    16ba:	4f c0       	rjmp	.+158    	; 0x175a <DIO_TogPortVal+0xe4>
    16bc:	2c 81       	ldd	r18, Y+4	; 0x04
    16be:	3d 81       	ldd	r19, Y+5	; 0x05
    16c0:	23 30       	cpi	r18, 0x03	; 3
    16c2:	31 05       	cpc	r19, r1
    16c4:	41 f1       	breq	.+80     	; 0x1716 <DIO_TogPortVal+0xa0>
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	91 05       	cpc	r25, r1
    16ce:	a1 f1       	breq	.+104    	; 0x1738 <DIO_TogPortVal+0xc2>
    16d0:	44 c0       	rjmp	.+136    	; 0x175a <DIO_TogPortVal+0xe4>
		case PORTA:
			if (READ_REG(DDRA_Register) == PORT_OUTPUT) {
    16d2:	ea e3       	ldi	r30, 0x3A	; 58
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	8f 3f       	cpi	r24, 0xFF	; 255
    16da:	49 f4       	brne	.+18     	; 0x16ee <DIO_TogPortVal+0x78>
				TOG_REG(PORTA_Register, value);
    16dc:	ab e3       	ldi	r26, 0x3B	; 59
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	eb e3       	ldi	r30, 0x3B	; 59
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	90 81       	ld	r25, Z
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	89 27       	eor	r24, r25
    16ea:	8c 93       	st	X, r24
    16ec:	3b c0       	rjmp	.+118    	; 0x1764 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	38 c0       	rjmp	.+112    	; 0x1764 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTB:
			if (READ_REG(DDRB_Register) == PORT_OUTPUT) {
    16f4:	e7 e3       	ldi	r30, 0x37	; 55
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 3f       	cpi	r24, 0xFF	; 255
    16fc:	49 f4       	brne	.+18     	; 0x1710 <DIO_TogPortVal+0x9a>
				TOG_REG(PORTB_Register, value);
    16fe:	a8 e3       	ldi	r26, 0x38	; 56
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e8 e3       	ldi	r30, 0x38	; 56
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	90 81       	ld	r25, Z
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	89 27       	eor	r24, r25
    170c:	8c 93       	st	X, r24
    170e:	2a c0       	rjmp	.+84     	; 0x1764 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	27 c0       	rjmp	.+78     	; 0x1764 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTC:
			if (READ_REG(DDRC_Register) == PORT_OUTPUT) {
    1716:	e4 e3       	ldi	r30, 0x34	; 52
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8f 3f       	cpi	r24, 0xFF	; 255
    171e:	49 f4       	brne	.+18     	; 0x1732 <DIO_TogPortVal+0xbc>
				TOG_REG(PORTC_Register, value);
    1720:	a5 e3       	ldi	r26, 0x35	; 53
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e5 e3       	ldi	r30, 0x35	; 53
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	90 81       	ld	r25, Z
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	89 27       	eor	r24, r25
    172e:	8c 93       	st	X, r24
    1730:	19 c0       	rjmp	.+50     	; 0x1764 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	16 c0       	rjmp	.+44     	; 0x1764 <DIO_TogPortVal+0xee>
			}
			break;
		case PORTD:
			if (READ_REG(DDRD_Register) == PORT_OUTPUT) {
    1738:	e1 e3       	ldi	r30, 0x31	; 49
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 3f       	cpi	r24, 0xFF	; 255
    1740:	49 f4       	brne	.+18     	; 0x1754 <DIO_TogPortVal+0xde>
				TOG_REG(PORTD_Register, value);
    1742:	a2 e3       	ldi	r26, 0x32	; 50
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e2 e3       	ldi	r30, 0x32	; 50
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	90 81       	ld	r25, Z
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	89 27       	eor	r24, r25
    1750:	8c 93       	st	X, r24
    1752:	08 c0       	rjmp	.+16     	; 0x1764 <DIO_TogPortVal+0xee>
			} else {
				ErrorValue = EXIT_FAILURE;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <DIO_TogPortVal+0xee>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_TogPortVal+0xee>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <DIO_TogPinVal>:

DIO_ERROR_RETVAL_t DIO_TogPinVal(DIO_PORT_ID_t DIO_port, DIO_PIN_ID_t DIO_pin) {
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <DIO_TogPinVal+0x6>
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_TogPinVal+0x8>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ERROR_RETVAL_t ErrorValue = EXIT_SUCCESFUL;
    1788:	19 82       	std	Y+1, r1	; 0x01
	if ((DIO_port <= PORTD) && (DIO_pin <= PIN7)) {
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	85 30       	cpi	r24, 0x05	; 5
    178e:	08 f0       	brcs	.+2      	; 0x1792 <DIO_TogPinVal+0x1c>
    1790:	02 c1       	rjmp	.+516    	; 0x1996 <DIO_TogPinVal+0x220>
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	88 30       	cpi	r24, 0x08	; 8
    1796:	08 f0       	brcs	.+2      	; 0x179a <DIO_TogPinVal+0x24>
    1798:	fe c0       	rjmp	.+508    	; 0x1996 <DIO_TogPinVal+0x220>
		switch (DIO_port) {
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3d 83       	std	Y+5, r19	; 0x05
    17a2:	2c 83       	std	Y+4, r18	; 0x04
    17a4:	4c 81       	ldd	r20, Y+4	; 0x04
    17a6:	5d 81       	ldd	r21, Y+5	; 0x05
    17a8:	42 30       	cpi	r20, 0x02	; 2
    17aa:	51 05       	cpc	r21, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <DIO_TogPinVal+0x3a>
    17ae:	4e c0       	rjmp	.+156    	; 0x184c <DIO_TogPinVal+0xd6>
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	91 05       	cpc	r25, r1
    17b8:	34 f4       	brge	.+12     	; 0x17c6 <DIO_TogPinVal+0x50>
    17ba:	2c 81       	ldd	r18, Y+4	; 0x04
    17bc:	3d 81       	ldd	r19, Y+5	; 0x05
    17be:	21 30       	cpi	r18, 0x01	; 1
    17c0:	31 05       	cpc	r19, r1
    17c2:	71 f0       	breq	.+28     	; 0x17e0 <DIO_TogPinVal+0x6a>
    17c4:	e5 c0       	rjmp	.+458    	; 0x1990 <DIO_TogPinVal+0x21a>
    17c6:	4c 81       	ldd	r20, Y+4	; 0x04
    17c8:	5d 81       	ldd	r21, Y+5	; 0x05
    17ca:	43 30       	cpi	r20, 0x03	; 3
    17cc:	51 05       	cpc	r21, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <DIO_TogPinVal+0x5c>
    17d0:	73 c0       	rjmp	.+230    	; 0x18b8 <DIO_TogPinVal+0x142>
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	84 30       	cpi	r24, 0x04	; 4
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <DIO_TogPinVal+0x68>
    17dc:	a3 c0       	rjmp	.+326    	; 0x1924 <DIO_TogPinVal+0x1ae>
    17de:	d8 c0       	rjmp	.+432    	; 0x1990 <DIO_TogPinVal+0x21a>
		case PORTA:
			if (READ_BIT(DDRA_Register, DIO_pin) == PIN_OUTPUT) {
    17e0:	ea e3       	ldi	r30, 0x3A	; 58
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_TogPinVal+0x84>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	2a 95       	dec	r18
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_TogPinVal+0x80>
    17fe:	9a 01       	movw	r18, r20
    1800:	28 23       	and	r18, r24
    1802:	39 23       	and	r19, r25
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_TogPinVal+0x9c>
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	8a 95       	dec	r24
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_TogPinVal+0x98>
    1816:	ca 01       	movw	r24, r20
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	91 05       	cpc	r25, r1
    181c:	a1 f4       	brne	.+40     	; 0x1846 <DIO_TogPinVal+0xd0>
				TOG_BIT(PORTA_Register, DIO_pin);
    181e:	ab e3       	ldi	r26, 0x3B	; 59
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	eb e3       	ldi	r30, 0x3B	; 59
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_TogPinVal+0xc6>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_TogPinVal+0xc2>
    1840:	84 27       	eor	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	aa c0       	rjmp	.+340    	; 0x199a <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	a7 c0       	rjmp	.+334    	; 0x199a <DIO_TogPinVal+0x224>
			}
			break;
		case PORTB:
			if (READ_BIT(DDRB_Register, DIO_pin) == PIN_OUTPUT) {
    184c:	e7 e3       	ldi	r30, 0x37	; 55
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_TogPinVal+0xf0>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	2a 95       	dec	r18
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_TogPinVal+0xec>
    186a:	9a 01       	movw	r18, r20
    186c:	28 23       	and	r18, r24
    186e:	39 23       	and	r19, r25
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a9 01       	movw	r20, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_TogPinVal+0x108>
    187a:	55 95       	asr	r21
    187c:	47 95       	ror	r20
    187e:	8a 95       	dec	r24
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_TogPinVal+0x104>
    1882:	ca 01       	movw	r24, r20
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	a1 f4       	brne	.+40     	; 0x18b2 <DIO_TogPinVal+0x13c>
				TOG_BIT(PORTB_Register, DIO_pin);
    188a:	a8 e3       	ldi	r26, 0x38	; 56
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e8 e3       	ldi	r30, 0x38	; 56
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_TogPinVal+0x132>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_TogPinVal+0x12e>
    18ac:	84 27       	eor	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	74 c0       	rjmp	.+232    	; 0x199a <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	71 c0       	rjmp	.+226    	; 0x199a <DIO_TogPinVal+0x224>
			}
			break;
		case PORTC:
			if (READ_BIT(DDRC_Register, DIO_pin) == PIN_OUTPUT) {
    18b8:	e4 e3       	ldi	r30, 0x34	; 52
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_TogPinVal+0x15c>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	2a 95       	dec	r18
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_TogPinVal+0x158>
    18d6:	9a 01       	movw	r18, r20
    18d8:	28 23       	and	r18, r24
    18da:	39 23       	and	r19, r25
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_TogPinVal+0x174>
    18e6:	55 95       	asr	r21
    18e8:	47 95       	ror	r20
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_TogPinVal+0x170>
    18ee:	ca 01       	movw	r24, r20
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	a1 f4       	brne	.+40     	; 0x191e <DIO_TogPinVal+0x1a8>
				TOG_BIT(PORTC_Register, DIO_pin);
    18f6:	a5 e3       	ldi	r26, 0x35	; 53
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e5 e3       	ldi	r30, 0x35	; 53
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_TogPinVal+0x19e>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_TogPinVal+0x19a>
    1918:	84 27       	eor	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	3e c0       	rjmp	.+124    	; 0x199a <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	3b c0       	rjmp	.+118    	; 0x199a <DIO_TogPinVal+0x224>
			}
			break;
		case PORTD:
			if (READ_BIT(DDRD_Register, DIO_pin) == PIN_OUTPUT) {
    1924:	e1 e3       	ldi	r30, 0x31	; 49
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_TogPinVal+0x1c8>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	2a 95       	dec	r18
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_TogPinVal+0x1c4>
    1942:	9a 01       	movw	r18, r20
    1944:	28 23       	and	r18, r24
    1946:	39 23       	and	r19, r25
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_TogPinVal+0x1e0>
    1952:	55 95       	asr	r21
    1954:	47 95       	ror	r20
    1956:	8a 95       	dec	r24
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_TogPinVal+0x1dc>
    195a:	ca 01       	movw	r24, r20
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	91 05       	cpc	r25, r1
    1960:	a1 f4       	brne	.+40     	; 0x198a <DIO_TogPinVal+0x214>
				TOG_BIT(PORTD_Register, DIO_pin);
    1962:	a2 e3       	ldi	r26, 0x32	; 50
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e2 e3       	ldi	r30, 0x32	; 50
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_TogPinVal+0x20a>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_TogPinVal+0x206>
    1984:	84 27       	eor	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	08 c0       	rjmp	.+16     	; 0x199a <DIO_TogPinVal+0x224>
			} else {
				ErrorValue = EXIT_FAILURE;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	05 c0       	rjmp	.+10     	; 0x199a <DIO_TogPinVal+0x224>
			}
			break;
		default:
			ErrorValue = EXIT_FAILURE;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_TogPinVal+0x224>
			break;
		}
	} else {
		ErrorValue = EXIT_FAILURE;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorValue;
    199a:	89 81       	ldd	r24, Y+1	; 0x01
}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <STR_Length>:
 *      Author: zoldeyck
 */
#include "STD_TYPES.h"
#include "STRING.h"
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <STR_Length+0x6>
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <STR_Length+0x8>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	7c 83       	std	Y+4, r23	; 0x04
    19be:	6b 83       	std	Y+3, r22	; 0x03
	*StringLength = 0;
    19c0:	eb 81       	ldd	r30, Y+3	; 0x03
    19c2:	fc 81       	ldd	r31, Y+4	; 0x04
    19c4:	11 82       	std	Z+1, r1	; 0x01
    19c6:	10 82       	st	Z, r1
    19c8:	0e c0       	rjmp	.+28     	; 0x19e6 <STR_Length+0x3a>
	while(*String!='\0')
	{
		(*StringLength)++;
    19ca:	eb 81       	ldd	r30, Y+3	; 0x03
    19cc:	fc 81       	ldd	r31, Y+4	; 0x04
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	eb 81       	ldd	r30, Y+3	; 0x03
    19d6:	fc 81       	ldd	r31, Y+4	; 0x04
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
		String++;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
#include "STD_TYPES.h"
#include "STRING.h"
uint8_t STR_Length(uint8_t* String, uint16_t* StringLength)
{
	*StringLength = 0;
	while(*String!='\0')
    19e6:	e9 81       	ldd	r30, Y+1	; 0x01
    19e8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ea:	80 81       	ld	r24, Z
    19ec:	88 23       	and	r24, r24
    19ee:	69 f7       	brne	.-38     	; 0x19ca <STR_Length+0x1e>
	{
		(*StringLength)++;
		String++;
	}
	return 0;
    19f0:	80 e0       	ldi	r24, 0x00	; 0
}
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <STR_CharIsNumeric>:
uint8_t STR_CharIsNumeric(uint8_t Character, uint8_t* Result)
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <STR_CharIsNumeric+0x6>
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	7b 83       	std	Y+3, r23	; 0x03
    1a10:	6a 83       	std	Y+2, r22	; 0x02
	if(Character>=48 && Character<=57)
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	80 33       	cpi	r24, 0x30	; 48
    1a16:	40 f0       	brcs	.+16     	; 0x1a28 <STR_CharIsNumeric+0x28>
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	8a 33       	cpi	r24, 0x3A	; 58
    1a1c:	28 f4       	brcc	.+10     	; 0x1a28 <STR_CharIsNumeric+0x28>
	{
		*Result=1;
    1a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a20:	fb 81       	ldd	r31, Y+3	; 0x03
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	80 83       	st	Z, r24
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <STR_CharIsNumeric+0x2e>
	}
	else
	{
		*Result=0;
    1a28:	ea 81       	ldd	r30, Y+2	; 0x02
    1a2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a2c:	10 82       	st	Z, r1
	}
	return 0;
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <STR_StringIsNumeric>:
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <STR_StringIsNumeric+0x6>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <STR_StringIsNumeric+0x8>
    1a44:	0f 92       	push	r0
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	9b 83       	std	Y+3, r25	; 0x03
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
    1a4e:	7d 83       	std	Y+5, r23	; 0x05
    1a50:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t FunRetVal = 0;
    1a52:	19 82       	std	Y+1, r1	; 0x01
    1a54:	19 c0       	rjmp	.+50     	; 0x1a88 <STR_StringIsNumeric+0x4c>
	while(*String!='\0')
	{
		STR_CharIsNumeric(*String,&FunRetVal);
    1a56:	ea 81       	ldd	r30, Y+2	; 0x02
    1a58:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5a:	80 81       	ld	r24, Z
    1a5c:	9e 01       	movw	r18, r28
    1a5e:	2f 5f       	subi	r18, 0xFF	; 255
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	b9 01       	movw	r22, r18
    1a64:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <STR_CharIsNumeric>
		if(!FunRetVal)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	88 23       	and	r24, r24
    1a6c:	21 f4       	brne	.+8      	; 0x1a76 <STR_StringIsNumeric+0x3a>
		{
			*Result = 0;
    1a6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a70:	fd 81       	ldd	r31, Y+5	; 0x05
    1a72:	10 82       	st	Z, r1
    1a74:	0e c0       	rjmp	.+28     	; 0x1a92 <STR_StringIsNumeric+0x56>
			break;
		}
		else
		{
			*Result = 1;
    1a76:	ec 81       	ldd	r30, Y+4	; 0x04
    1a78:	fd 81       	ldd	r31, Y+5	; 0x05
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 83       	st	Z, r24
			String++;
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	9b 83       	std	Y+3, r25	; 0x03
    1a86:	8a 83       	std	Y+2, r24	; 0x02
	return 0;
}
uint8_t STR_StringIsNumeric(uint8_t* String, uint8_t* Result)
{
	uint8_t FunRetVal = 0;
	while(*String!='\0')
    1a88:	ea 81       	ldd	r30, Y+2	; 0x02
    1a8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a8c:	80 81       	ld	r24, Z
    1a8e:	88 23       	and	r24, r24
    1a90:	11 f7       	brne	.-60     	; 0x1a56 <STR_StringIsNumeric+0x1a>
			*Result = 1;
			String++;
			continue;
		}
	}
	return 0;
    1a92:	80 e0       	ldi	r24, 0x00	; 0
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <STR_CompareString>:
uint8_t STR_CompareString(uint8_t* String_1, uint8_t* String_2, uint8_t* Result)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <STR_CompareString+0x6>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <STR_CompareString+0x8>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <STR_CompareString+0xa>
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	7c 83       	std	Y+4, r23	; 0x04
    1ab8:	6b 83       	std	Y+3, r22	; 0x03
    1aba:	5e 83       	std	Y+6, r21	; 0x06
    1abc:	4d 83       	std	Y+5, r20	; 0x05
	while(1)
	{
		if(*String_1==*String_2)
    1abe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac2:	90 81       	ld	r25, Z
    1ac4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ac8:	80 81       	ld	r24, Z
    1aca:	98 17       	cp	r25, r24
    1acc:	c9 f4       	brne	.+50     	; 0x1b00 <STR_CompareString+0x5c>
		{
			*Result = 1;
    1ace:	ed 81       	ldd	r30, Y+5	; 0x05
    1ad0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	80 83       	st	Z, r24
			String_1++;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
			String_2++;
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
			if(*String_1=='\0'&&*String_2=='\0')
    1aea:	e9 81       	ldd	r30, Y+1	; 0x01
    1aec:	fa 81       	ldd	r31, Y+2	; 0x02
    1aee:	80 81       	ld	r24, Z
    1af0:	88 23       	and	r24, r24
    1af2:	29 f7       	brne	.-54     	; 0x1abe <STR_CompareString+0x1a>
    1af4:	eb 81       	ldd	r30, Y+3	; 0x03
    1af6:	fc 81       	ldd	r31, Y+4	; 0x04
    1af8:	80 81       	ld	r24, Z
    1afa:	88 23       	and	r24, r24
    1afc:	99 f0       	breq	.+38     	; 0x1b24 <STR_CompareString+0x80>
    1afe:	df cf       	rjmp	.-66     	; 0x1abe <STR_CompareString+0x1a>
				break;
			continue;
		}
		else if(*String_1=='\0'&&*String_2=='\0')
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	80 81       	ld	r24, Z
    1b06:	88 23       	and	r24, r24
    1b08:	51 f4       	brne	.+20     	; 0x1b1e <STR_CompareString+0x7a>
    1b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 23       	and	r24, r24
    1b12:	29 f4       	brne	.+10     	; 0x1b1e <STR_CompareString+0x7a>
		{
			*Result = 1;
    1b14:	ed 81       	ldd	r30, Y+5	; 0x05
    1b16:	fe 81       	ldd	r31, Y+6	; 0x06
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	80 83       	st	Z, r24
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <STR_CompareString+0x80>
			break;
		}
		else
		{
			*Result = 0;
    1b1e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b20:	fe 81       	ldd	r31, Y+6	; 0x06
    1b22:	10 82       	st	Z, r1
			break;
		}
	}
	return 0;
    1b24:	80 e0       	ldi	r24, 0x00	; 0
}
    1b26:	26 96       	adiw	r28, 0x06	; 6
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <STR_String2Number>:
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	2a 97       	sbiw	r28, 0x0a	; 10
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	98 87       	std	Y+8, r25	; 0x08
    1b52:	8f 83       	std	Y+7, r24	; 0x07
    1b54:	7a 87       	std	Y+10, r23	; 0x0a
    1b56:	69 87       	std	Y+9, r22	; 0x09
	uint32_t Multiplier=1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e0       	ldi	r26, 0x00	; 0
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	8b 83       	std	Y+3, r24	; 0x03
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	ad 83       	std	Y+5, r26	; 0x05
    1b66:	be 83       	std	Y+6, r27	; 0x06
	uint8_t* StartOfString=String;
    1b68:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6a:	98 85       	ldd	r25, Y+8	; 0x08
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
	*Number=0;
    1b70:	e9 85       	ldd	r30, Y+9	; 0x09
    1b72:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b74:	11 82       	std	Z+1, r1	; 0x01
    1b76:	10 82       	st	Z, r1
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <STR_String2Number+0x4c>
	while(*String!='\0')
	{
		String++;
    1b7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7c:	98 85       	ldd	r25, Y+8	; 0x08
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	98 87       	std	Y+8, r25	; 0x08
    1b82:	8f 83       	std	Y+7, r24	; 0x07
uint8_t STR_String2Number(uint8_t* String, uint16_t* Number)
{
	uint32_t Multiplier=1;
	uint8_t* StartOfString=String;
	*Number=0;
	while(*String!='\0')
    1b84:	ef 81       	ldd	r30, Y+7	; 0x07
    1b86:	f8 85       	ldd	r31, Y+8	; 0x08
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 23       	and	r24, r24
    1b8c:	b1 f7       	brne	.-20     	; 0x1b7a <STR_String2Number+0x42>
		String++;
	}

	do
	{
		String--;
    1b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b90:	98 85       	ldd	r25, Y+8	; 0x08
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	98 87       	std	Y+8, r25	; 0x08
    1b96:	8f 83       	std	Y+7, r24	; 0x07
		(*Number)+=((*String-48)*Multiplier);
    1b98:	e9 85       	ldd	r30, Y+9	; 0x09
    1b9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b9c:	00 81       	ld	r16, Z
    1b9e:	11 81       	ldd	r17, Z+1	; 0x01
    1ba0:	ef 81       	ldd	r30, Y+7	; 0x07
    1ba2:	f8 85       	ldd	r31, Y+8	; 0x08
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	c0 97       	sbiw	r24, 0x30	; 48
    1bac:	aa 27       	eor	r26, r26
    1bae:	97 fd       	sbrc	r25, 7
    1bb0:	a0 95       	com	r26
    1bb2:	ba 2f       	mov	r27, r26
    1bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb8:	4d 81       	ldd	r20, Y+5	; 0x05
    1bba:	5e 81       	ldd	r21, Y+6	; 0x06
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 b9 10 	call	0x2172	; 0x2172 <__mulsi3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	80 0f       	add	r24, r16
    1bca:	91 1f       	adc	r25, r17
    1bcc:	e9 85       	ldd	r30, Y+9	; 0x09
    1bce:	fa 85       	ldd	r31, Y+10	; 0x0a
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
		Multiplier*=10;
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	ad 81       	ldd	r26, Y+5	; 0x05
    1bda:	be 81       	ldd	r27, Y+6	; 0x06
    1bdc:	2a e0       	ldi	r18, 0x0A	; 10
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 b9 10 	call	0x2172	; 0x2172 <__mulsi3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	ad 83       	std	Y+5, r26	; 0x05
    1bf6:	be 83       	std	Y+6, r27	; 0x06
	}while(String!=StartOfString);
    1bf8:	2f 81       	ldd	r18, Y+7	; 0x07
    1bfa:	38 85       	ldd	r19, Y+8	; 0x08
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	28 17       	cp	r18, r24
    1c02:	39 07       	cpc	r19, r25
    1c04:	21 f6       	brne	.-120    	; 0x1b8e <STR_String2Number+0x56>
	return 0;
    1c06:	80 e0       	ldi	r24, 0x00	; 0
}
    1c08:	2a 96       	adiw	r28, 0x0a	; 10
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	08 95       	ret

00001c1e <STR_Number2String>:
uint8_t STR_Number2String(uint32_t Number, uint8_t* String)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <STR_Number2String+0x6>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <STR_Number2String+0x8>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <STR_Number2String+0xa>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	69 83       	std	Y+1, r22	; 0x01
    1c2e:	7a 83       	std	Y+2, r23	; 0x02
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	9c 83       	std	Y+4, r25	; 0x04
    1c34:	5e 83       	std	Y+6, r21	; 0x06
    1c36:	4d 83       	std	Y+5, r20	; 0x05
	if(Number==0)
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	a1 05       	cpc	r26, r1
    1c44:	b1 05       	cpc	r27, r1
    1c46:	29 f4       	brne	.+10     	; 0x1c52 <STR_Number2String+0x34>
	{
		*String='0';
    1c48:	ed 81       	ldd	r30, Y+5	; 0x05
    1c4a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c4c:	80 e3       	ldi	r24, 0x30	; 48
    1c4e:	80 83       	st	Z, r24
    1c50:	31 c0       	rjmp	.+98     	; 0x1cb4 <STR_Number2String+0x96>
	}
	else
	{
		do
		{
			*String = (Number%10)+48;
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	ab 81       	ldd	r26, Y+3	; 0x03
    1c58:	bc 81       	ldd	r27, Y+4	; 0x04
    1c5a:	2a e0       	ldi	r18, 0x0A	; 10
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__udivmodsi4>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	80 5d       	subi	r24, 0xD0	; 208
    1c70:	ed 81       	ldd	r30, Y+5	; 0x05
    1c72:	fe 81       	ldd	r31, Y+6	; 0x06
    1c74:	80 83       	st	Z, r24
			String++;
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
			Number%=10;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	ab 81       	ldd	r26, Y+3	; 0x03
    1c86:	bc 81       	ldd	r27, Y+4	; 0x04
    1c88:	2a e0       	ldi	r18, 0x0A	; 10
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__udivmodsi4>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	ab 83       	std	Y+3, r26	; 0x03
    1ca2:	bc 83       	std	Y+4, r27	; 0x04
		}while(Number);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	ab 81       	ldd	r26, Y+3	; 0x03
    1caa:	bc 81       	ldd	r27, Y+4	; 0x04
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	a1 05       	cpc	r26, r1
    1cb0:	b1 05       	cpc	r27, r1
    1cb2:	79 f6       	brne	.-98     	; 0x1c52 <STR_Number2String+0x34>
	}
	STR_StringReverse(String);
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <STR_StringReverse>
	return 0;
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
}
    1cbe:	26 96       	adiw	r28, 0x06	; 6
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <STR_StringReverse>:
uint8_t STR_StringReverse(uint8_t* String)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	27 97       	sbiw	r28, 0x07	; 7
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	9f 83       	std	Y+7, r25	; 0x07
    1ce6:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t* A = String;
    1ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cea:	9f 81       	ldd	r25, Y+7	; 0x07
    1cec:	9d 83       	std	Y+5, r25	; 0x05
    1cee:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t* B = String;
    1cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf4:	9b 83       	std	Y+3, r25	; 0x03
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Temp = 0;
    1cf8:	19 82       	std	Y+1, r1	; 0x01
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <STR_StringReverse+0x36>
	while(*B != '\0')
	{
		B++;
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	9b 83       	std	Y+3, r25	; 0x03
    1d04:	8a 83       	std	Y+2, r24	; 0x02
uint8_t STR_StringReverse(uint8_t* String)
{
	uint8_t* A = String;
	uint8_t* B = String;
	uint8_t Temp = 0;
	while(*B != '\0')
    1d06:	ea 81       	ldd	r30, Y+2	; 0x02
    1d08:	fb 81       	ldd	r31, Y+3	; 0x03
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 23       	and	r24, r24
    1d0e:	b1 f7       	brne	.-20     	; 0x1cfc <STR_StringReverse+0x2c>
	{
		B++;
	}
	B--;
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	9b 81       	ldd	r25, Y+3	; 0x03
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9b 83       	std	Y+3, r25	; 0x03
    1d18:	8a 83       	std	Y+2, r24	; 0x02
    1d1a:	18 c0       	rjmp	.+48     	; 0x1d4c <STR_StringReverse+0x7c>
	while(A<B)
	{
		//swap
		Temp=*A;
    1d1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d20:	80 81       	ld	r24, Z
    1d22:	89 83       	std	Y+1, r24	; 0x01
		*A=*B;
    1d24:	ea 81       	ldd	r30, Y+2	; 0x02
    1d26:	fb 81       	ldd	r31, Y+3	; 0x03
    1d28:	80 81       	ld	r24, Z
    1d2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d2e:	80 83       	st	Z, r24
		*B=Temp;
    1d30:	ea 81       	ldd	r30, Y+2	; 0x02
    1d32:	fb 81       	ldd	r31, Y+3	; 0x03
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	80 83       	st	Z, r24
		A++;B--;
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	9d 83       	std	Y+5, r25	; 0x05
    1d40:	8c 83       	std	Y+4, r24	; 0x04
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	9b 83       	std	Y+3, r25	; 0x03
    1d4a:	8a 83       	std	Y+2, r24	; 0x02
	while(*B != '\0')
	{
		B++;
	}
	B--;
	while(A<B)
    1d4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	9b 81       	ldd	r25, Y+3	; 0x03
    1d54:	28 17       	cp	r18, r24
    1d56:	39 07       	cpc	r19, r25
    1d58:	08 f3       	brcs	.-62     	; 0x1d1c <STR_StringReverse+0x4c>
		Temp=*A;
		*A=*B;
		*B=Temp;
		A++;B--;
	}
	return 0;
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
}
    1d5c:	27 96       	adiw	r28, 0x07	; 7
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <EEPROM_Init>:
#include "../../MCAL/UART/UART.h"
#include "EEPROM_CONFIG.h"


uint8_t EEPROM_Init()
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	0f 92       	push	r0
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrRetVal = OperationStarted;
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	89 83       	std	Y+1, r24	; 0x01
	ErrRetVal = TWI_Init(TWI_Channel_1);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	0e 94 25 03 	call	0x64a	; 0x64a <TWI_Init>
    1d82:	89 83       	std	Y+1, r24	; 0x01
	return ErrRetVal;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <EEPROM_ReadByte>:
uint8_t EEPROM_ReadByte(uint8_t* Character, uint16_t ByteAddress)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <EEPROM_ReadByte+0x6>
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <EEPROM_ReadByte+0x8>
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	9b 83       	std	Y+3, r25	; 0x03
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
    1da0:	7d 83       	std	Y+5, r23	; 0x05
    1da2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t ErrRetVal = OperationStarted;
    1da4:	8f ef       	ldi	r24, 0xFF	; 255
    1da6:	89 83       	std	Y+1, r24	; 0x01
	/*Send Start Condition*/
	while(TWI_SendStartCondition(TWI_Channel_1)!=OperationSuccess);
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	0e 94 2c 04 	call	0x858	; 0x858 <TWI_SendStartCondition>
    1dae:	88 23       	and	r24, r24
    1db0:	d9 f7       	brne	.-10     	; 0x1da8 <EEPROM_ReadByte+0x1a>
	/*Check status for start condition fired correctly*/
	if(TWI_GetStatus()==TW_START)
    1db2:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1db6:	88 30       	cpi	r24, 0x08	; 8
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <EEPROM_ReadByte+0x2e>
    1dba:	78 c0       	rjmp	.+240    	; 0x1eac <EEPROM_ReadByte+0x11e>
			break;
		case EEPROM_SIZE_4K://A0 are from Byte Address
			while(TWI_WriteData(TWI_Channel_1,0b10100000|EEPROM_A2<<3|EEPROM_A1<<2|READ_BIT(ByteAddress,9)<<1|EEPROM_WRITE)!=OperationSuccess);
			break;
		case EEPROM_SIZE_8K://A0,A1 are from Byte Address
			while(TWI_WriteData(TWI_Channel_1,0b10100000|EEPROM_A2<<3|READ_BIT(ByteAddress,10)<<2|READ_BIT(ByteAddress,9)<<1|EEPROM_WRITE)!=OperationSuccess);
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc0:	80 70       	andi	r24, 0x00	; 0
    1dc2:	94 70       	andi	r25, 0x04	; 4
    1dc4:	89 2f       	mov	r24, r25
    1dc6:	99 27       	eor	r25, r25
    1dc8:	86 95       	lsr	r24
    1dca:	86 95       	lsr	r24
    1dcc:	28 2f       	mov	r18, r24
    1dce:	22 0f       	add	r18, r18
    1dd0:	22 0f       	add	r18, r18
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	80 70       	andi	r24, 0x00	; 0
    1dd8:	92 70       	andi	r25, 0x02	; 2
    1dda:	89 2f       	mov	r24, r25
    1ddc:	99 27       	eor	r25, r25
    1dde:	86 95       	lsr	r24
    1de0:	88 0f       	add	r24, r24
    1de2:	82 2b       	or	r24, r18
    1de4:	98 2f       	mov	r25, r24
    1de6:	90 6a       	ori	r25, 0xA0	; 160
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	69 2f       	mov	r22, r25
    1dec:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_WriteData>
    1df0:	88 23       	and	r24, r24
    1df2:	21 f7       	brne	.-56     	; 0x1dbc <EEPROM_ReadByte+0x2e>
			while(TWI_WriteData(TWI_Channel_1,0b10100000|READ_BIT(ByteAddress,11)<<3|READ_BIT(ByteAddress,10)<<2|READ_BIT(ByteAddress,9)<<1|EEPROM_WRITE)!=OperationSuccess);
			break;
		default:
			ErrRetVal=OperationFail;
		}
		if(TWI_GetStatus() == TW_MT_SLA_ACK)
    1df4:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1df8:	88 31       	cpi	r24, 0x18	; 24
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <EEPROM_ReadByte+0x70>
    1dfc:	54 c0       	rjmp	.+168    	; 0x1ea6 <EEPROM_ReadByte+0x118>
		{
			/*Sending the byte Address*/
			while(TWI_WriteData(TWI_Channel_1,0b00000000|ByteAddress)!=OperationSuccess);
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	69 2f       	mov	r22, r25
    1e04:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_WriteData>
    1e08:	88 23       	and	r24, r24
    1e0a:	c9 f7       	brne	.-14     	; 0x1dfe <EEPROM_ReadByte+0x70>
			if (TWI_GetStatus() == TW_MT_DATA_ACK)
    1e0c:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1e10:	88 32       	cpi	r24, 0x28	; 40
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <EEPROM_ReadByte+0x88>
    1e14:	45 c0       	rjmp	.+138    	; 0x1ea0 <EEPROM_ReadByte+0x112>
			{
				/*Send Repeated Start*/
				while(TWI_SendStartCondition(TWI_Channel_1)!=OperationSuccess);
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	0e 94 2c 04 	call	0x858	; 0x858 <TWI_SendStartCondition>
    1e1c:	88 23       	and	r24, r24
    1e1e:	d9 f7       	brne	.-10     	; 0x1e16 <EEPROM_ReadByte+0x88>
				if(TWI_GetStatus() == TW_REP_START)
    1e20:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1e24:	80 31       	cpi	r24, 0x10	; 16
    1e26:	c9 f5       	brne	.+114    	; 0x1e9a <EEPROM_ReadByte+0x10c>
						break;
					case EEPROM_SIZE_4K://A0 are from Byte Address
						while(TWI_WriteData(TWI_Channel_1,0b10100000|EEPROM_A2<<3|EEPROM_A1<<2|READ_BIT(ByteAddress,9)<<1|EEPROM_READ)!=OperationSuccess);
						break;
					case EEPROM_SIZE_8K://A0,A1 are from Byte Address
						while(TWI_WriteData(TWI_Channel_1,0b10100000|EEPROM_A2<<3|READ_BIT(ByteAddress,10)<<2|READ_BIT(ByteAddress,9)<<1|EEPROM_READ)!=OperationSuccess);
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2c:	80 70       	andi	r24, 0x00	; 0
    1e2e:	94 70       	andi	r25, 0x04	; 4
    1e30:	89 2f       	mov	r24, r25
    1e32:	99 27       	eor	r25, r25
    1e34:	86 95       	lsr	r24
    1e36:	86 95       	lsr	r24
    1e38:	28 2f       	mov	r18, r24
    1e3a:	22 0f       	add	r18, r18
    1e3c:	22 0f       	add	r18, r18
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	80 70       	andi	r24, 0x00	; 0
    1e44:	92 70       	andi	r25, 0x02	; 2
    1e46:	89 2f       	mov	r24, r25
    1e48:	99 27       	eor	r25, r25
    1e4a:	86 95       	lsr	r24
    1e4c:	88 0f       	add	r24, r24
    1e4e:	82 2b       	or	r24, r18
    1e50:	98 2f       	mov	r25, r24
    1e52:	91 6a       	ori	r25, 0xA1	; 161
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	69 2f       	mov	r22, r25
    1e58:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_WriteData>
    1e5c:	88 23       	and	r24, r24
    1e5e:	21 f7       	brne	.-56     	; 0x1e28 <EEPROM_ReadByte+0x9a>
						while(TWI_WriteData(TWI_Channel_1,0b10100000|READ_BIT(ByteAddress,11)<<3|READ_BIT(ByteAddress,10)<<2|READ_BIT(ByteAddress,9)<<1|EEPROM_READ)!=OperationSuccess);
						break;
					default:
						ErrRetVal=OperationFail;
					}
					if(TWI_GetStatus() == TW_MR_SLA_ACK)
    1e60:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1e64:	80 34       	cpi	r24, 0x40	; 64
    1e66:	b1 f4       	brne	.+44     	; 0x1e94 <EEPROM_ReadByte+0x106>
					{
						while(TWI_ReadDataWithNACK(TWI_Channel_1,Character)!=OperationSuccess);
    1e68:	2a 81       	ldd	r18, Y+2	; 0x02
    1e6a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	b9 01       	movw	r22, r18
    1e70:	0e 94 9c 03 	call	0x738	; 0x738 <TWI_ReadDataWithNACK>
    1e74:	88 23       	and	r24, r24
    1e76:	c1 f7       	brne	.-16     	; 0x1e68 <EEPROM_ReadByte+0xda>
						if(TWI_GetStatus() == TW_MR_DATA_NACK)
    1e78:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1e7c:	88 35       	cpi	r24, 0x58	; 88
    1e7e:	39 f4       	brne	.+14     	; 0x1e8e <EEPROM_ReadByte+0x100>
						{
							while (TWI_SendStopCondition(TWI_Channel_1)!= OperationSuccess);
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TWI_SendStopCondition>
    1e86:	88 23       	and	r24, r24
    1e88:	d9 f7       	brne	.-10     	; 0x1e80 <EEPROM_ReadByte+0xf2>
							ErrRetVal = OperationSuccess;//may be we should first check if value of ErrRetVal != OperationFail
    1e8a:	19 82       	std	Y+1, r1	; 0x01
    1e8c:	11 c0       	rjmp	.+34     	; 0x1eb0 <EEPROM_ReadByte+0x122>
						}
						else
						{
							ErrRetVal = OperationFail;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <EEPROM_ReadByte+0x122>
						}
					}
					else
					{
						ErrRetVal = OperationFail;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	0b c0       	rjmp	.+22     	; 0x1eb0 <EEPROM_ReadByte+0x122>
					}
				}
				else
				{
					ErrRetVal = OperationFail;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	08 c0       	rjmp	.+16     	; 0x1eb0 <EEPROM_ReadByte+0x122>
				}
			}
			else
			{
				ErrRetVal = OperationFail;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	05 c0       	rjmp	.+10     	; 0x1eb0 <EEPROM_ReadByte+0x122>
			}
		}
		else
		{
			ErrRetVal = OperationFail;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <EEPROM_ReadByte+0x122>
		}
	}
	else
	{
		ErrRetVal = OperationFail;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <EEPROM_WriteByte>:
uint8_t EEPROM_WriteByte(uint8_t Character, uint16_t ByteAddress)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <EEPROM_WriteByte+0x6>
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <EEPROM_WriteByte+0x8>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	7c 83       	std	Y+4, r23	; 0x04
    1ed2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t ErrRetVal = OperationStarted;
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	/*Send Start Condition*/
	while(TWI_SendStartCondition(TWI_Channel_1)!=OperationSuccess);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	0e 94 2c 04 	call	0x858	; 0x858 <TWI_SendStartCondition>
    1ede:	88 23       	and	r24, r24
    1ee0:	d9 f7       	brne	.-10     	; 0x1ed8 <EEPROM_WriteByte+0x16>
	/*Check status for start condition fired correctly*/
	if(TWI_GetStatus()==TW_START)
    1ee2:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1ee6:	88 30       	cpi	r24, 0x08	; 8
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <EEPROM_WriteByte+0x2a>
    1eea:	43 c0       	rjmp	.+134    	; 0x1f72 <EEPROM_WriteByte+0xb0>
			break;
		case EEPROM_SIZE_4K://A0 are from Byte Address
			while(TWI_WriteData(TWI_Channel_1,0b10100000|EEPROM_A2<<3|EEPROM_A1<<2|READ_BIT(ByteAddress,9)<<1|EEPROM_WRITE)!=OperationSuccess);
			break;
		case EEPROM_SIZE_8K://A0,A1 are from Byte Address
			while(TWI_WriteData(TWI_Channel_1,0b10100000|EEPROM_A2<<3|READ_BIT(ByteAddress,9)<<2|READ_BIT(ByteAddress,8)<<1|EEPROM_WRITE<<0)!=OperationSuccess);
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	80 70       	andi	r24, 0x00	; 0
    1ef2:	92 70       	andi	r25, 0x02	; 2
    1ef4:	89 2f       	mov	r24, r25
    1ef6:	99 27       	eor	r25, r25
    1ef8:	86 95       	lsr	r24
    1efa:	28 2f       	mov	r18, r24
    1efc:	22 0f       	add	r18, r18
    1efe:	22 0f       	add	r18, r18
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	80 70       	andi	r24, 0x00	; 0
    1f06:	91 70       	andi	r25, 0x01	; 1
    1f08:	89 2f       	mov	r24, r25
    1f0a:	99 27       	eor	r25, r25
    1f0c:	88 0f       	add	r24, r24
    1f0e:	82 2b       	or	r24, r18
    1f10:	98 2f       	mov	r25, r24
    1f12:	90 6a       	ori	r25, 0xA0	; 160
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	69 2f       	mov	r22, r25
    1f18:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_WriteData>
    1f1c:	88 23       	and	r24, r24
    1f1e:	31 f7       	brne	.-52     	; 0x1eec <EEPROM_WriteByte+0x2a>
			while(TWI_WriteData(TWI_Channel_1,0b10100000|READ_BIT(ByteAddress,11)<<3|READ_BIT(ByteAddress,10)<<2|READ_BIT(ByteAddress,9)<<1|EEPROM_WRITE)!=OperationSuccess);
			break;
		default:
			ErrRetVal=OperationFail;
		}
		if(TWI_GetStatus() == TW_MT_SLA_ACK)
    1f20:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1f24:	88 31       	cpi	r24, 0x18	; 24
    1f26:	11 f5       	brne	.+68     	; 0x1f6c <EEPROM_WriteByte+0xaa>
		{
			/*Sending the byte Address*/
			while(TWI_WriteData(TWI_Channel_1,0b00000000|ByteAddress)!=OperationSuccess);
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	69 2f       	mov	r22, r25
    1f2e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_WriteData>
    1f32:	88 23       	and	r24, r24
    1f34:	c9 f7       	brne	.-14     	; 0x1f28 <EEPROM_WriteByte+0x66>
			if (TWI_GetStatus() == TW_MT_DATA_ACK)
    1f36:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1f3a:	88 32       	cpi	r24, 0x28	; 40
    1f3c:	a1 f4       	brne	.+40     	; 0x1f66 <EEPROM_WriteByte+0xa4>
			{
				/*sending the data Byte*/
				while(TWI_WriteData(TWI_Channel_1,Character)!=OperationSuccess);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	6a 81       	ldd	r22, Y+2	; 0x02
    1f42:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_WriteData>
    1f46:	88 23       	and	r24, r24
    1f48:	d1 f7       	brne	.-12     	; 0x1f3e <EEPROM_WriteByte+0x7c>
				if (TWI_GetStatus() == TW_MT_DATA_ACK)
    1f4a:	0e 94 aa 04 	call	0x954	; 0x954 <TWI_GetStatus>
    1f4e:	88 32       	cpi	r24, 0x28	; 40
    1f50:	39 f4       	brne	.+14     	; 0x1f60 <EEPROM_WriteByte+0x9e>
				{
					while (TWI_SendStopCondition(TWI_Channel_1)!= OperationSuccess);
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TWI_SendStopCondition>
    1f58:	88 23       	and	r24, r24
    1f5a:	d9 f7       	brne	.-10     	; 0x1f52 <EEPROM_WriteByte+0x90>
					ErrRetVal = OperationSuccess;
    1f5c:	19 82       	std	Y+1, r1	; 0x01
    1f5e:	0b c0       	rjmp	.+22     	; 0x1f76 <EEPROM_WriteByte+0xb4>
				}
				else
				{
					ErrRetVal=OperationFail;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	08 c0       	rjmp	.+16     	; 0x1f76 <EEPROM_WriteByte+0xb4>
				}
			}
			else
			{
				ErrRetVal=OperationFail;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	05 c0       	rjmp	.+10     	; 0x1f76 <EEPROM_WriteByte+0xb4>
			}
		}
		else
		{
			ErrRetVal=OperationFail;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <EEPROM_WriteByte+0xb4>
		}
	}
	else
	{
		ErrRetVal = OperationFail;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrRetVal;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <APP_Init>:
uint8_t UART_char = 0;
uint8_t DataFromEEPROM = 0;
uint8_t UART_string[255];
uint16_t ByteAddress=0;
void APP_Init()
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	UART_Init(UARTChannel_1);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
	EEPROM_Init();
    1f94:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <EEPROM_Init>
}
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <APP_Start>:
void APP_Start()
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
	while(UART_TransmitString(UARTChannel_1,(uint8_t*)"Enter the Command")!=OperationSuccess);
    1fa6:	20 e6       	ldi	r18, 0x60	; 96
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	b9 01       	movw	r22, r18
    1fae:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    1fb2:	88 23       	and	r24, r24
    1fb4:	c1 f7       	brne	.-16     	; 0x1fa6 <APP_Start+0x8>
	while (UART_ReceiveString(UARTChannel_1,UART_string)!=OperationSuccess);
    1fb6:	2b e1       	ldi	r18, 0x1B	; 27
    1fb8:	31 e0       	ldi	r19, 0x01	; 1
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_ReceiveString>
    1fc2:	88 23       	and	r24, r24
    1fc4:	c1 f7       	brne	.-16     	; 0x1fb6 <APP_Start+0x18>
	STR_CompareString(UART_string,(uint8_t*)"WRITE", &writestate);
    1fc6:	8b e1       	ldi	r24, 0x1B	; 27
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	22 e7       	ldi	r18, 0x72	; 114
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	44 e1       	ldi	r20, 0x14	; 20
    1fd0:	51 e0       	ldi	r21, 0x01	; 1
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <STR_CompareString>
	STR_CompareString(UART_string,(uint8_t*)"READ", &readstate);
    1fd8:	8b e1       	ldi	r24, 0x1B	; 27
    1fda:	91 e0       	ldi	r25, 0x01	; 1
    1fdc:	28 e7       	ldi	r18, 0x78	; 120
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	45 e1       	ldi	r20, 0x15	; 21
    1fe2:	51 e0       	ldi	r21, 0x01	; 1
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <STR_CompareString>
	if(writestate)
    1fea:	80 91 14 01 	lds	r24, 0x0114
    1fee:	88 23       	and	r24, r24
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <APP_Start+0x56>
    1ff2:	53 c0       	rjmp	.+166    	; 0x209a <APP_Start+0xfc>
	{
		while(UART_TransmitString(UARTChannel_1,(uint8_t*)"ENTER THE BYTE ADDRESS")!=OperationSuccess);
    1ff4:	2d e7       	ldi	r18, 0x7D	; 125
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	b9 01       	movw	r22, r18
    1ffc:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    2000:	88 23       	and	r24, r24
    2002:	c1 f7       	brne	.-16     	; 0x1ff4 <APP_Start+0x56>
		while (UART_ReceiveString(UARTChannel_1,UART_string)!=OperationSuccess);
    2004:	2b e1       	ldi	r18, 0x1B	; 27
    2006:	31 e0       	ldi	r19, 0x01	; 1
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	b9 01       	movw	r22, r18
    200c:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_ReceiveString>
    2010:	88 23       	and	r24, r24
    2012:	c1 f7       	brne	.-16     	; 0x2004 <APP_Start+0x66>
		STR_StringIsNumeric(UART_string,&isnumericstate);
    2014:	8b e1       	ldi	r24, 0x1B	; 27
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	26 e1       	ldi	r18, 0x16	; 22
    201a:	31 e0       	ldi	r19, 0x01	; 1
    201c:	b9 01       	movw	r22, r18
    201e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <STR_StringIsNumeric>
		if(isnumericstate)
    2022:	80 91 16 01 	lds	r24, 0x0116
    2026:	88 23       	and	r24, r24
    2028:	79 f1       	breq	.+94     	; 0x2088 <APP_Start+0xea>
		{
			STR_String2Number(UART_string,&ByteAddress);
    202a:	8b e1       	ldi	r24, 0x1B	; 27
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	29 e1       	ldi	r18, 0x19	; 25
    2030:	31 e0       	ldi	r19, 0x01	; 1
    2032:	b9 01       	movw	r22, r18
    2034:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <STR_String2Number>
			while(UART_TransmitString(UARTChannel_1,(uint8_t*)"OK")!=OperationSuccess);
    2038:	24 e9       	ldi	r18, 0x94	; 148
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	b9 01       	movw	r22, r18
    2040:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    2044:	88 23       	and	r24, r24
    2046:	c1 f7       	brne	.-16     	; 0x2038 <APP_Start+0x9a>
			while(UART_TransmitString(UARTChannel_1,(uint8_t*)"ENTER THE CHARACTER TO BE SAVED")!=OperationSuccess);
    2048:	27 e9       	ldi	r18, 0x97	; 151
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	b9 01       	movw	r22, r18
    2050:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    2054:	88 23       	and	r24, r24
    2056:	c1 f7       	brne	.-16     	; 0x2048 <APP_Start+0xaa>
			while(UART_ReceiveChar(UARTChannel_1,&UART_char)!=OperationSuccess);
    2058:	27 e1       	ldi	r18, 0x17	; 23
    205a:	31 e0       	ldi	r19, 0x01	; 1
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	b9 01       	movw	r22, r18
    2060:	0e 94 02 01 	call	0x204	; 0x204 <UART_ReceiveChar>
    2064:	88 23       	and	r24, r24
    2066:	c1 f7       	brne	.-16     	; 0x2058 <APP_Start+0xba>
			while(UART_TransmitChar(UARTChannel_1,'\r')!=OperationSuccess);
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	6d e0       	ldi	r22, 0x0D	; 13
    206c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
    2070:	88 23       	and	r24, r24
    2072:	d1 f7       	brne	.-12     	; 0x2068 <APP_Start+0xca>
			EEPROM_WriteByte(UART_char,ByteAddress);//ByteAddress,UART_char
    2074:	80 91 17 01 	lds	r24, 0x0117
    2078:	20 91 19 01 	lds	r18, 0x0119
    207c:	30 91 1a 01 	lds	r19, 0x011A
    2080:	b9 01       	movw	r22, r18
    2082:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <EEPROM_WriteByte>
    2086:	69 c0       	rjmp	.+210    	; 0x215a <APP_Start+0x1bc>
		}
		else
		{
			while(UART_TransmitString(UARTChannel_1,(uint8_t*)"you entered a non-numeric address")!=OperationSuccess);
    2088:	27 eb       	ldi	r18, 0xB7	; 183
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	b9 01       	movw	r22, r18
    2090:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    2094:	88 23       	and	r24, r24
    2096:	c1 f7       	brne	.-16     	; 0x2088 <APP_Start+0xea>
    2098:	60 c0       	rjmp	.+192    	; 0x215a <APP_Start+0x1bc>
		}
	}
	else if(readstate)
    209a:	80 91 15 01 	lds	r24, 0x0115
    209e:	88 23       	and	r24, r24
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <APP_Start+0x106>
    20a2:	53 c0       	rjmp	.+166    	; 0x214a <APP_Start+0x1ac>
	{
		while(UART_TransmitString(UARTChannel_1,(uint8_t*)"ENTER THE BYTE ADDRESS")!=OperationSuccess);
    20a4:	2d e7       	ldi	r18, 0x7D	; 125
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	b9 01       	movw	r22, r18
    20ac:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    20b0:	88 23       	and	r24, r24
    20b2:	c1 f7       	brne	.-16     	; 0x20a4 <APP_Start+0x106>
		while (UART_ReceiveString(UARTChannel_1,UART_string)!=OperationSuccess);
    20b4:	2b e1       	ldi	r18, 0x1B	; 27
    20b6:	31 e0       	ldi	r19, 0x01	; 1
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	b9 01       	movw	r22, r18
    20bc:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_ReceiveString>
    20c0:	88 23       	and	r24, r24
    20c2:	c1 f7       	brne	.-16     	; 0x20b4 <APP_Start+0x116>
		STR_StringIsNumeric(UART_string,&isnumericstate);
    20c4:	8b e1       	ldi	r24, 0x1B	; 27
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	26 e1       	ldi	r18, 0x16	; 22
    20ca:	31 e0       	ldi	r19, 0x01	; 1
    20cc:	b9 01       	movw	r22, r18
    20ce:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <STR_StringIsNumeric>
		if(isnumericstate)
    20d2:	80 91 16 01 	lds	r24, 0x0116
    20d6:	88 23       	and	r24, r24
    20d8:	79 f1       	breq	.+94     	; 0x2138 <APP_Start+0x19a>
		{
			STR_String2Number(UART_string,&ByteAddress);
    20da:	8b e1       	ldi	r24, 0x1B	; 27
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	29 e1       	ldi	r18, 0x19	; 25
    20e0:	31 e0       	ldi	r19, 0x01	; 1
    20e2:	b9 01       	movw	r22, r18
    20e4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <STR_String2Number>
			while(UART_TransmitString(UARTChannel_1,(uint8_t*)"OK")!=OperationSuccess);
    20e8:	24 e9       	ldi	r18, 0x94	; 148
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	b9 01       	movw	r22, r18
    20f0:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    20f4:	88 23       	and	r24, r24
    20f6:	c1 f7       	brne	.-16     	; 0x20e8 <APP_Start+0x14a>
			while(UART_TransmitString(UARTChannel_1,(uint8_t*)"the stored data is:")!=OperationSuccess);
    20f8:	29 ed       	ldi	r18, 0xD9	; 217
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	b9 01       	movw	r22, r18
    2100:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    2104:	88 23       	and	r24, r24
    2106:	c1 f7       	brne	.-16     	; 0x20f8 <APP_Start+0x15a>
			EEPROM_ReadByte(&DataFromEEPROM,ByteAddress);//ByteAddress
    2108:	20 91 19 01 	lds	r18, 0x0119
    210c:	30 91 1a 01 	lds	r19, 0x011A
    2110:	88 e1       	ldi	r24, 0x18	; 24
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	b9 01       	movw	r22, r18
    2116:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <EEPROM_ReadByte>
			while(UART_TransmitChar(UARTChannel_1,DataFromEEPROM)!=OperationSuccess);
    211a:	90 91 18 01 	lds	r25, 0x0118
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	69 2f       	mov	r22, r25
    2122:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
    2126:	88 23       	and	r24, r24
    2128:	c1 f7       	brne	.-16     	; 0x211a <APP_Start+0x17c>
			while(UART_TransmitChar(UARTChannel_1,'\r')!=OperationSuccess);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	6d e0       	ldi	r22, 0x0D	; 13
    212e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_TransmitChar>
    2132:	88 23       	and	r24, r24
    2134:	d1 f7       	brne	.-12     	; 0x212a <APP_Start+0x18c>
    2136:	11 c0       	rjmp	.+34     	; 0x215a <APP_Start+0x1bc>
		}
		else
		{
			while(UART_TransmitString(UARTChannel_1,(uint8_t*)"you entered a non-numeric address")!=OperationSuccess);
    2138:	27 eb       	ldi	r18, 0xB7	; 183
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	b9 01       	movw	r22, r18
    2140:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    2144:	88 23       	and	r24, r24
    2146:	c1 f7       	brne	.-16     	; 0x2138 <APP_Start+0x19a>
    2148:	08 c0       	rjmp	.+16     	; 0x215a <APP_Start+0x1bc>
		}
	}
	else
	{
		while(UART_TransmitString(UARTChannel_1,(uint8_t*)"You entered invalid Command")!=OperationSuccess);
    214a:	2d ee       	ldi	r18, 0xED	; 237
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	b9 01       	movw	r22, r18
    2152:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TransmitString>
    2156:	88 23       	and	r24, r24
    2158:	c1 f7       	brne	.-16     	; 0x214a <APP_Start+0x1ac>
	}
}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <main>:
#include "MCAL/TWI/TWI.h"
#include "HAL/EEPROM/EEPROM_CONFIG.h"
#include "APP/APP.h"

int main()
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
	APP_Init();
    2168:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <APP_Init>
	while (1)
	{
		APP_Start();
    216c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <APP_Start>
    2170:	fd cf       	rjmp	.-6      	; 0x216c <main+0xc>

00002172 <__mulsi3>:
    2172:	62 9f       	mul	r22, r18
    2174:	d0 01       	movw	r26, r0
    2176:	73 9f       	mul	r23, r19
    2178:	f0 01       	movw	r30, r0
    217a:	82 9f       	mul	r24, r18
    217c:	e0 0d       	add	r30, r0
    217e:	f1 1d       	adc	r31, r1
    2180:	64 9f       	mul	r22, r20
    2182:	e0 0d       	add	r30, r0
    2184:	f1 1d       	adc	r31, r1
    2186:	92 9f       	mul	r25, r18
    2188:	f0 0d       	add	r31, r0
    218a:	83 9f       	mul	r24, r19
    218c:	f0 0d       	add	r31, r0
    218e:	74 9f       	mul	r23, r20
    2190:	f0 0d       	add	r31, r0
    2192:	65 9f       	mul	r22, r21
    2194:	f0 0d       	add	r31, r0
    2196:	99 27       	eor	r25, r25
    2198:	72 9f       	mul	r23, r18
    219a:	b0 0d       	add	r27, r0
    219c:	e1 1d       	adc	r30, r1
    219e:	f9 1f       	adc	r31, r25
    21a0:	63 9f       	mul	r22, r19
    21a2:	b0 0d       	add	r27, r0
    21a4:	e1 1d       	adc	r30, r1
    21a6:	f9 1f       	adc	r31, r25
    21a8:	bd 01       	movw	r22, r26
    21aa:	cf 01       	movw	r24, r30
    21ac:	11 24       	eor	r1, r1
    21ae:	08 95       	ret

000021b0 <__udivmodsi4>:
    21b0:	a1 e2       	ldi	r26, 0x21	; 33
    21b2:	1a 2e       	mov	r1, r26
    21b4:	aa 1b       	sub	r26, r26
    21b6:	bb 1b       	sub	r27, r27
    21b8:	fd 01       	movw	r30, r26
    21ba:	0d c0       	rjmp	.+26     	; 0x21d6 <__udivmodsi4_ep>

000021bc <__udivmodsi4_loop>:
    21bc:	aa 1f       	adc	r26, r26
    21be:	bb 1f       	adc	r27, r27
    21c0:	ee 1f       	adc	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	a2 17       	cp	r26, r18
    21c6:	b3 07       	cpc	r27, r19
    21c8:	e4 07       	cpc	r30, r20
    21ca:	f5 07       	cpc	r31, r21
    21cc:	20 f0       	brcs	.+8      	; 0x21d6 <__udivmodsi4_ep>
    21ce:	a2 1b       	sub	r26, r18
    21d0:	b3 0b       	sbc	r27, r19
    21d2:	e4 0b       	sbc	r30, r20
    21d4:	f5 0b       	sbc	r31, r21

000021d6 <__udivmodsi4_ep>:
    21d6:	66 1f       	adc	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	88 1f       	adc	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	1a 94       	dec	r1
    21e0:	69 f7       	brne	.-38     	; 0x21bc <__udivmodsi4_loop>
    21e2:	60 95       	com	r22
    21e4:	70 95       	com	r23
    21e6:	80 95       	com	r24
    21e8:	90 95       	com	r25
    21ea:	9b 01       	movw	r18, r22
    21ec:	ac 01       	movw	r20, r24
    21ee:	bd 01       	movw	r22, r26
    21f0:	cf 01       	movw	r24, r30
    21f2:	08 95       	ret

000021f4 <_exit>:
    21f4:	f8 94       	cli

000021f6 <__stop_program>:
    21f6:	ff cf       	rjmp	.-2      	; 0x21f6 <__stop_program>
